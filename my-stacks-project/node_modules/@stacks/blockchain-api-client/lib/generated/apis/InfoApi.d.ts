/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the <a href=\"https://docs.hiro.so/get-started/stacks-blockchain-api\">Stacks Blockchain API</a>.  <a href=\"https://hirosystems.github.io/stacks-blockchain-api/collection.json\" download=\"stacks-api-collection.json\">Download Postman collection</a>
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { CoreNodeInfoResponse, CoreNodePoxResponse, GetStxSupplyLegacyFormatResponse, GetStxSupplyResponse, NetworkBlockTimeResponse, NetworkBlockTimesResponse, ServerStatusResponse } from '../models';
export interface GetNetworkBlockTimeByNetworkRequest {
    network: GetNetworkBlockTimeByNetworkNetworkEnum;
}
export interface GetStxSupplyRequest {
    height?: number;
}
export interface GetTotalStxSupplyLegacyFormatRequest {
    height?: number;
}
/**
 * InfoApi - interface
 *
 * @export
 * @interface InfoApiInterface
 */
export interface InfoApiInterface {
    /**
     * Retrieves information about the Core API including the server version
     * @summary Get Core API info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    getCoreApiInfoRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<CoreNodeInfoResponse>>;
    /**
     * Retrieves information about the Core API including the server version
     * Get Core API info
     */
    getCoreApiInfo(initOverrides?: RequestInit): Promise<CoreNodeInfoResponse>;
    /**
     * Retrieves the target block time for a given network. The network can be mainnet or testnet. The block time is hardcoded and will change throughout the implementation phases of the testnet.
     * @summary Get a given network\'s target block time
     * @param {'testnet' | 'mainnet'} network Which network to retrieve the target block time of
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    getNetworkBlockTimeByNetworkRaw(requestParameters: GetNetworkBlockTimeByNetworkRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<NetworkBlockTimeResponse>>;
    /**
     * Retrieves the target block time for a given network. The network can be mainnet or testnet. The block time is hardcoded and will change throughout the implementation phases of the testnet.
     * Get a given network\'s target block time
     */
    getNetworkBlockTimeByNetwork(requestParameters: GetNetworkBlockTimeByNetworkRequest, initOverrides?: RequestInit): Promise<NetworkBlockTimeResponse>;
    /**
     * Retrieves the target block times for mainnet and testnet. The block time is hardcoded and will change throughout the implementation phases of the testnet.
     * @summary Get the network target block time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    getNetworkBlockTimesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<NetworkBlockTimesResponse>>;
    /**
     * Retrieves the target block times for mainnet and testnet. The block time is hardcoded and will change throughout the implementation phases of the testnet.
     * Get the network target block time
     */
    getNetworkBlockTimes(initOverrides?: RequestInit): Promise<NetworkBlockTimesResponse>;
    /**
     * Retrieves Proof-of-Transfer (PoX) information. Can be used for Stacking.
     * @summary Get Proof-of-Transfer details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    getPoxInfoRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<CoreNodePoxResponse>>;
    /**
     * Retrieves Proof-of-Transfer (PoX) information. Can be used for Stacking.
     * Get Proof-of-Transfer details
     */
    getPoxInfo(initOverrides?: RequestInit): Promise<CoreNodePoxResponse>;
    /**
     * Retrieves the running status of the Stacks Blockchain API, including the server version and current chain tip information.
     * @summary API status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    getStatusRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<ServerStatusResponse>>;
    /**
     * Retrieves the running status of the Stacks Blockchain API, including the server version and current chain tip information.
     * API status
     */
    getStatus(initOverrides?: RequestInit): Promise<ServerStatusResponse>;
    /**
     * Retrieves the total and unlocked STX supply. More information on Stacking can be found [here] (https://docs.stacks.co/understand-stacks/stacking).
     * @summary Get total and unlocked STX supply
     * @param {number} [height] The block height at which to query supply details from, if not provided then the latest block height is used
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    getStxSupplyRaw(requestParameters: GetStxSupplyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetStxSupplyResponse>>;
    /**
     * Retrieves the total and unlocked STX supply. More information on Stacking can be found [here] (https://docs.stacks.co/understand-stacks/stacking).
     * Get total and unlocked STX supply
     */
    getStxSupply(requestParameters: GetStxSupplyRequest, initOverrides?: RequestInit): Promise<GetStxSupplyResponse>;
    /**
     * Retrieves the STX tokens currently in circulation that have been unlocked as plain text.
     * @summary Get circulating STX supply in plain text format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    getStxSupplyCirculatingPlainRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>>;
    /**
     * Retrieves the STX tokens currently in circulation that have been unlocked as plain text.
     * Get circulating STX supply in plain text format
     */
    getStxSupplyCirculatingPlain(initOverrides?: RequestInit): Promise<string>;
    /**
     * Retrieves the total supply for STX tokens as plain text.
     * @summary Get total STX supply in plain text format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    getStxSupplyTotalSupplyPlainRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>>;
    /**
     * Retrieves the total supply for STX tokens as plain text.
     * Get total STX supply in plain text format
     */
    getStxSupplyTotalSupplyPlain(initOverrides?: RequestInit): Promise<string>;
    /**
     * Retrieves total supply of STX tokens including those currently in circulation that have been unlocked.
     * @summary Get total and unlocked STX supply (results formatted the same as the legacy 1.0 API)
     * @param {number} [height] The block height at which to query supply details from, if not provided then the latest block height is used
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApiInterface
     */
    getTotalStxSupplyLegacyFormatRaw(requestParameters: GetTotalStxSupplyLegacyFormatRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetStxSupplyLegacyFormatResponse>>;
    /**
     * Retrieves total supply of STX tokens including those currently in circulation that have been unlocked.
     * Get total and unlocked STX supply (results formatted the same as the legacy 1.0 API)
     */
    getTotalStxSupplyLegacyFormat(requestParameters: GetTotalStxSupplyLegacyFormatRequest, initOverrides?: RequestInit): Promise<GetStxSupplyLegacyFormatResponse>;
}
/**
 *
 */
export declare class InfoApi extends runtime.BaseAPI implements InfoApiInterface {
    /**
     * Retrieves information about the Core API including the server version
     * Get Core API info
     */
    getCoreApiInfoRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<CoreNodeInfoResponse>>;
    /**
     * Retrieves information about the Core API including the server version
     * Get Core API info
     */
    getCoreApiInfo(initOverrides?: RequestInit): Promise<CoreNodeInfoResponse>;
    /**
     * Retrieves the target block time for a given network. The network can be mainnet or testnet. The block time is hardcoded and will change throughout the implementation phases of the testnet.
     * Get a given network\'s target block time
     */
    getNetworkBlockTimeByNetworkRaw(requestParameters: GetNetworkBlockTimeByNetworkRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<NetworkBlockTimeResponse>>;
    /**
     * Retrieves the target block time for a given network. The network can be mainnet or testnet. The block time is hardcoded and will change throughout the implementation phases of the testnet.
     * Get a given network\'s target block time
     */
    getNetworkBlockTimeByNetwork(requestParameters: GetNetworkBlockTimeByNetworkRequest, initOverrides?: RequestInit): Promise<NetworkBlockTimeResponse>;
    /**
     * Retrieves the target block times for mainnet and testnet. The block time is hardcoded and will change throughout the implementation phases of the testnet.
     * Get the network target block time
     */
    getNetworkBlockTimesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<NetworkBlockTimesResponse>>;
    /**
     * Retrieves the target block times for mainnet and testnet. The block time is hardcoded and will change throughout the implementation phases of the testnet.
     * Get the network target block time
     */
    getNetworkBlockTimes(initOverrides?: RequestInit): Promise<NetworkBlockTimesResponse>;
    /**
     * Retrieves Proof-of-Transfer (PoX) information. Can be used for Stacking.
     * Get Proof-of-Transfer details
     */
    getPoxInfoRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<CoreNodePoxResponse>>;
    /**
     * Retrieves Proof-of-Transfer (PoX) information. Can be used for Stacking.
     * Get Proof-of-Transfer details
     */
    getPoxInfo(initOverrides?: RequestInit): Promise<CoreNodePoxResponse>;
    /**
     * Retrieves the running status of the Stacks Blockchain API, including the server version and current chain tip information.
     * API status
     */
    getStatusRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<ServerStatusResponse>>;
    /**
     * Retrieves the running status of the Stacks Blockchain API, including the server version and current chain tip information.
     * API status
     */
    getStatus(initOverrides?: RequestInit): Promise<ServerStatusResponse>;
    /**
     * Retrieves the total and unlocked STX supply. More information on Stacking can be found [here] (https://docs.stacks.co/understand-stacks/stacking).
     * Get total and unlocked STX supply
     */
    getStxSupplyRaw(requestParameters: GetStxSupplyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetStxSupplyResponse>>;
    /**
     * Retrieves the total and unlocked STX supply. More information on Stacking can be found [here] (https://docs.stacks.co/understand-stacks/stacking).
     * Get total and unlocked STX supply
     */
    getStxSupply(requestParameters: GetStxSupplyRequest, initOverrides?: RequestInit): Promise<GetStxSupplyResponse>;
    /**
     * Retrieves the STX tokens currently in circulation that have been unlocked as plain text.
     * Get circulating STX supply in plain text format
     */
    getStxSupplyCirculatingPlainRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>>;
    /**
     * Retrieves the STX tokens currently in circulation that have been unlocked as plain text.
     * Get circulating STX supply in plain text format
     */
    getStxSupplyCirculatingPlain(initOverrides?: RequestInit): Promise<string>;
    /**
     * Retrieves the total supply for STX tokens as plain text.
     * Get total STX supply in plain text format
     */
    getStxSupplyTotalSupplyPlainRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>>;
    /**
     * Retrieves the total supply for STX tokens as plain text.
     * Get total STX supply in plain text format
     */
    getStxSupplyTotalSupplyPlain(initOverrides?: RequestInit): Promise<string>;
    /**
     * Retrieves total supply of STX tokens including those currently in circulation that have been unlocked.
     * Get total and unlocked STX supply (results formatted the same as the legacy 1.0 API)
     */
    getTotalStxSupplyLegacyFormatRaw(requestParameters: GetTotalStxSupplyLegacyFormatRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetStxSupplyLegacyFormatResponse>>;
    /**
     * Retrieves total supply of STX tokens including those currently in circulation that have been unlocked.
     * Get total and unlocked STX supply (results formatted the same as the legacy 1.0 API)
     */
    getTotalStxSupplyLegacyFormat(requestParameters: GetTotalStxSupplyLegacyFormatRequest, initOverrides?: RequestInit): Promise<GetStxSupplyLegacyFormatResponse>;
}
/**
    * @export
    * @enum {string}
    */
export declare enum GetNetworkBlockTimeByNetworkNetworkEnum {
    testnet = "testnet",
    mainnet = "mainnet"
}
