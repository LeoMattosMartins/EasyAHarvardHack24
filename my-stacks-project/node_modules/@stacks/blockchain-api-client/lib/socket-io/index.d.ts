import type { Socket } from 'socket.io-client';
import { ClientToServerMessages, Topic, ServerToClientMessages } from '@stacks/stacks-blockchain-api-types';
export declare type StacksApiSocket = Socket<ServerToClientMessages, ClientToServerMessages>;
export interface StacksApiSocketConnectionOptions {
    url?: string;
    /** Initial topics to subscribe to. */
    subscriptions?: Topic[];
}
export declare class StacksApiSocketClient {
    readonly socket: StacksApiSocket;
    constructor(socket: StacksApiSocket);
    static connect({ url, subscriptions, }?: StacksApiSocketConnectionOptions): StacksApiSocketClient;
    handleSubscription(topic: Topic, subscribe?: boolean): {
        unsubscribe: () => void;
    };
    subscribeBlocks(): {
        unsubscribe: () => void;
    };
    unsubscribeBlocks(): void;
    subscribeMicroblocks(): {
        unsubscribe: () => void;
    };
    unsubscribeMicroblocks(): void;
    subscribeMempool(): {
        unsubscribe: () => void;
    };
    unsubscribeMempool(): void;
    subscribeAddressTransactions(address: string): {
        unsubscribe: () => void;
    };
    unsubscribeAddressTransactions(address: string): void;
    subscribeAddressStxBalance(address: string): {
        unsubscribe: () => void;
    };
    unsubscribeAddressStxBalance(address: string): void;
    subscribeTransaction(txId: string): {
        unsubscribe: () => void;
    };
    unsubscribeTransaction(txId: string): void;
    logEvents(): void;
}
