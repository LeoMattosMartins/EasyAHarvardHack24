{"version":3,"file":"index.js","mappings":"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","sources":["webpack://StacksStacking/webpack/universalModuleDefinition","webpack://StacksStacking/webpack/runtime/create fake namespace object","webpack://StacksStacking/../../node_modules/@noble/hashes/_assert.js","webpack://StacksStacking/../../node_modules/@noble/hashes/_sha2.js","webpack://StacksStacking/../../node_modules/@noble/hashes/cryptoBrowser.js","webpack://StacksStacking/../../node_modules/@noble/hashes/sha256.js","webpack://StacksStacking/../../node_modules/@noble/hashes/utils.js","webpack://StacksStacking/../../node_modules/base-x/src/index.js","webpack://StacksStacking/../../node_modules/base64-js/index.js","webpack://StacksStacking/../../node_modules/bs58/index.js","webpack://StacksStacking/../../node_modules/c32check/lib/address.js","webpack://StacksStacking/../../node_modules/c32check/lib/base58check.js","webpack://StacksStacking/../../node_modules/c32check/lib/checksum.js","webpack://StacksStacking/../../node_modules/c32check/lib/encoding.js","webpack://StacksStacking/../../node_modules/c32check/lib/index.js","webpack://StacksStacking/../../node_modules/lodash.clonedeep/index.js","webpack://StacksStacking/webpack/bootstrap","webpack://StacksStacking/webpack/runtime/compat get default export","webpack://StacksStacking/webpack/runtime/define property getters","webpack://StacksStacking/webpack/runtime/global","webpack://StacksStacking/webpack/runtime/hasOwnProperty shorthand","webpack://StacksStacking/webpack/runtime/make namespace object","webpack://StacksStacking/webpack/runtime/node module decorator","webpack://StacksStacking/../common/dist/esm/utils.js","webpack://StacksStacking/../common/dist/esm/constants.js","webpack://StacksStacking/../common/dist/esm/fetch.js","webpack://StacksStacking/../network/dist/esm/constants.js","webpack://StacksStacking/../network/dist/esm/network.js","webpack://StacksStacking/../transactions/dist/esm/errors.js","webpack://StacksStacking/../common/dist/esm/buffer.js","webpack://StacksStacking/../transactions/dist/esm/BytesReader.js","webpack://StacksStacking/../transactions/dist/esm/constants.js","webpack://StacksStacking/../../node_modules/@noble/hashes/esm/_assert.js","webpack://StacksStacking/../../node_modules/@noble/hashes/esm/utils.js","webpack://StacksStacking/../../node_modules/@noble/hashes/esm/cryptoBrowser.js","webpack://StacksStacking/../../node_modules/@noble/hashes/esm/_sha2.js","webpack://StacksStacking/../../node_modules/@noble/hashes/esm/ripemd160.js","webpack://StacksStacking/../../node_modules/@noble/hashes/esm/sha256.js","webpack://StacksStacking/../../node_modules/@noble/hashes/esm/_u64.js","webpack://StacksStacking/../../node_modules/@noble/hashes/esm/sha512.js","webpack://StacksStacking/../../node_modules/@noble/secp256k1/lib/esm/index.js","webpack://StacksStacking/../transactions/dist/esm/clarity/constants.js","webpack://StacksStacking/../transactions/dist/esm/clarity/values/intCV.js","webpack://StacksStacking/../transactions/dist/esm/clarity/values/bufferCV.js","webpack://StacksStacking/../transactions/dist/esm/wire/types.js","webpack://StacksStacking/../transactions/dist/esm/wire/create.js","webpack://StacksStacking/../../node_modules/@noble/hashes/esm/hmac.js","webpack://StacksStacking/../common/dist/esm/signatures.js","webpack://StacksStacking/../common/dist/esm/keys.js","webpack://StacksStacking/../transactions/dist/esm/keys.js","webpack://StacksStacking/../transactions/dist/esm/wire/helpers.js","webpack://StacksStacking/../transactions/dist/esm/clarity/values/principalCV.js","webpack://StacksStacking/../transactions/dist/esm/clarity/values/optionalCV.js","webpack://StacksStacking/../transactions/dist/esm/clarity/values/tupleCV.js","webpack://StacksStacking/../transactions/dist/esm/utils.js","webpack://StacksStacking/../transactions/dist/esm/clarity/values/stringCV.js","webpack://StacksStacking/../transactions/dist/esm/clarity/deserialize.js","webpack://StacksStacking/../transactions/dist/esm/clarity/values/booleanCV.js","webpack://StacksStacking/../transactions/dist/esm/clarity/values/responseCV.js","webpack://StacksStacking/../transactions/dist/esm/clarity/values/listCV.js","webpack://StacksStacking/../transactions/dist/esm/clarity/serialize.js","webpack://StacksStacking/../transactions/dist/esm/wire/serialization.js","webpack://StacksStacking/../transactions/dist/esm/authorization.js","webpack://StacksStacking/../transactions/dist/esm/transaction.js","webpack://StacksStacking/../transactions/dist/esm/fetch.js","webpack://StacksStacking/../transactions/dist/esm/clarity/clarityValue.js","webpack://StacksStacking/../transactions/dist/esm/contract-abi.js","webpack://StacksStacking/../transactions/dist/esm/postcondition.js","webpack://StacksStacking/../transactions/dist/esm/signer.js","webpack://StacksStacking/../transactions/dist/esm/builders.js","webpack://StacksStacking/./src/constants.ts","webpack://StacksStacking/../../node_modules/@scure/base/lib/esm/index.js","webpack://StacksStacking/../encryption/dist/esm/keys.js","webpack://StacksStacking/../encryption/dist/esm/varuint.js","webpack://StacksStacking/../encryption/dist/esm/messageSignature.js","webpack://StacksStacking/../encryption/dist/esm/ec.js","webpack://StacksStacking/../transactions/dist/esm/structuredDataSignature.js","webpack://StacksStacking/./src/utils.ts","webpack://StacksStacking/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"StacksStacking\"] = factory();\n\telse\n\t\troot[\"StacksStacking\"] = factory();\n})(this, () => {\nreturn ","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexports.number = number;\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexports.bool = bool;\nfunction bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexports.bytes = bytes;\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexports.hash = hash;\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexports.exists = exists;\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexports.output = output;\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexports.default = assert;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SHA2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends utils_js_1.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0, utils_js_1.createView)(this.buffer);\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0, utils_js_1.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0, utils_js_1.createView)(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\nexports.SHA2 = SHA2;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.crypto = void 0;\nexports.crypto = {\n    node: undefined,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha224 = exports.sha256 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());\nexports.sha224 = (0, utils_js_1.wrapConstructor)(() => new SHA224());\n","\"use strict\";\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.randomBytes = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nconst crypto_1 = require(\"@noble/hashes/crypto\");\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.u8 = u8;\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\nexports.u32 = u32;\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.createView = createView;\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexports.rotr = rotr;\nexports.isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!exports.isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nfunction bytesToHex(uint8a) {\n    // pre-caching improves the speed 6x\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nexports.bytesToHex = bytesToHex;\n/**\n * @example hexToBytes('deadbeef')\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nexports.hexToBytes = hexToBytes;\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\nexports.nextTick = nextTick;\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await (0, exports.nextTick)();\n        ts += diff;\n    }\n}\nexports.asyncLoop = asyncLoop;\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nexports.utf8ToBytes = utf8ToBytes;\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\nexports.toBytes = toBytes;\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nexports.concatBytes = concatBytes;\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nexports.Hash = Hash;\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new TypeError('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexports.checkOpts = checkOpts;\nfunction wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\nexports.wrapConstructor = wrapConstructor;\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexports.wrapConstructorWithOpts = wrapConstructorWithOpts;\n/**\n * Secure PRNG\n */\nfunction randomBytes(bytesLength = 32) {\n    if (crypto_1.crypto.web) {\n        return crypto_1.crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    }\n    else if (crypto_1.crypto.node) {\n        return new Uint8Array(crypto_1.crypto.node.randomBytes(bytesLength).buffer);\n    }\n    else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n}\nexports.randomBytes = randomBytes;\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) {\n    } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = new Uint8Array(zeroes + (size - it4))\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","const basex = require('base-x')\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.c32ToB58 = exports.b58ToC32 = exports.c32addressDecode = exports.c32address = exports.versions = void 0;\nconst checksum_1 = require(\"./checksum\");\nconst base58check = require(\"./base58check\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nexports.versions = {\n    mainnet: {\n        p2pkh: 22,\n        p2sh: 20, // 'M'\n    },\n    testnet: {\n        p2pkh: 26,\n        p2sh: 21, // 'N'\n    },\n};\n// address conversion : bitcoin to stacks\nconst ADDR_BITCOIN_TO_STACKS = {};\nADDR_BITCOIN_TO_STACKS[0] = exports.versions.mainnet.p2pkh;\nADDR_BITCOIN_TO_STACKS[5] = exports.versions.mainnet.p2sh;\nADDR_BITCOIN_TO_STACKS[111] = exports.versions.testnet.p2pkh;\nADDR_BITCOIN_TO_STACKS[196] = exports.versions.testnet.p2sh;\n// address conversion : stacks to bitcoin\nconst ADDR_STACKS_TO_BITCOIN = {};\nADDR_STACKS_TO_BITCOIN[exports.versions.mainnet.p2pkh] = 0;\nADDR_STACKS_TO_BITCOIN[exports.versions.mainnet.p2sh] = 5;\nADDR_STACKS_TO_BITCOIN[exports.versions.testnet.p2pkh] = 111;\nADDR_STACKS_TO_BITCOIN[exports.versions.testnet.p2sh] = 196;\n/**\n * Make a c32check address with the given version and hash160\n * The only difference between a c32check string and c32 address\n * is that the letter 'S' is pre-pended.\n * @param {number} version - the address version number\n * @param {string} hash160hex - the hash160 to encode (must be a hash160)\n * @returns {string} the address\n */\nfunction c32address(version, hash160hex) {\n    if (!hash160hex.match(/^[0-9a-fA-F]{40}$/)) {\n        throw new Error('Invalid argument: not a hash160 hex string');\n    }\n    const c32string = (0, checksum_1.c32checkEncode)(version, hash160hex);\n    return `S${c32string}`;\n}\nexports.c32address = c32address;\n/**\n * Decode a c32 address into its version and hash160\n * @param {string} c32addr - the c32check-encoded address\n * @returns {[number, string]} a tuple with the version and hash160\n */\nfunction c32addressDecode(c32addr) {\n    if (c32addr.length <= 5) {\n        throw new Error('Invalid c32 address: invalid length');\n    }\n    if (c32addr[0] != 'S') {\n        throw new Error('Invalid c32 address: must start with \"S\"');\n    }\n    return (0, checksum_1.c32checkDecode)(c32addr.slice(1));\n}\nexports.c32addressDecode = c32addressDecode;\n/*\n * Convert a base58check address to a c32check address.\n * Try to convert the version number if one is not given.\n * @param {string} b58check - the base58check encoded address\n * @param {number} version - the version number, if not inferred from the address\n * @returns {string} the c32 address with the given version number (or the\n *   semantically-equivalent c32 version number, if not given)\n */\nfunction b58ToC32(b58check, version = -1) {\n    const addrInfo = base58check.decode(b58check);\n    const hash160String = (0, utils_1.bytesToHex)(addrInfo.data);\n    const addrVersion = parseInt((0, utils_1.bytesToHex)(addrInfo.prefix), 16);\n    let stacksVersion;\n    if (version < 0) {\n        stacksVersion = addrVersion;\n        if (ADDR_BITCOIN_TO_STACKS[addrVersion] !== undefined) {\n            stacksVersion = ADDR_BITCOIN_TO_STACKS[addrVersion];\n        }\n    }\n    else {\n        stacksVersion = version;\n    }\n    return c32address(stacksVersion, hash160String);\n}\nexports.b58ToC32 = b58ToC32;\n/*\n * Convert a c32check address to a base58check address.\n * @param {string} c32string - the c32check address\n * @param {number} version - the version number, if not inferred from the address\n * @returns {string} the base58 address with the given version number (or the\n *    semantically-equivalent bitcoin version number, if not given)\n */\nfunction c32ToB58(c32string, version = -1) {\n    const addrInfo = c32addressDecode(c32string);\n    const stacksVersion = addrInfo[0];\n    const hash160String = addrInfo[1];\n    let bitcoinVersion;\n    if (version < 0) {\n        bitcoinVersion = stacksVersion;\n        if (ADDR_STACKS_TO_BITCOIN[stacksVersion] !== undefined) {\n            bitcoinVersion = ADDR_STACKS_TO_BITCOIN[stacksVersion];\n        }\n    }\n    else {\n        bitcoinVersion = version;\n    }\n    let prefix = bitcoinVersion.toString(16);\n    if (prefix.length === 1) {\n        prefix = `0${prefix}`;\n    }\n    return base58check.encode(hash160String, prefix);\n}\nexports.c32ToB58 = c32ToB58;\n","/*\n * From https://github.com/wzbg/base58check\n * @Author: zyc\n * @Date:   2016-09-11 23:36:05\n */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decode = exports.encode = void 0;\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst basex = require(\"base-x\");\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nfunction encode(data, prefix = '00') {\n    const dataBytes = typeof data === 'string' ? (0, utils_1.hexToBytes)(data) : data;\n    const prefixBytes = typeof prefix === 'string' ? (0, utils_1.hexToBytes)(prefix) : data;\n    if (!(dataBytes instanceof Uint8Array) || !(prefixBytes instanceof Uint8Array)) {\n        throw new TypeError('Argument must be of type Uint8Array or string');\n    }\n    const checksum = (0, sha256_1.sha256)((0, sha256_1.sha256)(new Uint8Array([...prefixBytes, ...dataBytes])));\n    return basex(ALPHABET).encode([...prefixBytes, ...dataBytes, ...checksum.slice(0, 4)]);\n}\nexports.encode = encode;\nfunction decode(string) {\n    const bytes = basex(ALPHABET).decode(string);\n    const prefixBytes = bytes.slice(0, 1);\n    const dataBytes = bytes.slice(1, -4);\n    // todo: for better performance replace spread with `concatBytes` method\n    const checksum = (0, sha256_1.sha256)((0, sha256_1.sha256)(new Uint8Array([...prefixBytes, ...dataBytes])));\n    bytes.slice(-4).forEach((check, index) => {\n        if (check !== checksum[index]) {\n            throw new Error('Invalid checksum');\n        }\n    });\n    return { prefix: prefixBytes, data: dataBytes };\n}\nexports.decode = decode;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.c32checkDecode = exports.c32checkEncode = void 0;\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst encoding_1 = require(\"./encoding\");\n/**\n * Get the c32check checksum of a hex-encoded string\n * @param {string} dataHex - the hex string\n * @returns {string} the c32 checksum, as a bin-encoded string\n */\nfunction c32checksum(dataHex) {\n    const dataHash = (0, sha256_1.sha256)((0, sha256_1.sha256)((0, utils_1.hexToBytes)(dataHex)));\n    const checksum = (0, utils_1.bytesToHex)(dataHash.slice(0, 4));\n    return checksum;\n}\n/**\n * Encode a hex string as a c32check string.  This is a lot like how\n * base58check works in Bitcoin-land, but this algorithm uses the\n * z-base-32 alphabet instead of the base58 alphabet.  The algorithm\n * is as follows:\n * * calculate the c32checksum of version + data\n * * c32encode version + data + c32checksum\n * @param {number} version - the version string (between 0 and 31)\n * @param {string} data - the data to encode\n * @returns {string} the c32check representation\n */\nfunction c32checkEncode(version, data) {\n    if (version < 0 || version >= 32) {\n        throw new Error('Invalid version (must be between 0 and 31)');\n    }\n    if (!data.match(/^[0-9a-fA-F]*$/)) {\n        throw new Error('Invalid data (not a hex string)');\n    }\n    data = data.toLowerCase();\n    if (data.length % 2 !== 0) {\n        data = `0${data}`;\n    }\n    let versionHex = version.toString(16);\n    if (versionHex.length === 1) {\n        versionHex = `0${versionHex}`;\n    }\n    const checksumHex = c32checksum(`${versionHex}${data}`);\n    const c32str = (0, encoding_1.c32encode)(`${data}${checksumHex}`);\n    return `${encoding_1.c32[version]}${c32str}`;\n}\nexports.c32checkEncode = c32checkEncode;\n/*\n * Decode a c32check string back into its version and data payload.  This is\n * a lot like how base58check works in Bitcoin-land, but this algorithm uses\n * the z-base-32 alphabet instead of the base58 alphabet.  The algorithm\n * is as follows:\n * * extract the version, data, and checksum\n * * verify the checksum matches c32checksum(version + data)\n * * return data\n * @param {string} c32data - the c32check-encoded string\n * @returns {array} [version (number), data (string)].  The returned data\n * will be a hex string.  Throws an exception if the checksum does not match.\n */\nfunction c32checkDecode(c32data) {\n    c32data = (0, encoding_1.c32normalize)(c32data);\n    const dataHex = (0, encoding_1.c32decode)(c32data.slice(1));\n    const versionChar = c32data[0];\n    const version = encoding_1.c32.indexOf(versionChar);\n    const checksum = dataHex.slice(-8);\n    let versionHex = version.toString(16);\n    if (versionHex.length === 1) {\n        versionHex = `0${versionHex}`;\n    }\n    if (c32checksum(`${versionHex}${dataHex.substring(0, dataHex.length - 8)}`) !== checksum) {\n        throw new Error('Invalid c32check string: checksum mismatch');\n    }\n    return [version, dataHex.substring(0, dataHex.length - 8)];\n}\nexports.c32checkDecode = c32checkDecode;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.c32decode = exports.c32normalize = exports.c32encode = exports.c32 = void 0;\nconst utils_1 = require(\"@noble/hashes/utils\");\nexports.c32 = '0123456789ABCDEFGHJKMNPQRSTVWXYZ';\nconst hex = '0123456789abcdef';\n/**\n * Encode a hex string as a c32 string.  Note that the hex string is assumed\n * to be big-endian (and the resulting c32 string will be as well).\n * @param {string} inputHex - the input to encode\n * @param {number} minLength - the minimum length of the c32 string\n * @returns {string} the c32check-encoded representation of the data, as a string\n */\nfunction c32encode(inputHex, minLength) {\n    // must be hex\n    if (!inputHex.match(/^[0-9a-fA-F]*$/)) {\n        throw new Error('Not a hex-encoded string');\n    }\n    if (inputHex.length % 2 !== 0) {\n        inputHex = `0${inputHex}`;\n    }\n    inputHex = inputHex.toLowerCase();\n    let res = [];\n    let carry = 0;\n    for (let i = inputHex.length - 1; i >= 0; i--) {\n        if (carry < 4) {\n            const currentCode = hex.indexOf(inputHex[i]) >> carry;\n            let nextCode = 0;\n            if (i !== 0) {\n                nextCode = hex.indexOf(inputHex[i - 1]);\n            }\n            // carry = 0, nextBits is 1, carry = 1, nextBits is 2\n            const nextBits = 1 + carry;\n            const nextLowBits = nextCode % (1 << nextBits) << (5 - nextBits);\n            const curC32Digit = exports.c32[currentCode + nextLowBits];\n            carry = nextBits;\n            res.unshift(curC32Digit);\n        }\n        else {\n            carry = 0;\n        }\n    }\n    let C32leadingZeros = 0;\n    for (let i = 0; i < res.length; i++) {\n        if (res[i] !== '0') {\n            break;\n        }\n        else {\n            C32leadingZeros++;\n        }\n    }\n    res = res.slice(C32leadingZeros);\n    const zeroPrefix = new TextDecoder().decode((0, utils_1.hexToBytes)(inputHex)).match(/^\\u0000*/);\n    const numLeadingZeroBytesInHex = zeroPrefix ? zeroPrefix[0].length : 0;\n    for (let i = 0; i < numLeadingZeroBytesInHex; i++) {\n        res.unshift(exports.c32[0]);\n    }\n    if (minLength) {\n        const count = minLength - res.length;\n        for (let i = 0; i < count; i++) {\n            res.unshift(exports.c32[0]);\n        }\n    }\n    return res.join('');\n}\nexports.c32encode = c32encode;\n/*\n * Normalize a c32 string\n * @param {string} c32input - the c32-encoded input string\n * @returns {string} the canonical representation of the c32 input string\n */\nfunction c32normalize(c32input) {\n    // must be upper-case\n    // replace all O's with 0's\n    // replace all I's and L's with 1's\n    return c32input.toUpperCase().replace(/O/g, '0').replace(/L|I/g, '1');\n}\nexports.c32normalize = c32normalize;\n/*\n * Decode a c32 string back into a hex string.  Note that the c32 input\n * string is assumed to be big-endian (and the resulting hex string will\n * be as well).\n * @param {string} c32input - the c32-encoded input to decode\n * @param {number} minLength - the minimum length of the output hex string (in bytes)\n * @returns {string} the hex-encoded representation of the data, as a string\n */\nfunction c32decode(c32input, minLength) {\n    c32input = c32normalize(c32input);\n    // must result in a c32 string\n    if (!c32input.match(`^[${exports.c32}]*$`)) {\n        throw new Error('Not a c32-encoded string');\n    }\n    const zeroPrefix = c32input.match(`^${exports.c32[0]}*`);\n    const numLeadingZeroBytes = zeroPrefix ? zeroPrefix[0].length : 0;\n    let res = [];\n    let carry = 0;\n    let carryBits = 0;\n    for (let i = c32input.length - 1; i >= 0; i--) {\n        if (carryBits === 4) {\n            res.unshift(hex[carry]);\n            carryBits = 0;\n            carry = 0;\n        }\n        const currentCode = exports.c32.indexOf(c32input[i]) << carryBits;\n        const currentValue = currentCode + carry;\n        const currentHexDigit = hex[currentValue % 16];\n        carryBits += 1;\n        carry = currentValue >> 4;\n        if (carry > 1 << carryBits) {\n            throw new Error('Panic error in decoding.');\n        }\n        res.unshift(currentHexDigit);\n    }\n    // one last carry\n    res.unshift(hex[carry]);\n    if (res.length % 2 === 1) {\n        res.unshift('0');\n    }\n    let hexLeadingZeros = 0;\n    for (let i = 0; i < res.length; i++) {\n        if (res[i] !== '0') {\n            break;\n        }\n        else {\n            hexLeadingZeros++;\n        }\n    }\n    res = res.slice(hexLeadingZeros - (hexLeadingZeros % 2));\n    let hexStr = res.join('');\n    for (let i = 0; i < numLeadingZeroBytes; i++) {\n        hexStr = `00${hexStr}`;\n    }\n    if (minLength) {\n        const count = minLength * 2 - hexStr.length;\n        for (let i = 0; i < count; i += 2) {\n            hexStr = `00${hexStr}`;\n        }\n    }\n    return hexStr;\n}\nexports.c32decode = c32decode;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.b58ToC32 = exports.c32ToB58 = exports.versions = exports.c32normalize = exports.c32addressDecode = exports.c32address = exports.c32checkDecode = exports.c32checkEncode = exports.c32decode = exports.c32encode = void 0;\nconst encoding_1 = require(\"./encoding\");\nObject.defineProperty(exports, \"c32encode\", { enumerable: true, get: function () { return encoding_1.c32encode; } });\nObject.defineProperty(exports, \"c32decode\", { enumerable: true, get: function () { return encoding_1.c32decode; } });\nObject.defineProperty(exports, \"c32normalize\", { enumerable: true, get: function () { return encoding_1.c32normalize; } });\nconst checksum_1 = require(\"./checksum\");\nObject.defineProperty(exports, \"c32checkEncode\", { enumerable: true, get: function () { return checksum_1.c32checkEncode; } });\nObject.defineProperty(exports, \"c32checkDecode\", { enumerable: true, get: function () { return checksum_1.c32checkDecode; } });\nconst address_1 = require(\"./address\");\nObject.defineProperty(exports, \"c32address\", { enumerable: true, get: function () { return address_1.c32address; } });\nObject.defineProperty(exports, \"c32addressDecode\", { enumerable: true, get: function () { return address_1.c32addressDecode; } });\nObject.defineProperty(exports, \"c32ToB58\", { enumerable: true, get: function () { return address_1.c32ToB58; } });\nObject.defineProperty(exports, \"b58ToC32\", { enumerable: true, get: function () { return address_1.b58ToC32; } });\nObject.defineProperty(exports, \"versions\", { enumerable: true, get: function () { return address_1.versions; } });\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","import { Logger } from './logger';\nexport const BLOCKSTACK_HANDLER = 'blockstack';\nexport function nextYear() {\n    return new Date(new Date().setFullYear(new Date().getFullYear() + 1));\n}\nexport function nextMonth() {\n    return new Date(new Date().setMonth(new Date().getMonth() + 1));\n}\nexport function nextHour() {\n    return new Date(new Date().setHours(new Date().getHours() + 1));\n}\nexport function megabytesToBytes(megabytes) {\n    if (!Number.isFinite(megabytes)) {\n        return 0;\n    }\n    return Math.floor(megabytes * 1024 * 1024);\n}\nexport function getAesCbcOutputLength(inputByteLength) {\n    const cipherTextLength = (Math.floor(inputByteLength / 16) + 1) * 16;\n    return cipherTextLength;\n}\nexport function getBase64OutputLength(inputByteLength) {\n    const encodedLength = Math.ceil(inputByteLength / 3) * 4;\n    return encodedLength;\n}\nexport function updateQueryStringParameter(uri, key, value) {\n    const re = new RegExp(`([?&])${key}=.*?(&|$)`, 'i');\n    const separator = uri.indexOf('?') !== -1 ? '&' : '?';\n    if (uri.match(re)) {\n        return uri.replace(re, `$1${key}=${value}$2`);\n    }\n    else {\n        return `${uri}${separator}${key}=${value}`;\n    }\n}\nexport function isLaterVersion(v1, v2) {\n    if (v1 === undefined || v1 === '') {\n        v1 = '0.0.0';\n    }\n    if (v2 === undefined || v1 === '') {\n        v2 = '0.0.0';\n    }\n    const v1tuple = v1.split('.').map(x => parseInt(x, 10));\n    const v2tuple = v2.split('.').map(x => parseInt(x, 10));\n    for (let index = 0; index < v2.length; index++) {\n        if (index >= v1.length) {\n            v2tuple.push(0);\n        }\n        if (v1tuple[index] < v2tuple[index]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function makeUUID4() {\n    let d = new Date().getTime();\n    if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\n        d += performance.now();\n    }\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n        const r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n}\nexport function isSameOriginAbsoluteUrl(uri1, uri2) {\n    try {\n        const parsedUri1 = new URL(uri1);\n        const parsedUri2 = new URL(uri2);\n        const port1 = parseInt(parsedUri1.port || '0', 10) | 0 || (parsedUri1.protocol === 'https:' ? 443 : 80);\n        const port2 = parseInt(parsedUri2.port || '0', 10) | 0 || (parsedUri2.protocol === 'https:' ? 443 : 80);\n        const match = {\n            scheme: parsedUri1.protocol === parsedUri2.protocol,\n            hostname: parsedUri1.hostname === parsedUri2.hostname,\n            port: port1 === port2,\n            absolute: (uri1.includes('http://') || uri1.includes('https://')) &&\n                (uri2.includes('http://') || uri2.includes('https://')),\n        };\n        return match.scheme && match.hostname && match.port && match.absolute;\n    }\n    catch (error) {\n        console.log(error);\n        console.log('Parsing error in same URL origin check');\n        return false;\n    }\n}\nexport function getGlobalScope() {\n    if (typeof self !== 'undefined') {\n        return self;\n    }\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    throw new Error('Unexpected runtime environment - no supported global scope (`window`, `self`, `global`) available');\n}\nfunction getAPIUsageErrorMessage(scopeObject, apiName, usageDesc) {\n    if (usageDesc) {\n        return `Use of '${usageDesc}' requires \\`${apiName}\\` which is unavailable on the '${scopeObject}' object within the currently executing environment.`;\n    }\n    else {\n        return `\\`${apiName}\\` is unavailable on the '${scopeObject}' object within the currently executing environment.`;\n    }\n}\nexport function getGlobalObject(name, { throwIfUnavailable, usageDesc, returnEmptyObject } = {}) {\n    let globalScope = undefined;\n    try {\n        globalScope = getGlobalScope();\n        if (globalScope) {\n            const obj = globalScope[name];\n            if (obj) {\n                return obj;\n            }\n        }\n    }\n    catch (error) {\n        Logger.error(`Error getting object '${name}' from global scope '${globalScope}': ${error}`);\n    }\n    if (throwIfUnavailable) {\n        const errMsg = getAPIUsageErrorMessage(globalScope, name.toString(), usageDesc);\n        Logger.error(errMsg);\n        throw new Error(errMsg);\n    }\n    if (returnEmptyObject) {\n        return {};\n    }\n    return undefined;\n}\nexport function getGlobalObjects(names, { throwIfUnavailable, usageDesc, returnEmptyObject } = {}) {\n    let globalScope;\n    try {\n        globalScope = getGlobalScope();\n    }\n    catch (error) {\n        Logger.error(`Error getting global scope: ${error}`);\n        if (throwIfUnavailable) {\n            const errMsg = getAPIUsageErrorMessage(globalScope, names[0].toString(), usageDesc);\n            Logger.error(errMsg);\n            throw errMsg;\n        }\n        else if (returnEmptyObject) {\n            globalScope = {};\n        }\n    }\n    const result = {};\n    for (let i = 0; i < names.length; i++) {\n        const name = names[i];\n        try {\n            if (globalScope) {\n                const obj = globalScope[name];\n                if (obj) {\n                    result[name] = obj;\n                }\n                else if (throwIfUnavailable) {\n                    const errMsg = getAPIUsageErrorMessage(globalScope, name.toString(), usageDesc);\n                    Logger.error(errMsg);\n                    throw new Error(errMsg);\n                }\n                else if (returnEmptyObject) {\n                    result[name] = {};\n                }\n            }\n        }\n        catch (error) {\n            if (throwIfUnavailable) {\n                const errMsg = getAPIUsageErrorMessage(globalScope, name.toString(), usageDesc);\n                Logger.error(errMsg);\n                throw new Error(errMsg);\n            }\n        }\n    }\n    return result;\n}\nexport function intToBytes(value, byteLength) {\n    return bigIntToBytes(intToBigInt(value), byteLength);\n}\nexport function intToBigInt(value) {\n    if (typeof value === 'bigint')\n        return value;\n    if (typeof value === 'string')\n        return BigInt(value);\n    if (typeof value === 'number') {\n        if (!Number.isInteger(value)) {\n            throw new RangeError(`Invalid value. Values of type 'number' must be an integer.`);\n        }\n        if (value > Number.MAX_SAFE_INTEGER) {\n            throw new RangeError(`Invalid value. Values of type 'number' must be less than or equal to ${Number.MAX_SAFE_INTEGER}. For larger values, try using a BigInt instead.`);\n        }\n        return BigInt(value);\n    }\n    if (isInstance(value, Uint8Array))\n        return BigInt(`0x${bytesToHex(value)}`);\n    throw new TypeError(`intToBigInt: Invalid value type. Must be a number, bigint, BigInt-compatible string, or Uint8Array.`);\n}\nexport function with0x(value) {\n    return /^0x/i.test(value)\n        ? value\n        : `0x${value}`;\n}\nexport function without0x(value) {\n    return /^0x/i.test(value)\n        ? value.slice(2)\n        : value;\n}\nexport function hexToBigInt(hex) {\n    if (typeof hex !== 'string')\n        throw new TypeError(`hexToBigInt: expected string, got ${typeof hex}`);\n    return BigInt(`0x${hex}`);\n}\nexport function intToHex(integer, byteLength = 8) {\n    const value = typeof integer === 'bigint' ? integer : intToBigInt(integer);\n    return value.toString(16).padStart(byteLength * 2, '0');\n}\nexport function hexToInt(hex) {\n    return parseInt(hex, 16);\n}\nexport function bigIntToBytes(value, length = 16) {\n    const hex = intToHex(value, length);\n    return hexToBytes(hex);\n}\nexport function toTwos(value, width) {\n    if (value < -(BigInt(1) << (width - BigInt(1))) ||\n        (BigInt(1) << (width - BigInt(1))) - BigInt(1) < value) {\n        throw `Unable to represent integer in width: ${width}`;\n    }\n    if (value >= BigInt(0)) {\n        return BigInt(value);\n    }\n    return value + (BigInt(1) << width);\n}\nfunction nthBit(value, n) {\n    return value & (BigInt(1) << n);\n}\nexport function bytesToTwosBigInt(bytes) {\n    return fromTwos(BigInt(`0x${bytesToHex(bytes)}`), BigInt(bytes.byteLength * 8));\n}\nexport function fromTwos(value, width) {\n    if (nthBit(value, width - BigInt(1))) {\n        return value - (BigInt(1) << width);\n    }\n    return value;\n}\nconst hexes = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\nexport function bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (const u of uint8a) {\n        hex += hexes[u];\n    }\n    return hex;\n}\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError(`hexToBytes: expected string, got ${typeof hex}`);\n    }\n    hex = without0x(hex);\n    hex = hex.length % 2 ? `0${hex}` : hex;\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nexport function utf8ToBytes(str) {\n    return new TextEncoder().encode(str);\n}\nexport function bytesToUtf8(arr) {\n    return new TextDecoder().decode(arr);\n}\nexport function asciiToBytes(str) {\n    const byteArray = [];\n    for (let i = 0; i < str.length; i++) {\n        byteArray.push(str.charCodeAt(i) & 0xff);\n    }\n    return new Uint8Array(byteArray);\n}\nexport function bytesToAscii(arr) {\n    return String.fromCharCode.apply(null, arr);\n}\nfunction isNotOctet(octet) {\n    return !Number.isInteger(octet) || octet < 0 || octet > 255;\n}\nexport function octetsToBytes(numbers) {\n    if (numbers.some(isNotOctet))\n        throw new Error('Some values are invalid bytes.');\n    return new Uint8Array(numbers);\n}\nexport function concatBytes(...arrays) {\n    if (!arrays.every(a => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nexport function concatArray(elements) {\n    return concatBytes(...elements.map(e => {\n        if (typeof e === 'number')\n            return octetsToBytes([e]);\n        if (e instanceof Array)\n            return octetsToBytes(e);\n        return e;\n    }));\n}\nexport function isInstance(object, clazz) {\n    return object instanceof clazz || object?.constructor?.name?.toLowerCase() === clazz.name;\n}\nexport function validateHash256(hex) {\n    hex = without0x(hex);\n    if (hex.length !== 64)\n        return false;\n    return /^[0-9a-fA-F]+$/.test(hex);\n}\n//# sourceMappingURL=utils.js.map","export const HIRO_MAINNET_URL = 'https://api.mainnet.hiro.so';\nexport const HIRO_TESTNET_URL = 'https://api.testnet.hiro.so';\nexport const DEVNET_URL = 'http://localhost:3999';\nexport const GAIA_URL = 'https://hub.blockstack.org';\nexport const PRIVATE_KEY_BYTES_COMPRESSED = 33;\nexport const PRIVATE_KEY_BYTES_UNCOMPRESSED = 32;\n//# sourceMappingURL=constants.js.map","const defaultFetchOpts = {\n    referrerPolicy: 'origin',\n    headers: {\n        'x-hiro-product': 'stacksjs',\n    },\n};\nexport const getFetchOptions = () => {\n    return defaultFetchOpts;\n};\nexport const setFetchOptions = (ops) => {\n    return Object.assign(defaultFetchOpts, ops);\n};\nexport async function fetchWrapper(input, init) {\n    const fetchOpts = {};\n    Object.assign(fetchOpts, defaultFetchOpts, init);\n    const fetchResult = await fetch(input, fetchOpts);\n    return fetchResult;\n}\nexport function hostMatches(host, pattern) {\n    if (typeof pattern === 'string')\n        return pattern === host;\n    return pattern.exec(host);\n}\nexport function createApiKeyMiddleware({ apiKey, host = /(.*)api(.*)(\\.stacks\\.co|\\.hiro\\.so)$/i, httpHeader = 'x-api-key', }) {\n    return {\n        pre: context => {\n            const reqUrl = new URL(context.url);\n            if (!hostMatches(reqUrl.host, host))\n                return;\n            const headers = context.init.headers instanceof Headers\n                ? context.init.headers\n                : (context.init.headers = new Headers(context.init.headers));\n            headers.set(httpHeader, apiKey);\n        },\n    };\n}\nfunction argsForCreateFetchFn(args) {\n    let fetchLib = fetchWrapper;\n    let middlewares = [];\n    if (args.length > 0 && typeof args[0] === 'function') {\n        fetchLib = args.shift();\n    }\n    if (args.length > 0) {\n        middlewares = args;\n    }\n    return { fetchLib, middlewares };\n}\nexport function createFetchFn(...args) {\n    const { fetchLib, middlewares } = argsForCreateFetchFn(args);\n    const fetchFn = async (url, init) => {\n        let fetchParams = { url, init: init ?? {} };\n        for (const middleware of middlewares) {\n            if (typeof middleware.pre === 'function') {\n                const result = await Promise.resolve(middleware.pre({\n                    fetch: fetchLib,\n                    ...fetchParams,\n                }));\n                fetchParams = result ?? fetchParams;\n            }\n        }\n        let response = await fetchLib(fetchParams.url, fetchParams.init);\n        for (const middleware of middlewares) {\n            if (typeof middleware.post === 'function') {\n                const result = await Promise.resolve(middleware.post({\n                    fetch: fetchLib,\n                    url: fetchParams.url,\n                    init: fetchParams.init,\n                    response: response?.clone() ?? response,\n                }));\n                response = result ?? response;\n            }\n        }\n        return response;\n    };\n    return fetchFn;\n}\n//# sourceMappingURL=fetch.js.map","export var ChainId;\n(function (ChainId) {\n    ChainId[ChainId[\"Mainnet\"] = 1] = \"Mainnet\";\n    ChainId[ChainId[\"Testnet\"] = 2147483648] = \"Testnet\";\n})(ChainId || (ChainId = {}));\nexport var PeerNetworkId;\n(function (PeerNetworkId) {\n    PeerNetworkId[PeerNetworkId[\"Mainnet\"] = 385875968] = \"Mainnet\";\n    PeerNetworkId[PeerNetworkId[\"Testnet\"] = 4278190080] = \"Testnet\";\n})(PeerNetworkId || (PeerNetworkId = {}));\nexport const DEFAULT_CHAIN_ID = ChainId.Mainnet;\nexport var TransactionVersion;\n(function (TransactionVersion) {\n    TransactionVersion[TransactionVersion[\"Mainnet\"] = 0] = \"Mainnet\";\n    TransactionVersion[TransactionVersion[\"Testnet\"] = 128] = \"Testnet\";\n})(TransactionVersion || (TransactionVersion = {}));\nexport var AddressVersion;\n(function (AddressVersion) {\n    AddressVersion[AddressVersion[\"MainnetSingleSig\"] = 22] = \"MainnetSingleSig\";\n    AddressVersion[AddressVersion[\"MainnetMultiSig\"] = 20] = \"MainnetMultiSig\";\n    AddressVersion[AddressVersion[\"TestnetSingleSig\"] = 26] = \"TestnetSingleSig\";\n    AddressVersion[AddressVersion[\"TestnetMultiSig\"] = 21] = \"TestnetMultiSig\";\n})(AddressVersion || (AddressVersion = {}));\nexport const DEFAULT_TRANSACTION_VERSION = TransactionVersion.Mainnet;\nexport function whenTransactionVersion(transactionVersion) {\n    return (map) => map[transactionVersion];\n}\n//# sourceMappingURL=constants.js.map","import { DEVNET_URL, HIRO_MAINNET_URL, HIRO_TESTNET_URL, createFetchFn, } from '@stacks/common';\nimport { AddressVersion, ChainId, PeerNetworkId, TransactionVersion } from './constants';\nexport const STACKS_MAINNET = {\n    chainId: ChainId.Mainnet,\n    transactionVersion: TransactionVersion.Mainnet,\n    peerNetworkId: PeerNetworkId.Mainnet,\n    magicBytes: 'X2',\n    bootAddress: 'SP000000000000000000002Q6VF78',\n    addressVersion: {\n        singleSig: AddressVersion.MainnetSingleSig,\n        multiSig: AddressVersion.MainnetMultiSig,\n    },\n    client: { baseUrl: HIRO_MAINNET_URL },\n};\nexport const STACKS_TESTNET = {\n    chainId: ChainId.Testnet,\n    transactionVersion: TransactionVersion.Testnet,\n    peerNetworkId: PeerNetworkId.Testnet,\n    magicBytes: 'T2',\n    bootAddress: 'ST000000000000000000002AMW42H',\n    addressVersion: {\n        singleSig: AddressVersion.TestnetSingleSig,\n        multiSig: AddressVersion.TestnetMultiSig,\n    },\n    client: { baseUrl: HIRO_TESTNET_URL },\n};\nexport const STACKS_DEVNET = {\n    ...STACKS_TESTNET,\n    addressVersion: { ...STACKS_TESTNET.addressVersion },\n    magicBytes: 'id',\n    client: { baseUrl: DEVNET_URL },\n};\nexport const STACKS_MOCKNET = {\n    ...STACKS_DEVNET,\n    addressVersion: { ...STACKS_DEVNET.addressVersion },\n    client: { ...STACKS_DEVNET.client },\n};\nexport const StacksNetworks = ['mainnet', 'testnet', 'devnet', 'mocknet'];\nexport function networkFromName(name) {\n    switch (name) {\n        case 'mainnet':\n            return STACKS_MAINNET;\n        case 'testnet':\n            return STACKS_TESTNET;\n        case 'devnet':\n            return STACKS_DEVNET;\n        case 'mocknet':\n            return STACKS_MOCKNET;\n        default:\n            throw new Error(`Unknown network name: ${name}`);\n    }\n}\nexport function networkFrom(network) {\n    if (typeof network === 'string')\n        return networkFromName(network);\n    return network;\n}\nexport function defaultUrlFromNetwork(network) {\n    if (!network)\n        return HIRO_MAINNET_URL;\n    network = networkFrom(network);\n    return !network || network.transactionVersion === TransactionVersion.Mainnet\n        ? HIRO_MAINNET_URL\n        : network.magicBytes === 'id'\n            ? DEVNET_URL\n            : HIRO_TESTNET_URL;\n}\nexport function clientFromNetwork(network) {\n    if (network.client.fetch)\n        return network.client;\n    return {\n        ...network.client,\n        fetch: createFetchFn(),\n    };\n}\n//# sourceMappingURL=network.js.map","class TransactionError extends Error {\n    constructor(message) {\n        super(message);\n        this.message = message;\n        this.name = this.constructor.name;\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, this.constructor);\n        }\n    }\n}\nexport class SerializationError extends TransactionError {\n    constructor(message) {\n        super(message);\n    }\n}\nexport class DeserializationError extends TransactionError {\n    constructor(message) {\n        super(message);\n    }\n}\nexport class NoEstimateAvailableError extends TransactionError {\n    constructor(message) {\n        super(message);\n    }\n}\nexport class NotImplementedError extends TransactionError {\n    constructor(message) {\n        super(message);\n    }\n}\nexport class SigningError extends TransactionError {\n    constructor(message) {\n        super(message);\n    }\n}\nexport class VerificationError extends TransactionError {\n    constructor(message) {\n        super(message);\n    }\n}\n//# sourceMappingURL=errors.js.map","export function equals(a, b) {\n    if (a.byteLength !== b.byteLength)\n        return false;\n    for (let i = 0; i < a.byteLength; i++) {\n        if (a[i] !== b[i])\n            return false;\n    }\n    return true;\n}\nexport function alloc(length, value) {\n    const a = new Uint8Array(length);\n    for (let i = 0; i < length; i++) {\n        a[i] = value;\n    }\n    return a;\n}\nexport function readUInt16BE(source, offset) {\n    return ((source[offset + 0] << 8) | source[offset + 1]) >>> 0;\n}\nexport function writeUInt16BE(destination, value, offset = 0) {\n    destination[offset + 0] = value >>> 8;\n    destination[offset + 1] = value >>> 0;\n    return destination;\n}\nexport function readUInt8(source, offset) {\n    return source[offset];\n}\nexport function writeUInt8(destination, value, offset = 0) {\n    destination[offset] = value;\n    return destination;\n}\nexport function readUInt16LE(source, offset) {\n    return ((source[offset + 0] << 0) >>> 0) | ((source[offset + 1] << 8) >>> 0);\n}\nexport function writeUInt16LE(destination, value, offset = 0) {\n    destination[offset + 0] = value & 255;\n    value >>>= 8;\n    destination[offset + 1] = value & 255;\n    return destination;\n}\nexport function readUInt32BE(source, offset) {\n    return (source[offset] * 2 ** 24 +\n        source[offset + 1] * 2 ** 16 +\n        source[offset + 2] * 2 ** 8 +\n        source[offset + 3]);\n}\nexport function writeUInt32BE(destination, value, offset = 0) {\n    destination[offset + 3] = value;\n    value >>>= 8;\n    destination[offset + 2] = value;\n    value >>>= 8;\n    destination[offset + 1] = value;\n    value >>>= 8;\n    destination[offset] = value;\n    return destination;\n}\nexport function readUInt32LE(source, offset) {\n    return (((source[offset + 0] << 0) >>> 0) |\n        ((source[offset + 1] << 8) >>> 0) |\n        ((source[offset + 2] << 16) >>> 0) |\n        ((source[offset + 3] << 24) >>> 0));\n}\nexport function writeUInt32LE(destination, value, offset = 0) {\n    destination[offset + 0] = value & 255;\n    value >>>= 8;\n    destination[offset + 1] = value & 255;\n    value >>>= 8;\n    destination[offset + 2] = value & 255;\n    value >>>= 8;\n    destination[offset + 3] = value & 255;\n    return destination;\n}\n//# sourceMappingURL=buffer.js.map","import { bytesToHex, hexToBytes, readUInt16BE, readUInt32BE, readUInt8 } from '@stacks/common';\nfunction createEnumChecker(enumVariable) {\n    const enumValues = Object.values(enumVariable).filter(v => typeof v === 'number');\n    const enumValueSet = new Set(enumValues);\n    return (value) => enumValueSet.has(value);\n}\nconst enumCheckFunctions = new Map();\nexport function isEnum(enumVariable, value) {\n    const checker = enumCheckFunctions.get(enumVariable);\n    if (checker !== undefined) {\n        return checker(value);\n    }\n    const newChecker = createEnumChecker(enumVariable);\n    enumCheckFunctions.set(enumVariable, newChecker);\n    return isEnum(enumVariable, value);\n}\nexport class BytesReader {\n    constructor(bytes) {\n        this.consumed = 0;\n        this.source = typeof bytes === 'string' ? hexToBytes(bytes) : bytes;\n    }\n    readBytes(length) {\n        const view = this.source.subarray(this.consumed, this.consumed + length);\n        this.consumed += length;\n        return view;\n    }\n    readUInt32BE() {\n        return readUInt32BE(this.readBytes(4), 0);\n    }\n    readUInt8() {\n        return readUInt8(this.readBytes(1), 0);\n    }\n    readUInt16BE() {\n        return readUInt16BE(this.readBytes(2), 0);\n    }\n    readBigUIntLE(length) {\n        const bytes = this.readBytes(length).slice().reverse();\n        const hex = bytesToHex(bytes);\n        return BigInt(`0x${hex}`);\n    }\n    readBigUIntBE(length) {\n        const bytes = this.readBytes(length);\n        const hex = bytesToHex(bytes);\n        return BigInt(`0x${hex}`);\n    }\n    get readOffset() {\n        return this.consumed;\n    }\n    set readOffset(val) {\n        this.consumed = val;\n    }\n    get internalBytes() {\n        return this.source;\n    }\n    readUInt8Enum(enumVariable, invalidEnumErrorFormatter) {\n        const num = this.readUInt8();\n        if (isEnum(enumVariable, num)) {\n            return num;\n        }\n        throw invalidEnumErrorFormatter(num);\n    }\n}\n//# sourceMappingURL=BytesReader.js.map","export const BLOCKSTACK_DEFAULT_GAIA_HUB_URL = 'https://hub.blockstack.org';\nexport const MAX_STRING_LENGTH_BYTES = 128;\nexport const CLARITY_INT_SIZE = 128;\nexport const CLARITY_INT_BYTE_SIZE = 16;\nexport const COINBASE_BYTES_LENGTH = 32;\nexport const VRF_PROOF_BYTES_LENGTH = 80;\nexport const RECOVERABLE_ECDSA_SIG_LENGTH_BYTES = 65;\nexport const COMPRESSED_PUBKEY_LENGTH_BYTES = 32;\nexport const UNCOMPRESSED_PUBKEY_LENGTH_BYTES = 64;\nexport const MEMO_MAX_LENGTH_BYTES = 34;\nexport var PayloadType;\n(function (PayloadType) {\n    PayloadType[PayloadType[\"TokenTransfer\"] = 0] = \"TokenTransfer\";\n    PayloadType[PayloadType[\"SmartContract\"] = 1] = \"SmartContract\";\n    PayloadType[PayloadType[\"VersionedSmartContract\"] = 6] = \"VersionedSmartContract\";\n    PayloadType[PayloadType[\"ContractCall\"] = 2] = \"ContractCall\";\n    PayloadType[PayloadType[\"PoisonMicroblock\"] = 3] = \"PoisonMicroblock\";\n    PayloadType[PayloadType[\"Coinbase\"] = 4] = \"Coinbase\";\n    PayloadType[PayloadType[\"CoinbaseToAltRecipient\"] = 5] = \"CoinbaseToAltRecipient\";\n    PayloadType[PayloadType[\"TenureChange\"] = 7] = \"TenureChange\";\n    PayloadType[PayloadType[\"NakamotoCoinbase\"] = 8] = \"NakamotoCoinbase\";\n})(PayloadType || (PayloadType = {}));\nexport var ClarityVersion;\n(function (ClarityVersion) {\n    ClarityVersion[ClarityVersion[\"Clarity1\"] = 1] = \"Clarity1\";\n    ClarityVersion[ClarityVersion[\"Clarity2\"] = 2] = \"Clarity2\";\n    ClarityVersion[ClarityVersion[\"Clarity3\"] = 3] = \"Clarity3\";\n})(ClarityVersion || (ClarityVersion = {}));\nexport var AnchorMode;\n(function (AnchorMode) {\n    AnchorMode[AnchorMode[\"OnChainOnly\"] = 1] = \"OnChainOnly\";\n    AnchorMode[AnchorMode[\"OffChainOnly\"] = 2] = \"OffChainOnly\";\n    AnchorMode[AnchorMode[\"Any\"] = 3] = \"Any\";\n})(AnchorMode || (AnchorMode = {}));\nexport const AnchorModeNames = ['onChainOnly', 'offChainOnly', 'any'];\nconst AnchorModeMap = {\n    [AnchorModeNames[0]]: AnchorMode.OnChainOnly,\n    [AnchorModeNames[1]]: AnchorMode.OffChainOnly,\n    [AnchorModeNames[2]]: AnchorMode.Any,\n    [AnchorMode.OnChainOnly]: AnchorMode.OnChainOnly,\n    [AnchorMode.OffChainOnly]: AnchorMode.OffChainOnly,\n    [AnchorMode.Any]: AnchorMode.Any,\n};\nexport function anchorModeFrom(mode) {\n    if (mode in AnchorModeMap)\n        return AnchorModeMap[mode];\n    throw new Error(`Invalid anchor mode \"${mode}\", must be one of: ${AnchorModeNames.join(', ')}`);\n}\nexport var PostConditionMode;\n(function (PostConditionMode) {\n    PostConditionMode[PostConditionMode[\"Allow\"] = 1] = \"Allow\";\n    PostConditionMode[PostConditionMode[\"Deny\"] = 2] = \"Deny\";\n})(PostConditionMode || (PostConditionMode = {}));\nexport var PostConditionType;\n(function (PostConditionType) {\n    PostConditionType[PostConditionType[\"STX\"] = 0] = \"STX\";\n    PostConditionType[PostConditionType[\"Fungible\"] = 1] = \"Fungible\";\n    PostConditionType[PostConditionType[\"NonFungible\"] = 2] = \"NonFungible\";\n})(PostConditionType || (PostConditionType = {}));\nexport var AuthType;\n(function (AuthType) {\n    AuthType[AuthType[\"Standard\"] = 4] = \"Standard\";\n    AuthType[AuthType[\"Sponsored\"] = 5] = \"Sponsored\";\n})(AuthType || (AuthType = {}));\nexport var AddressHashMode;\n(function (AddressHashMode) {\n    AddressHashMode[AddressHashMode[\"P2PKH\"] = 0] = \"P2PKH\";\n    AddressHashMode[AddressHashMode[\"P2SH\"] = 1] = \"P2SH\";\n    AddressHashMode[AddressHashMode[\"P2WPKH\"] = 2] = \"P2WPKH\";\n    AddressHashMode[AddressHashMode[\"P2WSH\"] = 3] = \"P2WSH\";\n    AddressHashMode[AddressHashMode[\"P2SHNonSequential\"] = 5] = \"P2SHNonSequential\";\n    AddressHashMode[AddressHashMode[\"P2WSHNonSequential\"] = 7] = \"P2WSHNonSequential\";\n})(AddressHashMode || (AddressHashMode = {}));\nexport { AddressVersion } from '@stacks/network';\nexport var PubKeyEncoding;\n(function (PubKeyEncoding) {\n    PubKeyEncoding[PubKeyEncoding[\"Compressed\"] = 0] = \"Compressed\";\n    PubKeyEncoding[PubKeyEncoding[\"Uncompressed\"] = 1] = \"Uncompressed\";\n})(PubKeyEncoding || (PubKeyEncoding = {}));\nexport var FungibleConditionCode;\n(function (FungibleConditionCode) {\n    FungibleConditionCode[FungibleConditionCode[\"Equal\"] = 1] = \"Equal\";\n    FungibleConditionCode[FungibleConditionCode[\"Greater\"] = 2] = \"Greater\";\n    FungibleConditionCode[FungibleConditionCode[\"GreaterEqual\"] = 3] = \"GreaterEqual\";\n    FungibleConditionCode[FungibleConditionCode[\"Less\"] = 4] = \"Less\";\n    FungibleConditionCode[FungibleConditionCode[\"LessEqual\"] = 5] = \"LessEqual\";\n})(FungibleConditionCode || (FungibleConditionCode = {}));\nexport var NonFungibleConditionCode;\n(function (NonFungibleConditionCode) {\n    NonFungibleConditionCode[NonFungibleConditionCode[\"Sends\"] = 16] = \"Sends\";\n    NonFungibleConditionCode[NonFungibleConditionCode[\"DoesNotSend\"] = 17] = \"DoesNotSend\";\n})(NonFungibleConditionCode || (NonFungibleConditionCode = {}));\nexport var PostConditionPrincipalId;\n(function (PostConditionPrincipalId) {\n    PostConditionPrincipalId[PostConditionPrincipalId[\"Origin\"] = 1] = \"Origin\";\n    PostConditionPrincipalId[PostConditionPrincipalId[\"Standard\"] = 2] = \"Standard\";\n    PostConditionPrincipalId[PostConditionPrincipalId[\"Contract\"] = 3] = \"Contract\";\n})(PostConditionPrincipalId || (PostConditionPrincipalId = {}));\nexport var AssetType;\n(function (AssetType) {\n    AssetType[AssetType[\"STX\"] = 0] = \"STX\";\n    AssetType[AssetType[\"Fungible\"] = 1] = \"Fungible\";\n    AssetType[AssetType[\"NonFungible\"] = 2] = \"NonFungible\";\n})(AssetType || (AssetType = {}));\nexport var TenureChangeCause;\n(function (TenureChangeCause) {\n    TenureChangeCause[TenureChangeCause[\"BlockFound\"] = 0] = \"BlockFound\";\n    TenureChangeCause[TenureChangeCause[\"Extended\"] = 1] = \"Extended\";\n})(TenureChangeCause || (TenureChangeCause = {}));\nexport var AuthFieldType;\n(function (AuthFieldType) {\n    AuthFieldType[AuthFieldType[\"PublicKeyCompressed\"] = 0] = \"PublicKeyCompressed\";\n    AuthFieldType[AuthFieldType[\"PublicKeyUncompressed\"] = 1] = \"PublicKeyUncompressed\";\n    AuthFieldType[AuthFieldType[\"SignatureCompressed\"] = 2] = \"SignatureCompressed\";\n    AuthFieldType[AuthFieldType[\"SignatureUncompressed\"] = 3] = \"SignatureUncompressed\";\n})(AuthFieldType || (AuthFieldType = {}));\nexport var TxRejectedReason;\n(function (TxRejectedReason) {\n    TxRejectedReason[\"Serialization\"] = \"Serialization\";\n    TxRejectedReason[\"Deserialization\"] = \"Deserialization\";\n    TxRejectedReason[\"SignatureValidation\"] = \"SignatureValidation\";\n    TxRejectedReason[\"FeeTooLow\"] = \"FeeTooLow\";\n    TxRejectedReason[\"BadNonce\"] = \"BadNonce\";\n    TxRejectedReason[\"NotEnoughFunds\"] = \"NotEnoughFunds\";\n    TxRejectedReason[\"NoSuchContract\"] = \"NoSuchContract\";\n    TxRejectedReason[\"NoSuchPublicFunction\"] = \"NoSuchPublicFunction\";\n    TxRejectedReason[\"BadFunctionArgument\"] = \"BadFunctionArgument\";\n    TxRejectedReason[\"ContractAlreadyExists\"] = \"ContractAlreadyExists\";\n    TxRejectedReason[\"PoisonMicroblocksDoNotConflict\"] = \"PoisonMicroblocksDoNotConflict\";\n    TxRejectedReason[\"PoisonMicroblockHasUnknownPubKeyHash\"] = \"PoisonMicroblockHasUnknownPubKeyHash\";\n    TxRejectedReason[\"PoisonMicroblockIsInvalid\"] = \"PoisonMicroblockIsInvalid\";\n    TxRejectedReason[\"BadAddressVersionByte\"] = \"BadAddressVersionByte\";\n    TxRejectedReason[\"NoCoinbaseViaMempool\"] = \"NoCoinbaseViaMempool\";\n    TxRejectedReason[\"ServerFailureNoSuchChainTip\"] = \"ServerFailureNoSuchChainTip\";\n    TxRejectedReason[\"ServerFailureDatabase\"] = \"ServerFailureDatabase\";\n    TxRejectedReason[\"ServerFailureOther\"] = \"ServerFailureOther\";\n})(TxRejectedReason || (TxRejectedReason = {}));\n//# sourceMappingURL=constants.js.map","export function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexport function bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexport function bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexport function hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexport function exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexport function output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexport default assert;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nimport { crypto } from '@noble/hashes/crypto';\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nexport function bytesToHex(uint8a) {\n    // pre-caching improves the speed 6x\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\n/**\n * @example hexToBytes('deadbeef')\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nexport function concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new TypeError('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto.web) {\n        return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    }\n    else if (crypto.node) {\n        return new Uint8Array(crypto.node.randomBytes(bytesLength).buffer);\n    }\n    else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n}\n","export const crypto = {\n    node: undefined,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n","import assert from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nexport class SHA2 extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        assert.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n","import { SHA2 } from './_sha2.js';\nimport { wrapConstructor } from './utils.js';\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\nconst Rho = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);\nconst Id = Uint8Array.from({ length: 16 }, (_, i) => i);\nconst Pi = Id.map((i) => (9 * i + 5) % 16);\nlet idxL = [Id];\nlet idxR = [Pi];\nfor (let i = 0; i < 4; i++)\n    for (let j of [idxL, idxR])\n        j.push(j[i].map((k) => Rho[k]));\nconst shifts = [\n    [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n    [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n    [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n    [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n    [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => new Uint8Array(i));\nconst shiftsL = idxL.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst shiftsR = idxR.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst Kl = new Uint32Array([0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]);\nconst Kr = new Uint32Array([0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]);\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word, shift) => (word << shift) | (word >>> (32 - shift));\n// It's called f() in spec.\nfunction f(group, x, y, z) {\n    if (group === 0)\n        return x ^ y ^ z;\n    else if (group === 1)\n        return (x & y) | (~x & z);\n    else if (group === 2)\n        return (x | ~y) ^ z;\n    else if (group === 3)\n        return (x & z) | (y & ~z);\n    else\n        return x ^ (y | ~z);\n}\n// Temporary buffer, not used to store anything between runs\nconst BUF = new Uint32Array(16);\nexport class RIPEMD160 extends SHA2 {\n    constructor() {\n        super(64, 20, 8, true);\n        this.h0 = 0x67452301 | 0;\n        this.h1 = 0xefcdab89 | 0;\n        this.h2 = 0x98badcfe | 0;\n        this.h3 = 0x10325476 | 0;\n        this.h4 = 0xc3d2e1f0 | 0;\n    }\n    get() {\n        const { h0, h1, h2, h3, h4 } = this;\n        return [h0, h1, h2, h3, h4];\n    }\n    set(h0, h1, h2, h3, h4) {\n        this.h0 = h0 | 0;\n        this.h1 = h1 | 0;\n        this.h2 = h2 | 0;\n        this.h3 = h3 | 0;\n        this.h4 = h4 | 0;\n    }\n    process(view, offset) {\n        for (let i = 0; i < 16; i++, offset += 4)\n            BUF[i] = view.getUint32(offset, true);\n        // prettier-ignore\n        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;\n        // Instead of iterating 0 to 80, we split it into 5 groups\n        // And use the groups in constants, functions, etc. Much simpler\n        for (let group = 0; group < 5; group++) {\n            const rGroup = 4 - group;\n            const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore\n            const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n            const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore\n            for (let i = 0; i < 16; i++) {\n                const tl = (rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el) | 0;\n                al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n            }\n            // 2 loops are 10% faster\n            for (let i = 0; i < 16; i++) {\n                const tr = (rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er) | 0;\n                ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n            }\n        }\n        // Add the compressed chunk to the current hash value\n        this.set((this.h1 + cl + dr) | 0, (this.h2 + dl + er) | 0, (this.h3 + el + ar) | 0, (this.h4 + al + br) | 0, (this.h0 + bl + cr) | 0);\n    }\n    roundClean() {\n        BUF.fill(0);\n    }\n    destroy() {\n        this.destroyed = true;\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0);\n    }\n}\n/**\n * RIPEMD-160 - a hash function from 1990s.\n * @param message - msg that would be hashed\n */\nexport const ripemd160 = wrapConstructor(() => new RIPEMD160());\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = wrapConstructor(() => new SHA256());\nexport const sha224 = wrapConstructor(() => new SHA224());\n","const U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nexport function fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexport function split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexport const toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nexport function add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n","import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\nexport class SHA512 extends SHA2 {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nclass SHA512_224 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexport const sha512 = wrapConstructor(() => new SHA512());\nexport const sha512_224 = wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = wrapConstructor(() => new SHA512_256());\nexport const sha384 = wrapConstructor(() => new SHA384());\n","/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _8n = BigInt(8);\nconst CURVE = Object.freeze({\n    a: _0n,\n    b: BigInt(7),\n    P: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n    n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n    h: _1n,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n});\nconst divNearest = (a, b) => (a + b / _2n) / b;\nconst endo = {\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n    splitScalar(k) {\n        const { n } = CURVE;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000');\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg)\n            k1 = n - k1;\n        if (k2neg)\n            k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n            throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n    },\n};\nconst fieldLen = 32;\nconst groupLen = 32;\nconst hashLen = 32;\nconst compressedLen = fieldLen + 1;\nconst uncompressedLen = 2 * fieldLen + 1;\nexport { CURVE };\nfunction weierstrass(x) {\n    const { a, b } = CURVE;\n    const x2 = mod(x * x);\n    const x3 = mod(x2 * x);\n    return mod(x3 + a * x + b);\n}\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\nclass ShaError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nfunction assertJacPoint(other) {\n    if (!(other instanceof JacobianPoint))\n        throw new TypeError('JacobianPoint expected');\n}\nclass JacobianPoint {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('JacobianPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return JacobianPoint.ZERO;\n        return new JacobianPoint(p.x, p.y, _1n);\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n    }\n    equals(other) {\n        assertJacPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        return U1 === U2 && S1 === S2;\n    }\n    negate() {\n        return new JacobianPoint(this.x, mod(-this.y), this.z);\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(B * B);\n        const x1b = X1 + B;\n        const D = mod(_2n * (mod(x1b * x1b) - A - C));\n        const E = mod(_3n * A);\n        const F = mod(E * E);\n        const X3 = mod(F - _2n * D);\n        const Y3 = mod(E * (D - X3) - _8n * C);\n        const Z3 = mod(_2n * Y1 * Z1);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    add(other) {\n        assertJacPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        if (X2 === _0n || Y2 === _0n)\n            return this;\n        if (X1 === _0n || Y1 === _0n)\n            return other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        const H = mod(U2 - U1);\n        const r = mod(S2 - S1);\n        if (H === _0n) {\n            if (r === _0n) {\n                return this.double();\n            }\n            else {\n                return JacobianPoint.ZERO;\n            }\n        }\n        const HH = mod(H * H);\n        const HHH = mod(H * HH);\n        const V = mod(U1 * HH);\n        const X3 = mod(r * r - HHH - _2n * V);\n        const Y3 = mod(r * (V - X3) - S1 * HHH);\n        const Z3 = mod(Z1 * Z2 * H);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiplyUnsafe(scalar) {\n        const P0 = JacobianPoint.ZERO;\n        if (typeof scalar === 'bigint' && scalar === _0n)\n            return P0;\n        let n = normalizeScalar(scalar);\n        if (n === _1n)\n            return this;\n        if (!USE_ENDOMORPHISM) {\n            let p = P0;\n            let d = this;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        }\n        let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let k1p = P0;\n        let k2p = P0;\n        let d = this;\n        while (k1 > _0n || k2 > _0n) {\n            if (k1 & _1n)\n                k1p = k1p.add(d);\n            if (k2 & _1n)\n                k2p = k2p.add(d);\n            d = d.double();\n            k1 >>= _1n;\n            k2 >>= _1n;\n        }\n        if (k1neg)\n            k1p = k1p.negate();\n        if (k2neg)\n            k2p = k2p.negate();\n        k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);\n        return k1p.add(k2p);\n    }\n    precomputeWindow(W) {\n        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(JacobianPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = JacobianPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = JacobianPoint.ZERO;\n        let f = JacobianPoint.BASE;\n        const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            const offset1 = offset;\n            const offset2 = offset + Math.abs(wbits) - 1;\n            const cond1 = window % 2 !== 0;\n            const cond2 = wbits < 0;\n            if (wbits === 0) {\n                f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n            }\n            else {\n                p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n            }\n        }\n        return { p, f };\n    }\n    multiply(scalar, affinePoint) {\n        let n = normalizeScalar(scalar);\n        let point;\n        let fake;\n        if (USE_ENDOMORPHISM) {\n            const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);\n            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);\n            k1p = constTimeNegate(k1neg, k1p);\n            k2p = constTimeNegate(k2neg, k2p);\n            k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);\n            point = k1p.add(k2p);\n            fake = f1p.add(f2p);\n        }\n        else {\n            const { p, f } = this.wNAF(n, affinePoint);\n            point = p;\n            fake = f;\n        }\n        return JacobianPoint.normalizeZ([point, fake])[0];\n    }\n    toAffine(invZ) {\n        const { x, y, z } = this;\n        const is0 = this.equals(JacobianPoint.ZERO);\n        if (invZ == null)\n            invZ = is0 ? _8n : invert(z);\n        const iz1 = invZ;\n        const iz2 = mod(iz1 * iz1);\n        const iz3 = mod(iz2 * iz1);\n        const ax = mod(x * iz2);\n        const ay = mod(y * iz3);\n        const zz = mod(z * iz1);\n        if (is0)\n            return Point.ZERO;\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n}\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nconst pointPrecomputes = new WeakMap();\nexport class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    hasEvenY() {\n        return this.y % _2n === _0n;\n    }\n    static fromCompressedHex(bytes) {\n        const isShort = bytes.length === 32;\n        const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n        if (!isValidFieldElement(x))\n            throw new Error('Point is not on curve');\n        const y2 = weierstrass(x);\n        let y = sqrtMod(y2);\n        const isYOdd = (y & _1n) === _1n;\n        if (isShort) {\n            if (isYOdd)\n                y = mod(-y);\n        }\n        else {\n            const isFirstByteOdd = (bytes[0] & 1) === 1;\n            if (isFirstByteOdd !== isYOdd)\n                y = mod(-y);\n        }\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromUncompressedHex(bytes) {\n        const x = bytesToNumber(bytes.subarray(1, fieldLen + 1));\n        const y = bytesToNumber(bytes.subarray(fieldLen + 1, fieldLen * 2 + 1));\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        const len = bytes.length;\n        const header = bytes[0];\n        if (len === fieldLen)\n            return this.fromCompressedHex(bytes);\n        if (len === compressedLen && (header === 0x02 || header === 0x03)) {\n            return this.fromCompressedHex(bytes);\n        }\n        if (len === uncompressedLen && header === 0x04)\n            return this.fromUncompressedHex(bytes);\n        throw new Error(`Point.fromHex: received invalid point. Expected 32-${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes, not ${len}`);\n    }\n    static fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normalizePrivateKey(privateKey));\n    }\n    static fromSignature(msgHash, signature, recovery) {\n        const { r, s } = normalizeSignature(signature);\n        if (![0, 1, 2, 3].includes(recovery))\n            throw new Error('Cannot recover: invalid recovery bit');\n        const h = truncateHash(ensureBytes(msgHash));\n        const { n } = CURVE;\n        const radj = recovery === 2 || recovery === 3 ? r + n : r;\n        const rinv = invert(radj, n);\n        const u1 = mod(-h * rinv, n);\n        const u2 = mod(s * rinv, n);\n        const prefix = recovery & 1 ? '03' : '02';\n        const R = Point.fromHex(prefix + numTo32bStr(radj));\n        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n        if (!Q)\n            throw new Error('Cannot recover signature: point at infinify');\n        Q.assertValidity();\n        return Q;\n    }\n    toRawBytes(isCompressed = false) {\n        return hexToBytes(this.toHex(isCompressed));\n    }\n    toHex(isCompressed = false) {\n        const x = numTo32bStr(this.x);\n        if (isCompressed) {\n            const prefix = this.hasEvenY() ? '02' : '03';\n            return `${prefix}${x}`;\n        }\n        else {\n            return `04${x}${numTo32bStr(this.y)}`;\n        }\n    }\n    toHexX() {\n        return this.toHex(true).slice(2);\n    }\n    toRawX() {\n        return this.toRawBytes(true).slice(1);\n    }\n    assertValidity() {\n        const msg = 'Point is not on elliptic curve';\n        const { x, y } = this;\n        if (!isValidFieldElement(x) || !isValidFieldElement(y))\n            throw new Error(msg);\n        const left = mod(y * y);\n        const right = weierstrass(x);\n        if (mod(left - right) !== _0n)\n            throw new Error(msg);\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(this.x, mod(-this.y));\n    }\n    double() {\n        return JacobianPoint.fromAffine(this).double().toAffine();\n    }\n    add(other) {\n        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n    multiplyAndAddUnsafe(Q, a, b) {\n        const P = JacobianPoint.fromAffine(this);\n        const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n        const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n        const sum = aP.add(bQ);\n        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\nfunction sliceDER(s) {\n    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\nfunction parseDERInt(data) {\n    if (data.length < 2 || data[0] !== 0x02) {\n        throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n    }\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) {\n        throw new Error(`Invalid signature integer: wrong length`);\n    }\n    if (res[0] === 0x00 && res[1] <= 0x7f) {\n        throw new Error('Invalid signature integer: trailing length');\n    }\n    return { data: bytesToNumber(res), left: data.subarray(len + 2) };\n}\nfunction parseDERSignature(data) {\n    if (data.length < 2 || data[0] != 0x30) {\n        throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n    }\n    if (data[1] !== data.length - 2) {\n        throw new Error('Invalid signature: incorrect length');\n    }\n    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));\n    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);\n    if (rBytesLeft.length) {\n        throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n    }\n    return { r, s };\n}\nexport class Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromCompact(hex) {\n        const arr = hex instanceof Uint8Array;\n        const name = 'Signature.fromCompact';\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`${name}: Expected string or Uint8Array`);\n        const str = arr ? bytesToHex(hex) : hex;\n        if (str.length !== 128)\n            throw new Error(`${name}: Expected 64-byte hex`);\n        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n    }\n    static fromDER(hex) {\n        const arr = hex instanceof Uint8Array;\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n        const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));\n        return new Signature(r, s);\n    }\n    static fromHex(hex) {\n        return this.fromDER(hex);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isWithinCurveOrder(r))\n            throw new Error('Invalid Signature: r must be 0 < r < n');\n        if (!isWithinCurveOrder(s))\n            throw new Error('Invalid Signature: s must be 0 < s < n');\n    }\n    hasHighS() {\n        const HALF = CURVE.n >> _1n;\n        return this.s > HALF;\n    }\n    normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, mod(-this.s, CURVE.n)) : this;\n    }\n    toDERRawBytes() {\n        return hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n        const sHex = sliceDER(numberToHexUnpadded(this.s));\n        const rHex = sliceDER(numberToHexUnpadded(this.r));\n        const sHexL = sHex.length / 2;\n        const rHexL = rHex.length / 2;\n        const sLen = numberToHexUnpadded(sHexL);\n        const rLen = numberToHexUnpadded(rHexL);\n        const length = numberToHexUnpadded(rHexL + sHexL + 4);\n        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n    }\n    toRawBytes() {\n        return this.toDERRawBytes();\n    }\n    toHex() {\n        return this.toDERHex();\n    }\n    toCompactRawBytes() {\n        return hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n}\nfunction concatBytes(...arrays) {\n    if (!arrays.every((b) => b instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nfunction numTo32bStr(num) {\n    if (typeof num !== 'bigint')\n        throw new Error('Expected bigint');\n    if (!(_0n <= num && num < POW_2_256))\n        throw new Error('Expected number 0 <= n < 2^256');\n    return num.toString(16).padStart(64, '0');\n}\nfunction numTo32b(num) {\n    const b = hexToBytes(numTo32bStr(num));\n    if (b.length !== 32)\n        throw new Error('Error: expected 32 bytes');\n    return b;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n    }\n    return BigInt(`0x${hex}`);\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction bytesToNumber(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction ensureBytes(hex) {\n    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\nfunction normalizeScalar(num) {\n    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)\n        return BigInt(num);\n    if (typeof num === 'bigint' && isWithinCurveOrder(num))\n        return num;\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nfunction mod(a, b = CURVE.P) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction sqrtMod(x) {\n    const { P } = CURVE;\n    const _6n = BigInt(6);\n    const _11n = BigInt(11);\n    const _22n = BigInt(22);\n    const _23n = BigInt(23);\n    const _44n = BigInt(44);\n    const _88n = BigInt(88);\n    const b2 = (x * x * x) % P;\n    const b3 = (b2 * b2 * x) % P;\n    const b6 = (pow2(b3, _3n) * b3) % P;\n    const b9 = (pow2(b6, _3n) * b3) % P;\n    const b11 = (pow2(b9, _2n) * b2) % P;\n    const b22 = (pow2(b11, _11n) * b11) % P;\n    const b44 = (pow2(b22, _22n) * b22) % P;\n    const b88 = (pow2(b44, _44n) * b44) % P;\n    const b176 = (pow2(b88, _88n) * b88) % P;\n    const b220 = (pow2(b176, _44n) * b44) % P;\n    const b223 = (pow2(b220, _3n) * b3) % P;\n    const t1 = (pow2(b223, _23n) * b22) % P;\n    const t2 = (pow2(t1, _6n) * b2) % P;\n    const rt = pow2(t2, _2n);\n    const xc = (rt * rt) % P;\n    if (xc !== x)\n        throw new Error('Cannot find square root');\n    return rt;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const scratch = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = mod(acc * scratch[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return scratch;\n}\nfunction bits2int_2(bytes) {\n    const delta = bytes.length * 8 - groupLen * 8;\n    const num = bytesToNumber(bytes);\n    return delta > 0 ? num >> BigInt(delta) : num;\n}\nfunction truncateHash(hash, truncateOnly = false) {\n    const h = bits2int_2(hash);\n    if (truncateOnly)\n        return h;\n    const { n } = CURVE;\n    return h >= n ? h - n : h;\n}\nlet _sha256Sync;\nlet _hmacSha256Sync;\nclass HmacDrbg {\n    constructor(hashLen, qByteLen) {\n        this.hashLen = hashLen;\n        this.qByteLen = qByteLen;\n        if (typeof hashLen !== 'number' || hashLen < 2)\n            throw new Error('hashLen must be a number');\n        if (typeof qByteLen !== 'number' || qByteLen < 2)\n            throw new Error('qByteLen must be a number');\n        this.v = new Uint8Array(hashLen).fill(1);\n        this.k = new Uint8Array(hashLen).fill(0);\n        this.counter = 0;\n    }\n    hmac(...values) {\n        return utils.hmacSha256(this.k, ...values);\n    }\n    hmacSync(...values) {\n        return _hmacSha256Sync(this.k, ...values);\n    }\n    checkSync() {\n        if (typeof _hmacSha256Sync !== 'function')\n            throw new ShaError('hmacSha256Sync needs to be set');\n    }\n    incr() {\n        if (this.counter >= 1000)\n            throw new Error('Tried 1,000 k values for sign(), all were invalid');\n        this.counter += 1;\n    }\n    async reseed(seed = new Uint8Array()) {\n        this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n        this.v = await this.hmac(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n        this.v = await this.hmac(this.v);\n    }\n    reseedSync(seed = new Uint8Array()) {\n        this.checkSync();\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n        this.v = this.hmacSync(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n        this.v = this.hmacSync(this.v);\n    }\n    async generate() {\n        this.incr();\n        let len = 0;\n        const out = [];\n        while (len < this.qByteLen) {\n            this.v = await this.hmac(this.v);\n            const sl = this.v.slice();\n            out.push(sl);\n            len += this.v.length;\n        }\n        return concatBytes(...out);\n    }\n    generateSync() {\n        this.checkSync();\n        this.incr();\n        let len = 0;\n        const out = [];\n        while (len < this.qByteLen) {\n            this.v = this.hmacSync(this.v);\n            const sl = this.v.slice();\n            out.push(sl);\n            len += this.v.length;\n        }\n        return concatBytes(...out);\n    }\n}\nfunction isWithinCurveOrder(num) {\n    return _0n < num && num < CURVE.n;\n}\nfunction isValidFieldElement(num) {\n    return _0n < num && num < CURVE.P;\n}\nfunction kmdToSig(kBytes, m, d, lowS = true) {\n    const { n } = CURVE;\n    const k = truncateHash(kBytes, true);\n    if (!isWithinCurveOrder(k))\n        return;\n    const kinv = invert(k, n);\n    const q = Point.BASE.multiply(k);\n    const r = mod(q.x, n);\n    if (r === _0n)\n        return;\n    const s = mod(kinv * mod(m + d * r, n), n);\n    if (s === _0n)\n        return;\n    let sig = new Signature(r, s);\n    let recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n    if (lowS && sig.hasHighS()) {\n        sig = sig.normalizeS();\n        recovery ^= 1;\n    }\n    return { sig, recovery };\n}\nfunction normalizePrivateKey(key) {\n    let num;\n    if (typeof key === 'bigint') {\n        num = key;\n    }\n    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n        num = BigInt(key);\n    }\n    else if (typeof key === 'string') {\n        if (key.length !== 2 * groupLen)\n            throw new Error('Expected 32 bytes of private key');\n        num = hexToNumber(key);\n    }\n    else if (key instanceof Uint8Array) {\n        if (key.length !== groupLen)\n            throw new Error('Expected 32 bytes of private key');\n        num = bytesToNumber(key);\n    }\n    else {\n        throw new TypeError('Expected valid private key');\n    }\n    if (!isWithinCurveOrder(num))\n        throw new Error('Expected private key: 0 < key < n');\n    return num;\n}\nfunction normalizePublicKey(publicKey) {\n    if (publicKey instanceof Point) {\n        publicKey.assertValidity();\n        return publicKey;\n    }\n    else {\n        return Point.fromHex(publicKey);\n    }\n}\nfunction normalizeSignature(signature) {\n    if (signature instanceof Signature) {\n        signature.assertValidity();\n        return signature;\n    }\n    try {\n        return Signature.fromDER(signature);\n    }\n    catch (error) {\n        return Signature.fromCompact(signature);\n    }\n}\nexport function getPublicKey(privateKey, isCompressed = false) {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexport function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {\n    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\nfunction isProbPub(item) {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr)\n        return len === compressedLen || len === uncompressedLen;\n    if (str)\n        return len === compressedLen * 2 || len === uncompressedLen * 2;\n    if (item instanceof Point)\n        return true;\n    return false;\n}\nexport function getSharedSecret(privateA, publicB, isCompressed = false) {\n    if (isProbPub(privateA))\n        throw new TypeError('getSharedSecret: first arg must be private key');\n    if (!isProbPub(publicB))\n        throw new TypeError('getSharedSecret: second arg must be public key');\n    const b = normalizePublicKey(publicB);\n    b.assertValidity();\n    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\nfunction bits2int(bytes) {\n    const slice = bytes.length > fieldLen ? bytes.slice(0, fieldLen) : bytes;\n    return bytesToNumber(slice);\n}\nfunction bits2octets(bytes) {\n    const z1 = bits2int(bytes);\n    const z2 = mod(z1, CURVE.n);\n    return int2octets(z2 < _0n ? z1 : z2);\n}\nfunction int2octets(num) {\n    return numTo32b(num);\n}\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n    if (msgHash == null)\n        throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n    const h1 = ensureBytes(msgHash);\n    const d = normalizePrivateKey(privateKey);\n    const seedArgs = [int2octets(d), bits2octets(h1)];\n    if (extraEntropy != null) {\n        if (extraEntropy === true)\n            extraEntropy = utils.randomBytes(fieldLen);\n        const e = ensureBytes(extraEntropy);\n        if (e.length !== fieldLen)\n            throw new Error(`sign: Expected ${fieldLen} bytes of extra data`);\n        seedArgs.push(e);\n    }\n    const seed = concatBytes(...seedArgs);\n    const m = bits2int(h1);\n    return { seed, m, d };\n}\nfunction finalizeSig(recSig, opts) {\n    const { sig, recovery } = recSig;\n    const { der, recovered } = Object.assign({ canonical: true, der: true }, opts);\n    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n    return recovered ? [hashed, recovery] : hashed;\n}\nasync function sign(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    const drbg = new HmacDrbg(hashLen, groupLen);\n    await drbg.reseed(seed);\n    let sig;\n    while (!(sig = kmdToSig(await drbg.generate(), m, d, opts.canonical)))\n        await drbg.reseed();\n    return finalizeSig(sig, opts);\n}\nfunction signSync(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    const drbg = new HmacDrbg(hashLen, groupLen);\n    drbg.reseedSync(seed);\n    let sig;\n    while (!(sig = kmdToSig(drbg.generateSync(), m, d, opts.canonical)))\n        drbg.reseedSync();\n    return finalizeSig(sig, opts);\n}\nexport { sign, signSync };\nconst vopts = { strict: true };\nexport function verify(signature, msgHash, publicKey, opts = vopts) {\n    let sig;\n    try {\n        sig = normalizeSignature(signature);\n        msgHash = ensureBytes(msgHash);\n    }\n    catch (error) {\n        return false;\n    }\n    const { r, s } = sig;\n    if (opts.strict && sig.hasHighS())\n        return false;\n    const h = truncateHash(msgHash);\n    let P;\n    try {\n        P = normalizePublicKey(publicKey);\n    }\n    catch (error) {\n        return false;\n    }\n    const { n } = CURVE;\n    const sinv = invert(s, n);\n    const u1 = mod(h * sinv, n);\n    const u2 = mod(r * sinv, n);\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n    if (!R)\n        return false;\n    const v = mod(R.x, n);\n    return v === r;\n}\nfunction schnorrChallengeFinalize(ch) {\n    return mod(bytesToNumber(ch), CURVE.n);\n}\nclass SchnorrSignature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        if (bytes.length !== 64)\n            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n        const r = bytesToNumber(bytes.subarray(0, 32));\n        const s = bytesToNumber(bytes.subarray(32, 64));\n        return new SchnorrSignature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isValidFieldElement(r) || !isWithinCurveOrder(s))\n            throw new Error('Invalid signature');\n    }\n    toHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n    toRawBytes() {\n        return hexToBytes(this.toHex());\n    }\n}\nfunction schnorrGetPublicKey(privateKey) {\n    return Point.fromPrivateKey(privateKey).toRawX();\n}\nclass InternalSchnorrSignature {\n    constructor(message, privateKey, auxRand = utils.randomBytes()) {\n        if (message == null)\n            throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n        this.m = ensureBytes(message);\n        const { x, scalar } = this.getScalar(normalizePrivateKey(privateKey));\n        this.px = x;\n        this.d = scalar;\n        this.rand = ensureBytes(auxRand);\n        if (this.rand.length !== 32)\n            throw new TypeError('sign: Expected 32 bytes of aux randomness');\n    }\n    getScalar(priv) {\n        const point = Point.fromPrivateKey(priv);\n        const scalar = point.hasEvenY() ? priv : CURVE.n - priv;\n        return { point, scalar, x: point.toRawX() };\n    }\n    initNonce(d, t0h) {\n        return numTo32b(d ^ bytesToNumber(t0h));\n    }\n    finalizeNonce(k0h) {\n        const k0 = mod(bytesToNumber(k0h), CURVE.n);\n        if (k0 === _0n)\n            throw new Error('sign: Creation of signature failed. k is zero');\n        const { point: R, x: rx, scalar: k } = this.getScalar(k0);\n        return { R, rx, k };\n    }\n    finalizeSig(R, k, e, d) {\n        return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n    }\n    error() {\n        throw new Error('sign: Invalid signature produced');\n    }\n    async calc() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHash;\n        const t = this.initNonce(d, await tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(await tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(await tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!(await schnorrVerify(sig, m, px)))\n            this.error();\n        return sig;\n    }\n    calcSync() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHashSync;\n        const t = this.initNonce(d, tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!schnorrVerifySync(sig, m, px))\n            this.error();\n        return sig;\n    }\n}\nasync function schnorrSign(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calc();\n}\nfunction schnorrSignSync(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calcSync();\n}\nfunction initSchnorrVerify(signature, message, publicKey) {\n    const raw = signature instanceof SchnorrSignature;\n    const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n    if (raw)\n        sig.assertValidity();\n    return {\n        ...sig,\n        m: ensureBytes(message),\n        P: normalizePublicKey(publicKey),\n    };\n}\nfunction finalizeSchnorrVerify(r, P, s, e) {\n    const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n    if (!R || !R.hasEvenY() || R.x !== r)\n        return false;\n    return true;\n}\nasync function schnorrVerify(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(await utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nfunction schnorrVerifySync(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        if (error instanceof ShaError)\n            throw error;\n        return false;\n    }\n}\nexport const schnorr = {\n    Signature: SchnorrSignature,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    signSync: schnorrSignSync,\n    verifySync: schnorrVerifySync,\n};\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nconst TAGS = {\n    challenge: 'BIP0340/challenge',\n    aux: 'BIP0340/aux',\n    nonce: 'BIP0340/nonce',\n};\nconst TAGGED_HASH_PREFIXES = {};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    mod,\n    invert,\n    isValidPrivateKey(privateKey) {\n        try {\n            normalizePrivateKey(privateKey);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    },\n    _bigintTo32Bytes: numTo32b,\n    _normalizePrivateKey: normalizePrivateKey,\n    hashToPrivateKey: (hash) => {\n        hash = ensureBytes(hash);\n        const minLen = groupLen + 8;\n        if (hash.length < minLen || hash.length > 1024) {\n            throw new Error(`Expected valid bytes of private key as per FIPS 186`);\n        }\n        const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n        return numTo32b(num);\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return Uint8Array.from(randomBytes(bytesLength));\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => utils.hashToPrivateKey(utils.randomBytes(groupLen + 8)),\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_3n);\n        return cached;\n    },\n    sha256: async (...messages) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHash } = crypto.node;\n            const hash = createHash('sha256');\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha256 function\");\n        }\n    },\n    hmacSha256: async (key, ...messages) => {\n        if (crypto.web) {\n            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\n            const message = concatBytes(...messages);\n            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHmac } = crypto.node;\n            const hash = createHmac('sha256', key);\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have hmac-sha256 function\");\n        }\n    },\n    sha256Sync: undefined,\n    hmacSha256Sync: undefined,\n    taggedHash: async (tag, ...messages) => {\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = await utils.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return utils.sha256(tagP, ...messages);\n    },\n    taggedHashSync: (tag, ...messages) => {\n        if (typeof _sha256Sync !== 'function')\n            throw new ShaError('sha256Sync is undefined, you need to set it');\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = _sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return _sha256Sync(tagP, ...messages);\n    },\n    _JacobianPoint: JacobianPoint,\n};\nObject.defineProperties(utils, {\n    sha256Sync: {\n        configurable: false,\n        get() {\n            return _sha256Sync;\n        },\n        set(val) {\n            if (!_sha256Sync)\n                _sha256Sync = val;\n        },\n    },\n    hmacSha256Sync: {\n        configurable: false,\n        get() {\n            return _hmacSha256Sync;\n        },\n        set(val) {\n            if (!_hmacSha256Sync)\n                _hmacSha256Sync = val;\n        },\n    },\n});\n","export var ClarityType;\n(function (ClarityType) {\n    ClarityType[\"Int\"] = \"int\";\n    ClarityType[\"UInt\"] = \"uint\";\n    ClarityType[\"Buffer\"] = \"buffer\";\n    ClarityType[\"BoolTrue\"] = \"true\";\n    ClarityType[\"BoolFalse\"] = \"false\";\n    ClarityType[\"PrincipalStandard\"] = \"address\";\n    ClarityType[\"PrincipalContract\"] = \"contract\";\n    ClarityType[\"ResponseOk\"] = \"ok\";\n    ClarityType[\"ResponseErr\"] = \"err\";\n    ClarityType[\"OptionalNone\"] = \"none\";\n    ClarityType[\"OptionalSome\"] = \"some\";\n    ClarityType[\"List\"] = \"list\";\n    ClarityType[\"Tuple\"] = \"tuple\";\n    ClarityType[\"StringASCII\"] = \"ascii\";\n    ClarityType[\"StringUTF8\"] = \"utf8\";\n})(ClarityType || (ClarityType = {}));\nexport var ClarityWireType;\n(function (ClarityWireType) {\n    ClarityWireType[ClarityWireType[\"int\"] = 0] = \"int\";\n    ClarityWireType[ClarityWireType[\"uint\"] = 1] = \"uint\";\n    ClarityWireType[ClarityWireType[\"buffer\"] = 2] = \"buffer\";\n    ClarityWireType[ClarityWireType[\"true\"] = 3] = \"true\";\n    ClarityWireType[ClarityWireType[\"false\"] = 4] = \"false\";\n    ClarityWireType[ClarityWireType[\"address\"] = 5] = \"address\";\n    ClarityWireType[ClarityWireType[\"contract\"] = 6] = \"contract\";\n    ClarityWireType[ClarityWireType[\"ok\"] = 7] = \"ok\";\n    ClarityWireType[ClarityWireType[\"err\"] = 8] = \"err\";\n    ClarityWireType[ClarityWireType[\"none\"] = 9] = \"none\";\n    ClarityWireType[ClarityWireType[\"some\"] = 10] = \"some\";\n    ClarityWireType[ClarityWireType[\"list\"] = 11] = \"list\";\n    ClarityWireType[ClarityWireType[\"tuple\"] = 12] = \"tuple\";\n    ClarityWireType[ClarityWireType[\"ascii\"] = 13] = \"ascii\";\n    ClarityWireType[ClarityWireType[\"utf8\"] = 14] = \"utf8\";\n})(ClarityWireType || (ClarityWireType = {}));\nexport function clarityTypeToByte(type) {\n    return ClarityWireType[type];\n}\nexport function clarityByteToType(wireType) {\n    return ClarityWireType[wireType];\n}\n//# sourceMappingURL=constants.js.map","import { bytesToTwosBigInt, hexToBytes, intToBigInt, isInstance, } from '@stacks/common';\nimport { ClarityType } from '../constants';\nconst MAX_U128 = BigInt('0xffffffffffffffffffffffffffffffff');\nconst MIN_U128 = BigInt(0);\nconst MAX_I128 = BigInt('0x7fffffffffffffffffffffffffffffff');\nconst MIN_I128 = BigInt('-170141183460469231731687303715884105728');\nexport const intCV = (value) => {\n    if (typeof value === 'string' && value.toLowerCase().startsWith('0x')) {\n        value = bytesToTwosBigInt(hexToBytes(value));\n    }\n    if (isInstance(value, Uint8Array))\n        value = bytesToTwosBigInt(value);\n    const bigInt = intToBigInt(value);\n    if (bigInt > MAX_I128) {\n        throw new RangeError(`Cannot construct clarity integer from value greater than ${MAX_I128}`);\n    }\n    else if (bigInt < MIN_I128) {\n        throw new RangeError(`Cannot construct clarity integer form value less than ${MIN_I128}`);\n    }\n    return { type: ClarityType.Int, value: bigInt };\n};\nexport const uintCV = (value) => {\n    const bigInt = intToBigInt(value);\n    if (bigInt < MIN_U128) {\n        throw new RangeError('Cannot construct unsigned clarity integer from negative value');\n    }\n    else if (bigInt > MAX_U128) {\n        throw new RangeError(`Cannot construct unsigned clarity integer greater than ${MAX_U128}`);\n    }\n    return { type: ClarityType.UInt, value: bigInt };\n};\n//# sourceMappingURL=intCV.js.map","import { bytesToHex, utf8ToBytes } from '@stacks/common';\nimport { ClarityType } from '../constants';\nexport const bufferCV = (buffer) => {\n    if (buffer.byteLength > 1048576) {\n        throw new Error('Cannot construct clarity buffer that is greater than 1MB');\n    }\n    return { type: ClarityType.Buffer, value: bytesToHex(buffer) };\n};\nexport const bufferCVFromString = (str) => bufferCV(utf8ToBytes(str));\n//# sourceMappingURL=bufferCV.js.map","export var StacksWireType;\n(function (StacksWireType) {\n    StacksWireType[StacksWireType[\"Address\"] = 0] = \"Address\";\n    StacksWireType[StacksWireType[\"Principal\"] = 1] = \"Principal\";\n    StacksWireType[StacksWireType[\"LengthPrefixedString\"] = 2] = \"LengthPrefixedString\";\n    StacksWireType[StacksWireType[\"MemoString\"] = 3] = \"MemoString\";\n    StacksWireType[StacksWireType[\"Asset\"] = 4] = \"Asset\";\n    StacksWireType[StacksWireType[\"PostCondition\"] = 5] = \"PostCondition\";\n    StacksWireType[StacksWireType[\"PublicKey\"] = 6] = \"PublicKey\";\n    StacksWireType[StacksWireType[\"LengthPrefixedList\"] = 7] = \"LengthPrefixedList\";\n    StacksWireType[StacksWireType[\"Payload\"] = 8] = \"Payload\";\n    StacksWireType[StacksWireType[\"MessageSignature\"] = 9] = \"MessageSignature\";\n    StacksWireType[StacksWireType[\"StructuredDataSignature\"] = 10] = \"StructuredDataSignature\";\n    StacksWireType[StacksWireType[\"TransactionAuthField\"] = 11] = \"TransactionAuthField\";\n})(StacksWireType || (StacksWireType = {}));\nexport function whenWireType(wireType) {\n    return (wireTypeMap) => wireTypeMap[wireType];\n}\n//# sourceMappingURL=types.js.map","import { hexToBytes, intToBigInt } from '@stacks/common';\nimport { c32addressDecode } from 'c32check';\nimport { ClarityType, principalCV } from '../clarity';\nimport { AddressVersion, COINBASE_BYTES_LENGTH, MAX_STRING_LENGTH_BYTES, MEMO_MAX_LENGTH_BYTES, PayloadType, PostConditionPrincipalId, RECOVERABLE_ECDSA_SIG_LENGTH_BYTES, VRF_PROOF_BYTES_LENGTH, } from '../constants';\nimport { exceedsMaxLengthBytes } from '../utils';\nimport { StacksWireType, } from './types';\nexport function createEmptyAddress() {\n    return {\n        type: StacksWireType.Address,\n        version: AddressVersion.MainnetSingleSig,\n        hash160: '0'.repeat(40),\n    };\n}\nexport function createMemoString(content) {\n    if (content && exceedsMaxLengthBytes(content, MEMO_MAX_LENGTH_BYTES)) {\n        throw new Error(`Memo exceeds maximum length of ${MEMO_MAX_LENGTH_BYTES} bytes`);\n    }\n    return { type: StacksWireType.MemoString, content };\n}\nexport function createLPList(values, lengthPrefixBytes) {\n    return {\n        type: StacksWireType.LengthPrefixedList,\n        lengthPrefixBytes: lengthPrefixBytes || 4,\n        values,\n    };\n}\nexport function createMessageSignature(signature) {\n    const length = hexToBytes(signature).byteLength;\n    if (length != RECOVERABLE_ECDSA_SIG_LENGTH_BYTES) {\n        throw Error('Invalid signature');\n    }\n    return {\n        type: StacksWireType.MessageSignature,\n        data: signature,\n    };\n}\nexport function createTokenTransferPayload(recipient, amount, memo) {\n    if (typeof recipient === 'string') {\n        recipient = principalCV(recipient);\n    }\n    if (typeof memo === 'string') {\n        memo = createMemoString(memo);\n    }\n    return {\n        type: StacksWireType.Payload,\n        payloadType: PayloadType.TokenTransfer,\n        recipient,\n        amount: intToBigInt(amount),\n        memo: memo ?? createMemoString(''),\n    };\n}\nexport function createContractCallPayload(contractAddress, contractName, functionName, functionArgs) {\n    if (typeof contractName === 'string') {\n        contractName = createLPString(contractName);\n    }\n    if (typeof functionName === 'string') {\n        functionName = createLPString(functionName);\n    }\n    return {\n        type: StacksWireType.Payload,\n        payloadType: PayloadType.ContractCall,\n        contractAddress: typeof contractAddress === 'string' ? createAddress(contractAddress) : contractAddress,\n        contractName,\n        functionName,\n        functionArgs,\n    };\n}\nexport function codeBodyString(content) {\n    return createLPString(content, 4, 100000);\n}\nexport function createSmartContractPayload(contractName, codeBody, clarityVersion) {\n    if (typeof contractName === 'string') {\n        contractName = createLPString(contractName);\n    }\n    if (typeof codeBody === 'string') {\n        codeBody = codeBodyString(codeBody);\n    }\n    if (typeof clarityVersion === 'number') {\n        return {\n            type: StacksWireType.Payload,\n            payloadType: PayloadType.VersionedSmartContract,\n            clarityVersion,\n            contractName,\n            codeBody,\n        };\n    }\n    return {\n        type: StacksWireType.Payload,\n        payloadType: PayloadType.SmartContract,\n        contractName,\n        codeBody,\n    };\n}\nexport function createPoisonPayload() {\n    return { type: StacksWireType.Payload, payloadType: PayloadType.PoisonMicroblock };\n}\nexport function createCoinbasePayload(coinbaseBytes, altRecipient) {\n    if (coinbaseBytes.byteLength != COINBASE_BYTES_LENGTH) {\n        throw Error(`Coinbase buffer size must be ${COINBASE_BYTES_LENGTH} bytes`);\n    }\n    if (altRecipient != undefined) {\n        return {\n            type: StacksWireType.Payload,\n            payloadType: PayloadType.CoinbaseToAltRecipient,\n            coinbaseBytes,\n            recipient: altRecipient,\n        };\n    }\n    return {\n        type: StacksWireType.Payload,\n        payloadType: PayloadType.Coinbase,\n        coinbaseBytes,\n    };\n}\nexport function createNakamotoCoinbasePayload(coinbaseBytes, recipient, vrfProof) {\n    if (coinbaseBytes.byteLength != COINBASE_BYTES_LENGTH) {\n        throw Error(`Coinbase buffer size must be ${COINBASE_BYTES_LENGTH} bytes`);\n    }\n    if (vrfProof.byteLength != VRF_PROOF_BYTES_LENGTH) {\n        throw Error(`VRF proof buffer size must be ${VRF_PROOF_BYTES_LENGTH} bytes`);\n    }\n    return {\n        type: StacksWireType.Payload,\n        payloadType: PayloadType.NakamotoCoinbase,\n        coinbaseBytes,\n        recipient: recipient.type === ClarityType.OptionalSome ? recipient.value : undefined,\n        vrfProof,\n    };\n}\nexport function createTenureChangePayload(tenureHash, previousTenureHash, burnViewHash, previousTenureEnd, previousTenureBlocks, cause, publicKeyHash) {\n    return {\n        type: StacksWireType.Payload,\n        payloadType: PayloadType.TenureChange,\n        tenureHash,\n        previousTenureHash,\n        burnViewHash,\n        previousTenureEnd,\n        previousTenureBlocks,\n        cause,\n        publicKeyHash,\n    };\n}\nexport function createLPString(content, lengthPrefixBytes, maxLengthBytes) {\n    const prefixLength = lengthPrefixBytes || 1;\n    const maxLength = maxLengthBytes || MAX_STRING_LENGTH_BYTES;\n    if (exceedsMaxLengthBytes(content, maxLength)) {\n        throw new Error(`String length exceeds maximum bytes ${maxLength}`);\n    }\n    return {\n        type: StacksWireType.LengthPrefixedString,\n        content,\n        lengthPrefixBytes: prefixLength,\n        maxLengthBytes: maxLength,\n    };\n}\nexport function createAsset(addressString, contractName, assetName) {\n    return {\n        type: StacksWireType.Asset,\n        address: createAddress(addressString),\n        contractName: createLPString(contractName),\n        assetName: createLPString(assetName),\n    };\n}\nexport function createAddress(c32AddressString) {\n    const addressData = c32addressDecode(c32AddressString);\n    return {\n        type: StacksWireType.Address,\n        version: addressData[0],\n        hash160: addressData[1],\n    };\n}\nexport function createContractPrincipal(addressString, contractName) {\n    const addr = createAddress(addressString);\n    const name = createLPString(contractName);\n    return {\n        type: StacksWireType.Principal,\n        prefix: PostConditionPrincipalId.Contract,\n        address: addr,\n        contractName: name,\n    };\n}\nexport function createStandardPrincipal(addressString) {\n    const addr = createAddress(addressString);\n    return {\n        type: StacksWireType.Principal,\n        prefix: PostConditionPrincipalId.Standard,\n        address: addr,\n    };\n}\nexport function createTransactionAuthField(pubKeyEncoding, contents) {\n    return {\n        pubKeyEncoding,\n        type: StacksWireType.TransactionAuthField,\n        contents,\n    };\n}\n//# sourceMappingURL=create.js.map","import assert from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nclass HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assert.hash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new TypeError('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assert.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n","import { hexToInt } from './utils';\nconst COORDINATE_BYTES = 32;\nexport function parseRecoverableSignatureVrs(signature) {\n    if (signature.length < COORDINATE_BYTES * 2 * 2 + 1) {\n        throw new Error('Invalid signature');\n    }\n    const recoveryIdHex = signature.slice(0, 2);\n    const r = signature.slice(2, 2 + COORDINATE_BYTES * 2);\n    const s = signature.slice(2 + COORDINATE_BYTES * 2);\n    return {\n        recoveryId: hexToInt(recoveryIdHex),\n        r,\n        s,\n    };\n}\nexport function signatureVrsToRsv(signature) {\n    return signature.slice(2) + signature.slice(0, 2);\n}\nexport function signatureRsvToVrs(signature) {\n    return signature.slice(-2) + signature.slice(0, -2);\n}\n//# sourceMappingURL=signatures.js.map","import { hexToBytes } from './utils';\nexport function privateKeyToBytes(privateKey) {\n    const privateKeyBuffer = typeof privateKey === 'string' ? hexToBytes(privateKey) : privateKey;\n    if (privateKeyBuffer.length != 32 && privateKeyBuffer.length != 33) {\n        throw new Error(`Improperly formatted private-key. Private-key byte length should be 32 or 33. Length provided: ${privateKeyBuffer.length}`);\n    }\n    if (privateKeyBuffer.length == 33 && privateKeyBuffer[32] !== 1) {\n        throw new Error('Improperly formatted private-key. 33 bytes indicate compressed key, but the last byte must be == 01');\n    }\n    return privateKeyBuffer;\n}\n//# sourceMappingURL=keys.js.map","import { hmac } from '@noble/hashes/hmac';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { getPublicKey as nobleGetPublicKey, Point, Signature, signSync, utils, } from '@noble/secp256k1';\nimport { bytesToHex, hexToBigInt, hexToBytes, intToHex, parseRecoverableSignatureVrs, PRIVATE_KEY_BYTES_COMPRESSED, privateKeyToBytes, signatureRsvToVrs, signatureVrsToRsv, } from '@stacks/common';\nimport { networkFrom, STACKS_MAINNET } from '@stacks/network';\nimport { c32address } from 'c32check';\nimport { addressHashModeToVersion } from './address';\nimport { AddressHashMode, PubKeyEncoding } from './constants';\nimport { hash160, hashP2PKH } from './utils';\nimport { addressFromVersionHash, addressToString, StacksWireType } from './wire';\nutils.hmacSha256Sync = (key, ...msgs) => {\n    const h = hmac.create(sha256, key);\n    msgs.forEach(msg => h.update(msg));\n    return h.digest();\n};\nexport function getAddressFromPrivateKey(privateKey, network = 'mainnet') {\n    network = networkFrom(network);\n    const publicKey = privateKeyToPublic(privateKey);\n    return getAddressFromPublicKey(publicKey, network);\n}\nexport function getAddressFromPublicKey(publicKey, network = 'mainnet') {\n    network = networkFrom(network);\n    publicKey = typeof publicKey === 'string' ? hexToBytes(publicKey) : publicKey;\n    const addrVer = addressHashModeToVersion(AddressHashMode.P2PKH, network);\n    const addr = addressFromVersionHash(addrVer, hashP2PKH(publicKey));\n    const addrString = addressToString(addr);\n    return addrString;\n}\nexport function createStacksPublicKey(publicKey) {\n    publicKey = typeof publicKey === 'string' ? hexToBytes(publicKey) : publicKey;\n    return {\n        type: StacksWireType.PublicKey,\n        data: publicKey,\n    };\n}\nexport function publicKeyFromSignatureVrs(messageHash, messageSignature, pubKeyEncoding = PubKeyEncoding.Compressed) {\n    const parsedSignature = parseRecoverableSignatureVrs(messageSignature);\n    const signature = new Signature(hexToBigInt(parsedSignature.r), hexToBigInt(parsedSignature.s));\n    const point = Point.fromSignature(messageHash, signature, parsedSignature.recoveryId);\n    const compressed = pubKeyEncoding === PubKeyEncoding.Compressed;\n    return point.toHex(compressed);\n}\nexport function publicKeyFromSignatureRsv(messageHash, messageSignature, pubKeyEncoding = PubKeyEncoding.Compressed) {\n    return publicKeyFromSignatureVrs(messageHash, signatureRsvToVrs(messageSignature), pubKeyEncoding);\n}\nexport function privateKeyToHex(publicKey) {\n    return typeof publicKey === 'string' ? publicKey : bytesToHex(publicKey);\n}\nexport const publicKeyToHex = privateKeyToHex;\nexport const isPrivateKeyCompressed = privateKeyIsCompressed;\nexport function privateKeyIsCompressed(privateKey) {\n    const length = typeof privateKey === 'string' ? privateKey.length / 2 : privateKey.byteLength;\n    return length === PRIVATE_KEY_BYTES_COMPRESSED;\n}\nexport const isPublicKeyCompressed = publicKeyIsCompressed;\nexport function publicKeyIsCompressed(publicKey) {\n    return !publicKeyToHex(publicKey).startsWith('04');\n}\nexport function privateKeyToPublic(privateKey) {\n    privateKey = privateKeyToBytes(privateKey);\n    const isCompressed = privateKeyIsCompressed(privateKey);\n    return bytesToHex(nobleGetPublicKey(privateKey.slice(0, 32), isCompressed));\n}\nexport function compressPublicKey(publicKey) {\n    return Point.fromHex(publicKeyToHex(publicKey)).toHex(true);\n}\nexport function uncompressPublicKey(publicKey) {\n    return Point.fromHex(publicKeyToHex(publicKey)).toHex(false);\n}\nexport const makeRandomPrivKey = randomPrivateKey;\nexport function randomPrivateKey() {\n    return compressPrivateKey(utils.randomPrivateKey());\n}\nexport function signWithKey(privateKey, messageHash) {\n    privateKey = privateKeyToBytes(privateKey);\n    const [rawSignature, recoveryId] = signSync(messageHash, privateKey.slice(0, 32), {\n        canonical: true,\n        recovered: true,\n    });\n    if (recoveryId == null) {\n        throw new Error('No signature recoveryId received');\n    }\n    const recoveryIdHex = intToHex(recoveryId, 1);\n    return recoveryIdHex + Signature.fromHex(rawSignature).toCompactHex();\n}\nexport function signMessageHashRsv({ messageHash, privateKey, }) {\n    return signatureVrsToRsv(signWithKey(privateKey, messageHash));\n}\nexport function compressPrivateKey(privateKey) {\n    privateKey = privateKeyToHex(privateKey);\n    return privateKey.length == PRIVATE_KEY_BYTES_COMPRESSED * 2\n        ? privateKey\n        : `${privateKey}01`;\n}\nexport function privateKeyToAddress(privateKey, network) {\n    const publicKey = privateKeyToPublic(privateKey);\n    return publicKeyToAddressSingleSig(publicKey, network);\n}\nexport function publicKeyToAddress(...args) {\n    if (typeof args[0] === 'number')\n        return _publicKeyToAddress(...args);\n    return publicKeyToAddressSingleSig(...args);\n}\nfunction _publicKeyToAddress(version, publicKey) {\n    publicKey = typeof publicKey === 'string' ? hexToBytes(publicKey) : publicKey;\n    return c32address(version, bytesToHex(hash160(publicKey)));\n}\nexport function publicKeyToAddressSingleSig(publicKey, network) {\n    network = network ? networkFrom(network) : STACKS_MAINNET;\n    publicKey = typeof publicKey === 'string' ? hexToBytes(publicKey) : publicKey;\n    return c32address(network.addressVersion.singleSig, bytesToHex(hash160(publicKey)));\n}\n//# sourceMappingURL=keys.js.map","import { c32address } from 'c32check';\nimport { AddressHashMode, PayloadType } from '../constants';\nimport { publicKeyIsCompressed } from '../keys';\nimport { hashP2PKH, hashP2SH, hashP2WPKH, hashP2WSH } from '../utils';\nimport { createAsset, createContractPrincipal, createStandardPrincipal } from './create';\nimport { serializePublicKeyBytes } from './serialization';\nimport { StacksWireType, } from './types';\nexport function addressFromPublicKeys(version, hashMode, numSigs, publicKeys) {\n    if (publicKeys.length === 0) {\n        throw Error('Invalid number of public keys');\n    }\n    if (hashMode === AddressHashMode.P2PKH || hashMode === AddressHashMode.P2WPKH) {\n        if (publicKeys.length !== 1 || numSigs !== 1) {\n            throw Error('Invalid number of public keys or signatures');\n        }\n    }\n    if (hashMode === AddressHashMode.P2WPKH ||\n        hashMode === AddressHashMode.P2WSH ||\n        hashMode === AddressHashMode.P2WSHNonSequential) {\n        if (!publicKeys.map(p => p.data).every(publicKeyIsCompressed)) {\n            throw Error('Public keys must be compressed for segwit');\n        }\n    }\n    switch (hashMode) {\n        case AddressHashMode.P2PKH:\n            return addressFromVersionHash(version, hashP2PKH(publicKeys[0].data));\n        case AddressHashMode.P2WPKH:\n            return addressFromVersionHash(version, hashP2WPKH(publicKeys[0].data));\n        case AddressHashMode.P2SH:\n        case AddressHashMode.P2SHNonSequential:\n            return addressFromVersionHash(version, hashP2SH(numSigs, publicKeys.map(serializePublicKeyBytes)));\n        case AddressHashMode.P2WSH:\n        case AddressHashMode.P2WSHNonSequential:\n            return addressFromVersionHash(version, hashP2WSH(numSigs, publicKeys.map(serializePublicKeyBytes)));\n    }\n}\nexport function addressFromVersionHash(version, hash) {\n    return { type: StacksWireType.Address, version, hash160: hash };\n}\nexport function addressToString(address) {\n    return c32address(address.version, address.hash160);\n}\nexport function isTokenTransferPayload(p) {\n    return p.payloadType === PayloadType.TokenTransfer;\n}\nexport function isContractCallPayload(p) {\n    return p.payloadType === PayloadType.ContractCall;\n}\nexport function isSmartContractPayload(p) {\n    return p.payloadType === PayloadType.SmartContract;\n}\nexport function isPoisonPayload(p) {\n    return p.payloadType === PayloadType.PoisonMicroblock;\n}\nexport function isCoinbasePayload(p) {\n    return p.payloadType === PayloadType.Coinbase;\n}\nexport function parseAssetString(id) {\n    const [assetAddress, assetContractName, assetTokenName] = id.split(/\\.|::/);\n    const asset = createAsset(assetAddress, assetContractName, assetTokenName);\n    return asset;\n}\nexport function parsePrincipalString(principalString) {\n    if (principalString.includes('.')) {\n        const [address, contractName] = principalString.split('.');\n        return createContractPrincipal(address, contractName);\n    }\n    else {\n        return createStandardPrincipal(principalString);\n    }\n}\n//# sourceMappingURL=helpers.js.map","import { utf8ToBytes } from '@stacks/common';\nimport { addressToString, createAddress, createLPString, } from '../../wire';\nimport { ClarityType } from '../constants';\nexport function principalCV(principal) {\n    if (principal.includes('.')) {\n        const [address, contractName] = principal.split('.');\n        return contractPrincipalCV(address, contractName);\n    }\n    else {\n        return standardPrincipalCV(principal);\n    }\n}\nexport function standardPrincipalCV(addressString) {\n    const addr = createAddress(addressString);\n    return { type: ClarityType.PrincipalStandard, value: addressToString(addr) };\n}\nexport function standardPrincipalCVFromAddress(address) {\n    return { type: ClarityType.PrincipalStandard, value: addressToString(address) };\n}\nexport function contractPrincipalCV(addressString, contractName) {\n    const addr = createAddress(addressString);\n    const lengthPrefixedContractName = createLPString(contractName);\n    return contractPrincipalCVFromAddress(addr, lengthPrefixedContractName);\n}\nexport function contractPrincipalCVFromAddress(address, contractName) {\n    if (utf8ToBytes(contractName.content).byteLength >= 128) {\n        throw new Error('Contract name must be less than 128 bytes');\n    }\n    return {\n        type: ClarityType.PrincipalContract,\n        value: `${addressToString(address)}.${contractName.content}`,\n    };\n}\nexport function contractPrincipalCVFromStandard(sp, contractName) {\n    return {\n        type: ClarityType.PrincipalContract,\n        value: `${sp.value}.${contractName}`,\n    };\n}\n//# sourceMappingURL=principalCV.js.map","import { ClarityType } from '../constants';\nexport function noneCV() {\n    return { type: ClarityType.OptionalNone };\n}\nexport function someCV(value) {\n    return { type: ClarityType.OptionalSome, value };\n}\nexport function optionalCVOf(value) {\n    return value ? someCV(value) : noneCV();\n}\n//# sourceMappingURL=optionalCV.js.map","import { ClarityType } from '../constants';\nimport { isClarityName } from '../../utils';\nexport function tupleCV(data) {\n    for (const key in data) {\n        if (!isClarityName(key)) {\n            throw new Error(`\"${key}\" is not a valid Clarity name`);\n        }\n    }\n    return { type: ClarityType.Tuple, value: data };\n}\n//# sourceMappingURL=tupleCV.js.map","import { ripemd160 } from '@noble/hashes/ripemd160';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { sha512_256 } from '@noble/hashes/sha512';\nimport { utils } from '@noble/secp256k1';\nimport { bytesToHex, concatArray, concatBytes, utf8ToBytes } from '@stacks/common';\nimport { c32addressDecode } from 'c32check';\nimport lodashCloneDeep from 'lodash.clonedeep';\nimport { deserializeCV, serializeCV } from './clarity';\nexport { verify as verifySignature } from '@noble/secp256k1';\nexport const randomBytes = (bytesLength) => utils.randomBytes(bytesLength);\nexport const leftPadHex = (hexString) => hexString.length % 2 ? `0${hexString}` : hexString;\nexport const leftPadHexToLength = (hexString, length) => hexString.padStart(length, '0');\nexport const rightPadHexToLength = (hexString, length) => hexString.padEnd(length, '0');\nexport const exceedsMaxLengthBytes = (string, maxLengthBytes) => string ? utf8ToBytes(string).length > maxLengthBytes : false;\nexport function cloneDeep(obj) {\n    return lodashCloneDeep(obj);\n}\nexport function omit(obj, prop) {\n    const clone = cloneDeep(obj);\n    delete clone[prop];\n    return clone;\n}\nexport const hash160 = (input) => {\n    return ripemd160(sha256(input));\n};\nexport const txidFromData = (data) => {\n    return bytesToHex(sha512_256(data));\n};\nexport const txidFromBytes = txidFromData;\nexport const hashP2PKH = (input) => {\n    return bytesToHex(hash160(input));\n};\nexport const hashP2WPKH = (input) => {\n    const keyHash = hash160(input);\n    const redeemScript = concatBytes(new Uint8Array([0]), new Uint8Array([keyHash.length]), keyHash);\n    const redeemScriptHash = hash160(redeemScript);\n    return bytesToHex(redeemScriptHash);\n};\nexport const hashP2SH = (numSigs, pubKeys) => {\n    if (numSigs > 15 || pubKeys.length > 15) {\n        throw Error('P2SH multisig address can only contain up to 15 public keys');\n    }\n    const bytesArray = [];\n    bytesArray.push(80 + numSigs);\n    pubKeys.forEach(pubKey => {\n        bytesArray.push(pubKey.length);\n        bytesArray.push(pubKey);\n    });\n    bytesArray.push(80 + pubKeys.length);\n    bytesArray.push(174);\n    const redeemScript = concatArray(bytesArray);\n    const redeemScriptHash = hash160(redeemScript);\n    return bytesToHex(redeemScriptHash);\n};\nexport const hashP2WSH = (numSigs, pubKeys) => {\n    if (numSigs > 15 || pubKeys.length > 15) {\n        throw Error('P2WSH multisig address can only contain up to 15 public keys');\n    }\n    const scriptArray = [];\n    scriptArray.push(80 + numSigs);\n    pubKeys.forEach(pubKey => {\n        scriptArray.push(pubKey.length);\n        scriptArray.push(pubKey);\n    });\n    scriptArray.push(80 + pubKeys.length);\n    scriptArray.push(174);\n    const script = concatArray(scriptArray);\n    const digest = sha256(script);\n    const bytesArray = [];\n    bytesArray.push(0);\n    bytesArray.push(digest.length);\n    bytesArray.push(digest);\n    const redeemScript = concatArray(bytesArray);\n    const redeemScriptHash = hash160(redeemScript);\n    return bytesToHex(redeemScriptHash);\n};\nexport function isClarityName(name) {\n    const regex = /^[a-zA-Z]([a-zA-Z0-9]|[-_!?+<>=/*])*$|^[-+=/*]$|^[<>]=?$/;\n    return regex.test(name) && name.length < 128;\n}\nexport function cvToHex(cv) {\n    const serialized = serializeCV(cv);\n    return `0x${serialized}`;\n}\nexport function hexToCV(hex) {\n    return deserializeCV(hex);\n}\nexport const parseReadOnlyResponse = (response) => {\n    if (response.okay)\n        return hexToCV(response.result);\n    throw new Error(response.cause);\n};\nexport const validateStacksAddress = (address) => {\n    try {\n        c32addressDecode(address);\n        return true;\n    }\n    catch (e) {\n        return false;\n    }\n};\nexport function parseContractId(contractId) {\n    const [address, name] = contractId.split('.');\n    if (!address || !name)\n        throw new Error(`Invalid contract identifier: ${contractId}`);\n    return [address, name];\n}\n//# sourceMappingURL=utils.js.map","import { ClarityType } from '../constants';\nexport const stringAsciiCV = (data) => {\n    return { type: ClarityType.StringASCII, value: data };\n};\nexport const stringUtf8CV = (data) => {\n    return { type: ClarityType.StringUTF8, value: data };\n};\nexport const stringCV = (data, encoding) => {\n    switch (encoding) {\n        case 'ascii':\n            return stringAsciiCV(data);\n        case 'utf8':\n            return stringUtf8CV(data);\n    }\n};\n//# sourceMappingURL=stringCV.js.map","import { bytesToAscii, bytesToTwosBigInt, bytesToUtf8, hexToBytes } from '@stacks/common';\nimport { ClarityWireType, bufferCV, contractPrincipalCVFromAddress, falseCV, intCV, listCV, noneCV, responseErrorCV, responseOkCV, someCV, standardPrincipalCVFromAddress, stringAsciiCV, stringUtf8CV, trueCV, tupleCV, uintCV, } from '.';\nimport { BytesReader } from '../BytesReader';\nimport { DeserializationError } from '../errors';\nimport { deserializeAddress, deserializeLPString } from '../wire';\nexport function deserializeCV(serializedClarityValue) {\n    let bytesReader;\n    if (typeof serializedClarityValue === 'string') {\n        const hasHexPrefix = serializedClarityValue.slice(0, 2).toLowerCase() === '0x';\n        bytesReader = new BytesReader(hexToBytes(hasHexPrefix ? serializedClarityValue.slice(2) : serializedClarityValue));\n    }\n    else if (serializedClarityValue instanceof Uint8Array) {\n        bytesReader = new BytesReader(serializedClarityValue);\n    }\n    else {\n        bytesReader = serializedClarityValue;\n    }\n    const type = bytesReader.readUInt8Enum(ClarityWireType, n => {\n        throw new DeserializationError(`Cannot recognize Clarity Type: ${n}`);\n    });\n    switch (type) {\n        case ClarityWireType.int:\n            return intCV(bytesToTwosBigInt(bytesReader.readBytes(16)));\n        case ClarityWireType.uint:\n            return uintCV(bytesReader.readBytes(16));\n        case ClarityWireType.buffer:\n            const bufferLength = bytesReader.readUInt32BE();\n            return bufferCV(bytesReader.readBytes(bufferLength));\n        case ClarityWireType.true:\n            return trueCV();\n        case ClarityWireType.false:\n            return falseCV();\n        case ClarityWireType.address:\n            const sAddress = deserializeAddress(bytesReader);\n            return standardPrincipalCVFromAddress(sAddress);\n        case ClarityWireType.contract:\n            const cAddress = deserializeAddress(bytesReader);\n            const contractName = deserializeLPString(bytesReader);\n            return contractPrincipalCVFromAddress(cAddress, contractName);\n        case ClarityWireType.ok:\n            return responseOkCV(deserializeCV(bytesReader));\n        case ClarityWireType.err:\n            return responseErrorCV(deserializeCV(bytesReader));\n        case ClarityWireType.none:\n            return noneCV();\n        case ClarityWireType.some:\n            return someCV(deserializeCV(bytesReader));\n        case ClarityWireType.list:\n            const listLength = bytesReader.readUInt32BE();\n            const listContents = [];\n            for (let i = 0; i < listLength; i++) {\n                listContents.push(deserializeCV(bytesReader));\n            }\n            return listCV(listContents);\n        case ClarityWireType.tuple:\n            const tupleLength = bytesReader.readUInt32BE();\n            const tupleContents = {};\n            for (let i = 0; i < tupleLength; i++) {\n                const clarityName = deserializeLPString(bytesReader).content;\n                if (clarityName === undefined) {\n                    throw new DeserializationError('\"content\" is undefined');\n                }\n                tupleContents[clarityName] = deserializeCV(bytesReader);\n            }\n            return tupleCV(tupleContents);\n        case ClarityWireType.ascii:\n            const asciiStrLen = bytesReader.readUInt32BE();\n            const asciiStr = bytesToAscii(bytesReader.readBytes(asciiStrLen));\n            return stringAsciiCV(asciiStr);\n        case ClarityWireType.utf8:\n            const utf8StrLen = bytesReader.readUInt32BE();\n            const utf8Str = bytesToUtf8(bytesReader.readBytes(utf8StrLen));\n            return stringUtf8CV(utf8Str);\n        default:\n            throw new DeserializationError('Unable to deserialize Clarity Value from Uint8Array. Could not find valid Clarity Type.');\n    }\n}\n//# sourceMappingURL=deserialize.js.map","import { ClarityType } from '../constants';\nexport const trueCV = () => ({ type: ClarityType.BoolTrue });\nexport const falseCV = () => ({ type: ClarityType.BoolFalse });\nexport const boolCV = (bool) => (bool ? trueCV() : falseCV());\n//# sourceMappingURL=booleanCV.js.map","import { ClarityType } from '../constants';\nexport function responseErrorCV(value) {\n    return { type: ClarityType.ResponseErr, value };\n}\nexport function responseOkCV(value) {\n    return { type: ClarityType.ResponseOk, value };\n}\n//# sourceMappingURL=responseCV.js.map","import { ClarityType } from '../constants';\nexport function listCV(values) {\n    return { type: ClarityType.List, value: values };\n}\n//# sourceMappingURL=listCV.js.map","import { asciiToBytes, bigIntToBytes, bytesToHex, concatArray, concatBytes, hexToBytes, toTwos, utf8ToBytes, writeUInt32BE, } from '@stacks/common';\nimport { CLARITY_INT_BYTE_SIZE, CLARITY_INT_SIZE } from '../constants';\nimport { SerializationError } from '../errors';\nimport { parseContractId } from '../utils';\nimport { createAddress, createLPString, serializeAddressBytes, serializeLPStringBytes, } from '../wire';\nimport { ClarityType, clarityTypeToByte } from './constants';\nfunction bytesWithTypeID(typeId, bytes) {\n    return concatArray([clarityTypeToByte(typeId), bytes]);\n}\nfunction serializeBoolCV(value) {\n    return new Uint8Array([clarityTypeToByte(value.type)]);\n}\nfunction serializeOptionalCV(cv) {\n    if (cv.type === ClarityType.OptionalNone) {\n        return new Uint8Array([clarityTypeToByte(cv.type)]);\n    }\n    else {\n        return bytesWithTypeID(cv.type, serializeCVBytes(cv.value));\n    }\n}\nfunction serializeBufferCV(cv) {\n    const length = new Uint8Array(4);\n    writeUInt32BE(length, Math.ceil(cv.value.length / 2), 0);\n    return bytesWithTypeID(cv.type, concatBytes(length, hexToBytes(cv.value)));\n}\nfunction serializeIntCV(cv) {\n    const bytes = bigIntToBytes(toTwos(BigInt(cv.value), BigInt(CLARITY_INT_SIZE)), CLARITY_INT_BYTE_SIZE);\n    return bytesWithTypeID(cv.type, bytes);\n}\nfunction serializeUIntCV(cv) {\n    const bytes = bigIntToBytes(BigInt(cv.value), CLARITY_INT_BYTE_SIZE);\n    return bytesWithTypeID(cv.type, bytes);\n}\nfunction serializeStandardPrincipalCV(cv) {\n    return bytesWithTypeID(cv.type, serializeAddressBytes(createAddress(cv.value)));\n}\nfunction serializeContractPrincipalCV(cv) {\n    const [address, name] = parseContractId(cv.value);\n    return bytesWithTypeID(cv.type, concatBytes(serializeAddressBytes(createAddress(address)), serializeLPStringBytes(createLPString(name))));\n}\nfunction serializeResponseCV(cv) {\n    return bytesWithTypeID(cv.type, serializeCVBytes(cv.value));\n}\nfunction serializeListCV(cv) {\n    const bytesArray = [];\n    const length = new Uint8Array(4);\n    writeUInt32BE(length, cv.value.length, 0);\n    bytesArray.push(length);\n    for (const value of cv.value) {\n        const serializedValue = serializeCVBytes(value);\n        bytesArray.push(serializedValue);\n    }\n    return bytesWithTypeID(cv.type, concatArray(bytesArray));\n}\nfunction serializeTupleCV(cv) {\n    const bytesArray = [];\n    const length = new Uint8Array(4);\n    writeUInt32BE(length, Object.keys(cv.value).length, 0);\n    bytesArray.push(length);\n    const lexicographicOrder = Object.keys(cv.value).sort((a, b) => a.localeCompare(b));\n    for (const key of lexicographicOrder) {\n        const nameWithLength = createLPString(key);\n        bytesArray.push(serializeLPStringBytes(nameWithLength));\n        const serializedValue = serializeCVBytes(cv.value[key]);\n        bytesArray.push(serializedValue);\n    }\n    return bytesWithTypeID(cv.type, concatArray(bytesArray));\n}\nfunction serializeStringCV(cv, encoding) {\n    const bytesArray = [];\n    const str = encoding == 'ascii' ? asciiToBytes(cv.value) : utf8ToBytes(cv.value);\n    const len = new Uint8Array(4);\n    writeUInt32BE(len, str.length, 0);\n    bytesArray.push(len);\n    bytesArray.push(str);\n    return bytesWithTypeID(cv.type, concatArray(bytesArray));\n}\nfunction serializeStringAsciiCV(cv) {\n    return serializeStringCV(cv, 'ascii');\n}\nfunction serializeStringUtf8CV(cv) {\n    return serializeStringCV(cv, 'utf8');\n}\nexport function serializeCV(value) {\n    return bytesToHex(serializeCVBytes(value));\n}\nexport function serializeCVBytes(value) {\n    switch (value.type) {\n        case ClarityType.BoolTrue:\n        case ClarityType.BoolFalse:\n            return serializeBoolCV(value);\n        case ClarityType.OptionalNone:\n        case ClarityType.OptionalSome:\n            return serializeOptionalCV(value);\n        case ClarityType.Buffer:\n            return serializeBufferCV(value);\n        case ClarityType.UInt:\n            return serializeUIntCV(value);\n        case ClarityType.Int:\n            return serializeIntCV(value);\n        case ClarityType.PrincipalStandard:\n            return serializeStandardPrincipalCV(value);\n        case ClarityType.PrincipalContract:\n            return serializeContractPrincipalCV(value);\n        case ClarityType.ResponseOk:\n        case ClarityType.ResponseErr:\n            return serializeResponseCV(value);\n        case ClarityType.List:\n            return serializeListCV(value);\n        case ClarityType.Tuple:\n            return serializeTupleCV(value);\n        case ClarityType.StringASCII:\n            return serializeStringAsciiCV(value);\n        case ClarityType.StringUTF8:\n            return serializeStringUtf8CV(value);\n        default:\n            throw new SerializationError('Unable to serialize. Invalid Clarity Value.');\n    }\n}\n//# sourceMappingURL=serialize.js.map","import { bytesToHex, bytesToUtf8, concatArray, hexToBytes, hexToInt, intToBigInt, intToBytes, intToHex, isInstance, utf8ToBytes, writeUInt32BE, writeUInt8, } from '@stacks/common';\nimport { BytesReader } from '../BytesReader';\nimport { deserializeCV, noneCV, serializeCVBytes, someCV, } from '../clarity';\nimport { AuthFieldType, COINBASE_BYTES_LENGTH, COMPRESSED_PUBKEY_LENGTH_BYTES, ClarityVersion, FungibleConditionCode, MEMO_MAX_LENGTH_BYTES, NonFungibleConditionCode, PayloadType, PostConditionPrincipalId, PostConditionType, PubKeyEncoding, RECOVERABLE_ECDSA_SIG_LENGTH_BYTES, TenureChangeCause, UNCOMPRESSED_PUBKEY_LENGTH_BYTES, VRF_PROOF_BYTES_LENGTH, } from '../constants';\nimport { DeserializationError, SerializationError } from '../errors';\nimport { compressPublicKey, createStacksPublicKey, uncompressPublicKey } from '../keys';\nimport { rightPadHexToLength } from '../utils';\nimport { createCoinbasePayload, createContractCallPayload, createLPList, createLPString, createMessageSignature, createNakamotoCoinbasePayload, createPoisonPayload, createSmartContractPayload, createTenureChangePayload, createTokenTransferPayload, createTransactionAuthField, } from './create';\nimport { StacksWireType, } from './types';\nexport function serializeStacksWire(wire) {\n    return bytesToHex(serializeStacksWireBytes(wire));\n}\nexport function serializeStacksWireBytes(wire) {\n    switch (wire.type) {\n        case StacksWireType.Address:\n            return serializeAddressBytes(wire);\n        case StacksWireType.Principal:\n            return serializePrincipalBytes(wire);\n        case StacksWireType.LengthPrefixedString:\n            return serializeLPStringBytes(wire);\n        case StacksWireType.MemoString:\n            return serializeMemoStringBytes(wire);\n        case StacksWireType.Asset:\n            return serializeAssetBytes(wire);\n        case StacksWireType.PostCondition:\n            return serializePostConditionWireBytes(wire);\n        case StacksWireType.PublicKey:\n            return serializePublicKeyBytes(wire);\n        case StacksWireType.LengthPrefixedList:\n            return serializeLPListBytes(wire);\n        case StacksWireType.Payload:\n            return serializePayloadBytes(wire);\n        case StacksWireType.TransactionAuthField:\n            return serializeTransactionAuthFieldBytes(wire);\n        case StacksWireType.MessageSignature:\n            return serializeMessageSignatureBytes(wire);\n    }\n}\nexport function deserializeStacksWire(bytesReader, type, listType) {\n    switch (type) {\n        case StacksWireType.Address:\n            return deserializeAddress(bytesReader);\n        case StacksWireType.Principal:\n            return deserializePrincipal(bytesReader);\n        case StacksWireType.LengthPrefixedString:\n            return deserializeLPString(bytesReader);\n        case StacksWireType.MemoString:\n            return deserializeMemoString(bytesReader);\n        case StacksWireType.Asset:\n            return deserializeAsset(bytesReader);\n        case StacksWireType.PostCondition:\n            return deserializePostConditionWire(bytesReader);\n        case StacksWireType.PublicKey:\n            return deserializePublicKey(bytesReader);\n        case StacksWireType.Payload:\n            return deserializePayload(bytesReader);\n        case StacksWireType.LengthPrefixedList:\n            if (!listType) {\n                throw new DeserializationError('No list type specified');\n            }\n            return deserializeLPList(bytesReader, listType);\n        case StacksWireType.MessageSignature:\n            return deserializeMessageSignature(bytesReader);\n        default:\n            throw new Error('Could not recognize StacksWireType');\n    }\n}\nexport function serializeAddress(address) {\n    return bytesToHex(serializeAddressBytes(address));\n}\nexport function serializeAddressBytes(address) {\n    const bytesArray = [];\n    bytesArray.push(hexToBytes(intToHex(address.version, 1)));\n    bytesArray.push(hexToBytes(address.hash160));\n    return concatArray(bytesArray);\n}\nexport function deserializeAddress(serialized) {\n    const bytesReader = isInstance(serialized, BytesReader)\n        ? serialized\n        : new BytesReader(serialized);\n    const version = hexToInt(bytesToHex(bytesReader.readBytes(1)));\n    const data = bytesToHex(bytesReader.readBytes(20));\n    return { type: StacksWireType.Address, version, hash160: data };\n}\nexport function serializePrincipal(principal) {\n    return bytesToHex(serializePrincipalBytes(principal));\n}\nexport function serializePrincipalBytes(principal) {\n    const bytesArray = [];\n    bytesArray.push(principal.prefix);\n    if (principal.prefix === PostConditionPrincipalId.Standard ||\n        principal.prefix === PostConditionPrincipalId.Contract) {\n        bytesArray.push(serializeAddressBytes(principal.address));\n    }\n    if (principal.prefix === PostConditionPrincipalId.Contract) {\n        bytesArray.push(serializeLPStringBytes(principal.contractName));\n    }\n    return concatArray(bytesArray);\n}\nexport function deserializePrincipal(serialized) {\n    const bytesReader = isInstance(serialized, BytesReader)\n        ? serialized\n        : new BytesReader(serialized);\n    const prefix = bytesReader.readUInt8Enum(PostConditionPrincipalId, n => {\n        throw new DeserializationError(`Unexpected Principal payload type: ${n}`);\n    });\n    if (prefix === PostConditionPrincipalId.Origin) {\n        return { type: StacksWireType.Principal, prefix };\n    }\n    const address = deserializeAddress(bytesReader);\n    if (prefix === PostConditionPrincipalId.Standard) {\n        return { type: StacksWireType.Principal, prefix, address };\n    }\n    const contractName = deserializeLPString(bytesReader);\n    return {\n        type: StacksWireType.Principal,\n        prefix,\n        address,\n        contractName,\n    };\n}\nexport function serializeLPString(lps) {\n    return bytesToHex(serializeLPStringBytes(lps));\n}\nexport function serializeLPStringBytes(lps) {\n    const bytesArray = [];\n    const contentBytes = utf8ToBytes(lps.content);\n    const length = contentBytes.byteLength;\n    bytesArray.push(hexToBytes(intToHex(length, lps.lengthPrefixBytes)));\n    bytesArray.push(contentBytes);\n    return concatArray(bytesArray);\n}\nexport function deserializeLPString(serialized, prefixBytes, maxLength) {\n    prefixBytes = prefixBytes ? prefixBytes : 1;\n    const bytesReader = isInstance(serialized, BytesReader)\n        ? serialized\n        : new BytesReader(serialized);\n    const length = hexToInt(bytesToHex(bytesReader.readBytes(prefixBytes)));\n    const content = bytesToUtf8(bytesReader.readBytes(length));\n    return createLPString(content, prefixBytes, maxLength ?? 128);\n}\nexport function serializeMemoString(memoString) {\n    return bytesToHex(serializeMemoStringBytes(memoString));\n}\nexport function serializeMemoStringBytes(memoString) {\n    const bytesArray = [];\n    const contentBytes = utf8ToBytes(memoString.content);\n    const paddedContent = rightPadHexToLength(bytesToHex(contentBytes), MEMO_MAX_LENGTH_BYTES * 2);\n    bytesArray.push(hexToBytes(paddedContent));\n    return concatArray(bytesArray);\n}\nexport function deserializeMemoString(serialized) {\n    const bytesReader = isInstance(serialized, BytesReader)\n        ? serialized\n        : new BytesReader(serialized);\n    let content = bytesToUtf8(bytesReader.readBytes(MEMO_MAX_LENGTH_BYTES));\n    content = content.replace(/\\u0000*$/, '');\n    return { type: StacksWireType.MemoString, content };\n}\nexport function serializeAsset(info) {\n    return bytesToHex(serializeAssetBytes(info));\n}\nexport function serializeAssetBytes(info) {\n    const bytesArray = [];\n    bytesArray.push(serializeAddressBytes(info.address));\n    bytesArray.push(serializeLPStringBytes(info.contractName));\n    bytesArray.push(serializeLPStringBytes(info.assetName));\n    return concatArray(bytesArray);\n}\nexport function deserializeAsset(serialized) {\n    const bytesReader = isInstance(serialized, BytesReader)\n        ? serialized\n        : new BytesReader(serialized);\n    return {\n        type: StacksWireType.Asset,\n        address: deserializeAddress(bytesReader),\n        contractName: deserializeLPString(bytesReader),\n        assetName: deserializeLPString(bytesReader),\n    };\n}\nexport function serializeLPList(lpList) {\n    return bytesToHex(serializeLPListBytes(lpList));\n}\nexport function serializeLPListBytes(lpList) {\n    const list = lpList.values;\n    const bytesArray = [];\n    bytesArray.push(hexToBytes(intToHex(list.length, lpList.lengthPrefixBytes)));\n    for (const l of list) {\n        bytesArray.push(serializeStacksWireBytes(l));\n    }\n    return concatArray(bytesArray);\n}\nexport function deserializeLPList(serialized, type, lengthPrefixBytes) {\n    const bytesReader = isInstance(serialized, BytesReader)\n        ? serialized\n        : new BytesReader(serialized);\n    const length = hexToInt(bytesToHex(bytesReader.readBytes(lengthPrefixBytes || 4)));\n    const l = [];\n    for (let index = 0; index < length; index++) {\n        switch (type) {\n            case StacksWireType.Address:\n                l.push(deserializeAddress(bytesReader));\n                break;\n            case StacksWireType.LengthPrefixedString:\n                l.push(deserializeLPString(bytesReader));\n                break;\n            case StacksWireType.MemoString:\n                l.push(deserializeMemoString(bytesReader));\n                break;\n            case StacksWireType.Asset:\n                l.push(deserializeAsset(bytesReader));\n                break;\n            case StacksWireType.PostCondition:\n                l.push(deserializePostConditionWire(bytesReader));\n                break;\n            case StacksWireType.PublicKey:\n                l.push(deserializePublicKey(bytesReader));\n                break;\n            case StacksWireType.TransactionAuthField:\n                l.push(deserializeTransactionAuthField(bytesReader));\n                break;\n        }\n    }\n    return createLPList(l, lengthPrefixBytes);\n}\nexport function serializePostConditionWire(postCondition) {\n    return bytesToHex(serializePostConditionWireBytes(postCondition));\n}\nexport function serializePostConditionWireBytes(postCondition) {\n    const bytesArray = [];\n    bytesArray.push(postCondition.conditionType);\n    bytesArray.push(serializePrincipalBytes(postCondition.principal));\n    if (postCondition.conditionType === PostConditionType.Fungible ||\n        postCondition.conditionType === PostConditionType.NonFungible) {\n        bytesArray.push(serializeAssetBytes(postCondition.asset));\n    }\n    if (postCondition.conditionType === PostConditionType.NonFungible) {\n        bytesArray.push(serializeCVBytes(postCondition.assetName));\n    }\n    bytesArray.push(postCondition.conditionCode);\n    if (postCondition.conditionType === PostConditionType.STX ||\n        postCondition.conditionType === PostConditionType.Fungible) {\n        if (postCondition.amount > BigInt('0xffffffffffffffff'))\n            throw new SerializationError('The post-condition amount may not be larger than 8 bytes');\n        bytesArray.push(intToBytes(postCondition.amount, 8));\n    }\n    return concatArray(bytesArray);\n}\nexport function deserializePostConditionWire(serialized) {\n    const bytesReader = isInstance(serialized, BytesReader)\n        ? serialized\n        : new BytesReader(serialized);\n    const postConditionType = bytesReader.readUInt8Enum(PostConditionType, n => {\n        throw new DeserializationError(`Could not read ${n} as PostConditionType`);\n    });\n    const principal = deserializePrincipal(bytesReader);\n    let conditionCode;\n    let asset;\n    let amount;\n    switch (postConditionType) {\n        case PostConditionType.STX:\n            conditionCode = bytesReader.readUInt8Enum(FungibleConditionCode, n => {\n                throw new DeserializationError(`Could not read ${n} as FungibleConditionCode`);\n            });\n            amount = BigInt(`0x${bytesToHex(bytesReader.readBytes(8))}`);\n            return {\n                type: StacksWireType.PostCondition,\n                conditionType: PostConditionType.STX,\n                principal,\n                conditionCode,\n                amount,\n            };\n        case PostConditionType.Fungible:\n            asset = deserializeAsset(bytesReader);\n            conditionCode = bytesReader.readUInt8Enum(FungibleConditionCode, n => {\n                throw new DeserializationError(`Could not read ${n} as FungibleConditionCode`);\n            });\n            amount = BigInt(`0x${bytesToHex(bytesReader.readBytes(8))}`);\n            return {\n                type: StacksWireType.PostCondition,\n                conditionType: PostConditionType.Fungible,\n                principal,\n                conditionCode,\n                amount,\n                asset: asset,\n            };\n        case PostConditionType.NonFungible:\n            asset = deserializeAsset(bytesReader);\n            const assetName = deserializeCV(bytesReader);\n            conditionCode = bytesReader.readUInt8Enum(NonFungibleConditionCode, n => {\n                throw new DeserializationError(`Could not read ${n} as FungibleConditionCode`);\n            });\n            return {\n                type: StacksWireType.PostCondition,\n                conditionType: PostConditionType.NonFungible,\n                principal,\n                conditionCode,\n                asset,\n                assetName,\n            };\n    }\n}\nexport function serializePayload(payload) {\n    return bytesToHex(serializePayloadBytes(payload));\n}\nexport function serializePayloadBytes(payload) {\n    const bytesArray = [];\n    bytesArray.push(payload.payloadType);\n    switch (payload.payloadType) {\n        case PayloadType.TokenTransfer:\n            bytesArray.push(serializeCVBytes(payload.recipient));\n            bytesArray.push(intToBytes(payload.amount, 8));\n            bytesArray.push(serializeStacksWireBytes(payload.memo));\n            break;\n        case PayloadType.ContractCall:\n            bytesArray.push(serializeStacksWireBytes(payload.contractAddress));\n            bytesArray.push(serializeStacksWireBytes(payload.contractName));\n            bytesArray.push(serializeStacksWireBytes(payload.functionName));\n            const numArgs = new Uint8Array(4);\n            writeUInt32BE(numArgs, payload.functionArgs.length, 0);\n            bytesArray.push(numArgs);\n            payload.functionArgs.forEach(arg => {\n                bytesArray.push(serializeCVBytes(arg));\n            });\n            break;\n        case PayloadType.SmartContract:\n            bytesArray.push(serializeStacksWireBytes(payload.contractName));\n            bytesArray.push(serializeStacksWireBytes(payload.codeBody));\n            break;\n        case PayloadType.VersionedSmartContract:\n            bytesArray.push(payload.clarityVersion);\n            bytesArray.push(serializeStacksWireBytes(payload.contractName));\n            bytesArray.push(serializeStacksWireBytes(payload.codeBody));\n            break;\n        case PayloadType.PoisonMicroblock:\n            break;\n        case PayloadType.Coinbase:\n            bytesArray.push(payload.coinbaseBytes);\n            break;\n        case PayloadType.CoinbaseToAltRecipient:\n            bytesArray.push(payload.coinbaseBytes);\n            bytesArray.push(serializeCVBytes(payload.recipient));\n            break;\n        case PayloadType.NakamotoCoinbase:\n            bytesArray.push(payload.coinbaseBytes);\n            bytesArray.push(serializeCVBytes(payload.recipient ? someCV(payload.recipient) : noneCV()));\n            bytesArray.push(payload.vrfProof);\n            break;\n        case PayloadType.TenureChange:\n            bytesArray.push(hexToBytes(payload.tenureHash));\n            bytesArray.push(hexToBytes(payload.previousTenureHash));\n            bytesArray.push(hexToBytes(payload.burnViewHash));\n            bytesArray.push(hexToBytes(payload.previousTenureEnd));\n            bytesArray.push(writeUInt32BE(new Uint8Array(4), payload.previousTenureBlocks));\n            bytesArray.push(writeUInt8(new Uint8Array(1), payload.cause));\n            bytesArray.push(hexToBytes(payload.publicKeyHash));\n            break;\n    }\n    return concatArray(bytesArray);\n}\nexport function deserializePayload(serialized) {\n    const bytesReader = isInstance(serialized, BytesReader)\n        ? serialized\n        : new BytesReader(serialized);\n    const payloadType = bytesReader.readUInt8Enum(PayloadType, n => {\n        throw new Error(`Cannot recognize PayloadType: ${n}`);\n    });\n    switch (payloadType) {\n        case PayloadType.TokenTransfer:\n            const recipient = deserializeCV(bytesReader);\n            const amount = intToBigInt(bytesReader.readBytes(8));\n            const memo = deserializeMemoString(bytesReader);\n            return createTokenTransferPayload(recipient, amount, memo);\n        case PayloadType.ContractCall:\n            const contractAddress = deserializeAddress(bytesReader);\n            const contractCallName = deserializeLPString(bytesReader);\n            const functionName = deserializeLPString(bytesReader);\n            const functionArgs = [];\n            const numberOfArgs = bytesReader.readUInt32BE();\n            for (let i = 0; i < numberOfArgs; i++) {\n                const clarityValue = deserializeCV(bytesReader);\n                functionArgs.push(clarityValue);\n            }\n            return createContractCallPayload(contractAddress, contractCallName, functionName, functionArgs);\n        case PayloadType.SmartContract:\n            const smartContractName = deserializeLPString(bytesReader);\n            const codeBody = deserializeLPString(bytesReader, 4, 100000);\n            return createSmartContractPayload(smartContractName, codeBody);\n        case PayloadType.VersionedSmartContract: {\n            const clarityVersion = bytesReader.readUInt8Enum(ClarityVersion, n => {\n                throw new Error(`Cannot recognize ClarityVersion: ${n}`);\n            });\n            const smartContractName = deserializeLPString(bytesReader);\n            const codeBody = deserializeLPString(bytesReader, 4, 100000);\n            return createSmartContractPayload(smartContractName, codeBody, clarityVersion);\n        }\n        case PayloadType.PoisonMicroblock:\n            return createPoisonPayload();\n        case PayloadType.Coinbase: {\n            const coinbaseBytes = bytesReader.readBytes(COINBASE_BYTES_LENGTH);\n            return createCoinbasePayload(coinbaseBytes);\n        }\n        case PayloadType.CoinbaseToAltRecipient: {\n            const coinbaseBytes = bytesReader.readBytes(COINBASE_BYTES_LENGTH);\n            const altRecipient = deserializeCV(bytesReader);\n            return createCoinbasePayload(coinbaseBytes, altRecipient);\n        }\n        case PayloadType.NakamotoCoinbase: {\n            const coinbaseBytes = bytesReader.readBytes(COINBASE_BYTES_LENGTH);\n            const recipient = deserializeCV(bytesReader);\n            const vrfProof = bytesReader.readBytes(VRF_PROOF_BYTES_LENGTH);\n            return createNakamotoCoinbasePayload(coinbaseBytes, recipient, vrfProof);\n        }\n        case PayloadType.TenureChange:\n            const tenureHash = bytesToHex(bytesReader.readBytes(20));\n            const previousTenureHash = bytesToHex(bytesReader.readBytes(20));\n            const burnViewHash = bytesToHex(bytesReader.readBytes(20));\n            const previousTenureEnd = bytesToHex(bytesReader.readBytes(32));\n            const previousTenureBlocks = bytesReader.readUInt32BE();\n            const cause = bytesReader.readUInt8Enum(TenureChangeCause, n => {\n                throw new Error(`Cannot recognize TenureChangeCause: ${n}`);\n            });\n            const publicKeyHash = bytesToHex(bytesReader.readBytes(20));\n            return createTenureChangePayload(tenureHash, previousTenureHash, burnViewHash, previousTenureEnd, previousTenureBlocks, cause, publicKeyHash);\n    }\n}\nexport function deserializeMessageSignature(serialized) {\n    const bytesReader = isInstance(serialized, BytesReader)\n        ? serialized\n        : new BytesReader(serialized);\n    return createMessageSignature(bytesToHex(bytesReader.readBytes(RECOVERABLE_ECDSA_SIG_LENGTH_BYTES)));\n}\nexport function deserializeTransactionAuthField(serialized) {\n    const bytesReader = isInstance(serialized, BytesReader)\n        ? serialized\n        : new BytesReader(serialized);\n    const authFieldType = bytesReader.readUInt8Enum(AuthFieldType, n => {\n        throw new DeserializationError(`Could not read ${n} as AuthFieldType`);\n    });\n    switch (authFieldType) {\n        case AuthFieldType.PublicKeyCompressed:\n            return createTransactionAuthField(PubKeyEncoding.Compressed, deserializePublicKey(bytesReader));\n        case AuthFieldType.PublicKeyUncompressed:\n            return createTransactionAuthField(PubKeyEncoding.Uncompressed, createStacksPublicKey(uncompressPublicKey(deserializePublicKey(bytesReader).data)));\n        case AuthFieldType.SignatureCompressed:\n            return createTransactionAuthField(PubKeyEncoding.Compressed, deserializeMessageSignature(bytesReader));\n        case AuthFieldType.SignatureUncompressed:\n            return createTransactionAuthField(PubKeyEncoding.Uncompressed, deserializeMessageSignature(bytesReader));\n        default:\n            throw new Error(`Unknown auth field type: ${JSON.stringify(authFieldType)}`);\n    }\n}\nexport function serializeMessageSignature(messageSignature) {\n    return bytesToHex(serializeMessageSignatureBytes(messageSignature));\n}\nexport function serializeMessageSignatureBytes(messageSignature) {\n    return hexToBytes(messageSignature.data);\n}\nexport function serializeTransactionAuthField(field) {\n    return bytesToHex(serializeTransactionAuthFieldBytes(field));\n}\nexport function serializeTransactionAuthFieldBytes(field) {\n    const bytesArray = [];\n    switch (field.contents.type) {\n        case StacksWireType.PublicKey:\n            bytesArray.push(field.pubKeyEncoding === PubKeyEncoding.Compressed\n                ? AuthFieldType.PublicKeyCompressed\n                : AuthFieldType.PublicKeyUncompressed);\n            bytesArray.push(hexToBytes(compressPublicKey(field.contents.data)));\n            break;\n        case StacksWireType.MessageSignature:\n            bytesArray.push(field.pubKeyEncoding === PubKeyEncoding.Compressed\n                ? AuthFieldType.SignatureCompressed\n                : AuthFieldType.SignatureUncompressed);\n            bytesArray.push(serializeMessageSignatureBytes(field.contents));\n            break;\n    }\n    return concatArray(bytesArray);\n}\nexport function serializePublicKey(key) {\n    return bytesToHex(serializePublicKeyBytes(key));\n}\nexport function serializePublicKeyBytes(key) {\n    return key.data.slice();\n}\nexport function deserializePublicKey(serialized) {\n    const bytesReader = isInstance(serialized, BytesReader)\n        ? serialized\n        : new BytesReader(serialized);\n    const fieldId = bytesReader.readUInt8();\n    const keyLength = fieldId === 4 ? UNCOMPRESSED_PUBKEY_LENGTH_BYTES : COMPRESSED_PUBKEY_LENGTH_BYTES;\n    return createStacksPublicKey(concatArray([fieldId, bytesReader.readBytes(keyLength)]));\n}\n//# sourceMappingURL=serialization.js.map","import { bytesToHex, concatArray, hexToBytes, intToBigInt, intToBytes, writeUInt16BE, } from '@stacks/common';\nimport { AddressHashMode, AuthType, PubKeyEncoding, RECOVERABLE_ECDSA_SIG_LENGTH_BYTES, } from './constants';\nimport { DeserializationError, SigningError, VerificationError } from './errors';\nimport { createStacksPublicKey, privateKeyToPublic, publicKeyFromSignatureVrs, publicKeyIsCompressed, signWithKey, } from './keys';\nimport { cloneDeep, leftPadHex, txidFromData } from './utils';\nimport { addressFromPublicKeys, createEmptyAddress, createLPList, deserializeLPList, deserializeMessageSignature, serializeLPListBytes, serializeMessageSignatureBytes, StacksWireType, } from './wire';\nexport function emptyMessageSignature() {\n    return {\n        type: StacksWireType.MessageSignature,\n        data: bytesToHex(new Uint8Array(RECOVERABLE_ECDSA_SIG_LENGTH_BYTES)),\n    };\n}\nexport function createSpendingCondition(options) {\n    if ('publicKey' in options) {\n        return createSingleSigSpendingCondition(AddressHashMode.P2PKH, options.publicKey, options.nonce, options.fee);\n    }\n    return createMultiSigSpendingCondition(AddressHashMode.P2SH, options.numSignatures, options.publicKeys, options.nonce, options.fee);\n}\nexport function createSingleSigSpendingCondition(hashMode, pubKey, nonce, fee) {\n    const signer = addressFromPublicKeys(0, hashMode, 1, [createStacksPublicKey(pubKey)]).hash160;\n    const keyEncoding = publicKeyIsCompressed(pubKey)\n        ? PubKeyEncoding.Compressed\n        : PubKeyEncoding.Uncompressed;\n    return {\n        hashMode,\n        signer,\n        nonce: intToBigInt(nonce),\n        fee: intToBigInt(fee),\n        keyEncoding,\n        signature: emptyMessageSignature(),\n    };\n}\nexport function createMultiSigSpendingCondition(hashMode, numSigs, pubKeys, nonce, fee) {\n    const stacksPublicKeys = pubKeys.map(createStacksPublicKey);\n    const signer = addressFromPublicKeys(0, hashMode, numSigs, stacksPublicKeys).hash160;\n    return {\n        hashMode,\n        signer,\n        nonce: intToBigInt(nonce),\n        fee: intToBigInt(fee),\n        fields: [],\n        signaturesRequired: numSigs,\n    };\n}\nexport function isSingleSig(condition) {\n    return 'signature' in condition;\n}\nexport function isSequentialMultiSig(hashMode) {\n    return hashMode === AddressHashMode.P2SH || hashMode === AddressHashMode.P2WSH;\n}\nexport function isNonSequentialMultiSig(hashMode) {\n    return (hashMode === AddressHashMode.P2SHNonSequential ||\n        hashMode === AddressHashMode.P2WSHNonSequential);\n}\nfunction clearCondition(condition) {\n    const cloned = cloneDeep(condition);\n    cloned.nonce = 0;\n    cloned.fee = 0;\n    if (isSingleSig(cloned)) {\n        cloned.signature = emptyMessageSignature();\n    }\n    else {\n        cloned.fields = [];\n    }\n    return {\n        ...cloned,\n        nonce: BigInt(0),\n        fee: BigInt(0),\n    };\n}\nexport function serializeSingleSigSpendingCondition(condition) {\n    return bytesToHex(serializeSingleSigSpendingConditionBytes(condition));\n}\nexport function serializeSingleSigSpendingConditionBytes(condition) {\n    const bytesArray = [\n        condition.hashMode,\n        hexToBytes(condition.signer),\n        intToBytes(condition.nonce, 8),\n        intToBytes(condition.fee, 8),\n        condition.keyEncoding,\n        serializeMessageSignatureBytes(condition.signature),\n    ];\n    return concatArray(bytesArray);\n}\nexport function serializeMultiSigSpendingCondition(condition) {\n    return bytesToHex(serializeMultiSigSpendingConditionBytes(condition));\n}\nexport function serializeMultiSigSpendingConditionBytes(condition) {\n    const bytesArray = [\n        condition.hashMode,\n        hexToBytes(condition.signer),\n        intToBytes(condition.nonce, 8),\n        intToBytes(condition.fee, 8),\n    ];\n    const fields = createLPList(condition.fields);\n    bytesArray.push(serializeLPListBytes(fields));\n    const numSigs = new Uint8Array(2);\n    writeUInt16BE(numSigs, condition.signaturesRequired, 0);\n    bytesArray.push(numSigs);\n    return concatArray(bytesArray);\n}\nexport function deserializeSingleSigSpendingCondition(hashMode, bytesReader) {\n    const signer = bytesToHex(bytesReader.readBytes(20));\n    const nonce = BigInt(`0x${bytesToHex(bytesReader.readBytes(8))}`);\n    const fee = BigInt(`0x${bytesToHex(bytesReader.readBytes(8))}`);\n    const keyEncoding = bytesReader.readUInt8Enum(PubKeyEncoding, n => {\n        throw new DeserializationError(`Could not parse ${n} as PubKeyEncoding`);\n    });\n    if (hashMode === AddressHashMode.P2WPKH && keyEncoding != PubKeyEncoding.Compressed) {\n        throw new DeserializationError('Failed to parse singlesig spending condition: incomaptible hash mode and key encoding');\n    }\n    const signature = deserializeMessageSignature(bytesReader);\n    return {\n        hashMode,\n        signer,\n        nonce,\n        fee,\n        keyEncoding,\n        signature,\n    };\n}\nexport function deserializeMultiSigSpendingCondition(hashMode, bytesReader) {\n    const signer = bytesToHex(bytesReader.readBytes(20));\n    const nonce = BigInt('0x' + bytesToHex(bytesReader.readBytes(8)));\n    const fee = BigInt('0x' + bytesToHex(bytesReader.readBytes(8)));\n    const fields = deserializeLPList(bytesReader, StacksWireType.TransactionAuthField)\n        .values;\n    let haveUncompressed = false;\n    let numSigs = 0;\n    for (const field of fields) {\n        switch (field.contents.type) {\n            case StacksWireType.PublicKey:\n                if (!publicKeyIsCompressed(field.contents.data))\n                    haveUncompressed = true;\n                break;\n            case StacksWireType.MessageSignature:\n                if (field.pubKeyEncoding === PubKeyEncoding.Uncompressed)\n                    haveUncompressed = true;\n                numSigs += 1;\n                if (numSigs === 65536)\n                    throw new VerificationError('Failed to parse multisig spending condition: too many signatures');\n                break;\n        }\n    }\n    const signaturesRequired = bytesReader.readUInt16BE();\n    if (haveUncompressed &&\n        (hashMode === AddressHashMode.P2WSH || hashMode === AddressHashMode.P2WSHNonSequential)) {\n        throw new VerificationError('Uncompressed keys are not allowed in this hash mode');\n    }\n    return {\n        hashMode,\n        signer,\n        nonce,\n        fee,\n        fields,\n        signaturesRequired,\n    };\n}\nexport function serializeSpendingCondition(condition) {\n    return bytesToHex(serializeSpendingConditionBytes(condition));\n}\nexport function serializeSpendingConditionBytes(condition) {\n    if (isSingleSig(condition))\n        return serializeSingleSigSpendingConditionBytes(condition);\n    return serializeMultiSigSpendingConditionBytes(condition);\n}\nexport function deserializeSpendingCondition(bytesReader) {\n    const hashMode = bytesReader.readUInt8Enum(AddressHashMode, n => {\n        throw new DeserializationError(`Could not parse ${n} as AddressHashMode`);\n    });\n    if (hashMode === AddressHashMode.P2PKH || hashMode === AddressHashMode.P2WPKH) {\n        return deserializeSingleSigSpendingCondition(hashMode, bytesReader);\n    }\n    else {\n        return deserializeMultiSigSpendingCondition(hashMode, bytesReader);\n    }\n}\nexport function sigHashPreSign(curSigHash, authType, fee, nonce) {\n    const hashLength = 32 + 1 + 8 + 8;\n    const sigHash = curSigHash +\n        bytesToHex(new Uint8Array([authType])) +\n        bytesToHex(intToBytes(fee, 8)) +\n        bytesToHex(intToBytes(nonce, 8));\n    if (hexToBytes(sigHash).byteLength !== hashLength) {\n        throw Error('Invalid signature hash length');\n    }\n    return txidFromData(hexToBytes(sigHash));\n}\nfunction sigHashPostSign(curSigHash, pubKey, signature) {\n    const hashLength = 32 + 1 + RECOVERABLE_ECDSA_SIG_LENGTH_BYTES;\n    const pubKeyEncoding = publicKeyIsCompressed(pubKey.data)\n        ? PubKeyEncoding.Compressed\n        : PubKeyEncoding.Uncompressed;\n    const sigHash = curSigHash + leftPadHex(pubKeyEncoding.toString(16)) + signature;\n    const sigHashBytes = hexToBytes(sigHash);\n    if (sigHashBytes.byteLength > hashLength) {\n        throw Error('Invalid signature hash length');\n    }\n    return txidFromData(sigHashBytes);\n}\nexport function nextSignature(curSigHash, authType, fee, nonce, privateKey) {\n    const sigHashPre = sigHashPreSign(curSigHash, authType, fee, nonce);\n    const signature = signWithKey(privateKey, sigHashPre);\n    const publicKey = createStacksPublicKey(privateKeyToPublic(privateKey));\n    const nextSigHash = sigHashPostSign(sigHashPre, publicKey, signature);\n    return {\n        nextSig: signature,\n        nextSigHash,\n    };\n}\nexport function nextVerification(initialSigHash, authType, fee, nonce, pubKeyEncoding, signature) {\n    const sigHashPre = sigHashPreSign(initialSigHash, authType, fee, nonce);\n    const publicKey = createStacksPublicKey(publicKeyFromSignatureVrs(sigHashPre, signature, pubKeyEncoding));\n    const nextSigHash = sigHashPostSign(sigHashPre, publicKey, signature);\n    return {\n        pubKey: publicKey,\n        nextSigHash,\n    };\n}\nfunction newInitialSigHash() {\n    const spendingCondition = createSingleSigSpendingCondition(AddressHashMode.P2PKH, '', 0, 0);\n    spendingCondition.signer = createEmptyAddress().hash160;\n    spendingCondition.keyEncoding = PubKeyEncoding.Compressed;\n    spendingCondition.signature = emptyMessageSignature();\n    return spendingCondition;\n}\nfunction verify(condition, initialSigHash, authType) {\n    if (isSingleSig(condition)) {\n        return verifySingleSig(condition, initialSigHash, authType);\n    }\n    else {\n        return verifyMultiSig(condition, initialSigHash, authType);\n    }\n}\nfunction verifySingleSig(condition, initialSigHash, authType) {\n    const { pubKey, nextSigHash } = nextVerification(initialSigHash, authType, condition.fee, condition.nonce, condition.keyEncoding, condition.signature.data);\n    const addrBytes = addressFromPublicKeys(0, condition.hashMode, 1, [pubKey]).hash160;\n    if (addrBytes !== condition.signer)\n        throw new VerificationError(`Signer hash does not equal hash of public key(s): ${addrBytes} != ${condition.signer}`);\n    return nextSigHash;\n}\nfunction verifyMultiSig(condition, initialSigHash, authType) {\n    const publicKeys = [];\n    let curSigHash = initialSigHash;\n    let haveUncompressed = false;\n    let numSigs = 0;\n    for (const field of condition.fields) {\n        switch (field.contents.type) {\n            case StacksWireType.PublicKey:\n                if (!publicKeyIsCompressed(field.contents.data))\n                    haveUncompressed = true;\n                publicKeys.push(field.contents);\n                break;\n            case StacksWireType.MessageSignature:\n                if (field.pubKeyEncoding === PubKeyEncoding.Uncompressed)\n                    haveUncompressed = true;\n                const { pubKey, nextSigHash } = nextVerification(curSigHash, authType, condition.fee, condition.nonce, field.pubKeyEncoding, field.contents.data);\n                if (isSequentialMultiSig(condition.hashMode)) {\n                    curSigHash = nextSigHash;\n                }\n                publicKeys.push(pubKey);\n                numSigs += 1;\n                if (numSigs === 65536)\n                    throw new VerificationError('Too many signatures');\n                break;\n        }\n    }\n    if ((isSequentialMultiSig(condition.hashMode) && numSigs !== condition.signaturesRequired) ||\n        (isNonSequentialMultiSig(condition.hashMode) && numSigs < condition.signaturesRequired))\n        throw new VerificationError('Incorrect number of signatures');\n    if (haveUncompressed &&\n        (condition.hashMode === AddressHashMode.P2WSH ||\n            condition.hashMode === AddressHashMode.P2WSHNonSequential))\n        throw new VerificationError('Uncompressed keys are not allowed in this hash mode');\n    const addrBytes = addressFromPublicKeys(0, condition.hashMode, condition.signaturesRequired, publicKeys).hash160;\n    if (addrBytes !== condition.signer)\n        throw new VerificationError(`Signer hash does not equal hash of public key(s): ${addrBytes} != ${condition.signer}`);\n    return curSigHash;\n}\nexport function createStandardAuth(spendingCondition) {\n    return {\n        authType: AuthType.Standard,\n        spendingCondition,\n    };\n}\nexport function createSponsoredAuth(spendingCondition, sponsorSpendingCondition) {\n    return {\n        authType: AuthType.Sponsored,\n        spendingCondition,\n        sponsorSpendingCondition: sponsorSpendingCondition\n            ? sponsorSpendingCondition\n            : createSingleSigSpendingCondition(AddressHashMode.P2PKH, '0'.repeat(66), 0, 0),\n    };\n}\nexport function intoInitialSighashAuth(auth) {\n    if (auth.spendingCondition) {\n        switch (auth.authType) {\n            case AuthType.Standard:\n                return createStandardAuth(clearCondition(auth.spendingCondition));\n            case AuthType.Sponsored:\n                return createSponsoredAuth(clearCondition(auth.spendingCondition), newInitialSigHash());\n            default:\n                throw new SigningError('Unexpected authorization type for signing');\n        }\n    }\n    throw new Error('Authorization missing SpendingCondition');\n}\nexport function verifyOrigin(auth, initialSigHash) {\n    switch (auth.authType) {\n        case AuthType.Standard:\n            return verify(auth.spendingCondition, initialSigHash, AuthType.Standard);\n        case AuthType.Sponsored:\n            return verify(auth.spendingCondition, initialSigHash, AuthType.Standard);\n        default:\n            throw new SigningError('Invalid origin auth type');\n    }\n}\nexport function setFee(auth, amount) {\n    switch (auth.authType) {\n        case AuthType.Standard:\n            const spendingCondition = {\n                ...auth.spendingCondition,\n                fee: intToBigInt(amount),\n            };\n            return { ...auth, spendingCondition };\n        case AuthType.Sponsored:\n            const sponsorSpendingCondition = {\n                ...auth.sponsorSpendingCondition,\n                fee: intToBigInt(amount),\n            };\n            return { ...auth, sponsorSpendingCondition };\n    }\n}\nexport function getFee(auth) {\n    switch (auth.authType) {\n        case AuthType.Standard:\n            return auth.spendingCondition.fee;\n        case AuthType.Sponsored:\n            return auth.sponsorSpendingCondition.fee;\n    }\n}\nexport function setNonce(auth, nonce) {\n    const spendingCondition = {\n        ...auth.spendingCondition,\n        nonce: intToBigInt(nonce),\n    };\n    return {\n        ...auth,\n        spendingCondition,\n    };\n}\nexport function setSponsorNonce(auth, nonce) {\n    const sponsorSpendingCondition = {\n        ...auth.sponsorSpendingCondition,\n        nonce: intToBigInt(nonce),\n    };\n    return {\n        ...auth,\n        sponsorSpendingCondition,\n    };\n}\nexport function setSponsor(auth, sponsorSpendingCondition) {\n    const sc = {\n        ...sponsorSpendingCondition,\n        nonce: intToBigInt(sponsorSpendingCondition.nonce),\n        fee: intToBigInt(sponsorSpendingCondition.fee),\n    };\n    return {\n        ...auth,\n        sponsorSpendingCondition: sc,\n    };\n}\nexport function serializeAuthorization(auth) {\n    return bytesToHex(serializeAuthorizationBytes(auth));\n}\nexport function serializeAuthorizationBytes(auth) {\n    const bytesArray = [];\n    bytesArray.push(auth.authType);\n    switch (auth.authType) {\n        case AuthType.Standard:\n            bytesArray.push(serializeSpendingConditionBytes(auth.spendingCondition));\n            break;\n        case AuthType.Sponsored:\n            bytesArray.push(serializeSpendingConditionBytes(auth.spendingCondition));\n            bytesArray.push(serializeSpendingConditionBytes(auth.sponsorSpendingCondition));\n            break;\n    }\n    return concatArray(bytesArray);\n}\nexport function deserializeAuthorization(bytesReader) {\n    const authType = bytesReader.readUInt8Enum(AuthType, n => {\n        throw new DeserializationError(`Could not parse ${n} as AuthType`);\n    });\n    let spendingCondition;\n    switch (authType) {\n        case AuthType.Standard:\n            spendingCondition = deserializeSpendingCondition(bytesReader);\n            return createStandardAuth(spendingCondition);\n        case AuthType.Sponsored:\n            spendingCondition = deserializeSpendingCondition(bytesReader);\n            const sponsorSpendingCondition = deserializeSpendingCondition(bytesReader);\n            return createSponsoredAuth(spendingCondition, sponsorSpendingCondition);\n    }\n}\n//# sourceMappingURL=authorization.js.map","import { bytesToHex, concatArray, intToBigInt, isInstance, writeUInt32BE, } from '@stacks/common';\nimport { STACKS_MAINNET, STACKS_TESTNET, TransactionVersion, networkFrom, whenTransactionVersion, } from '@stacks/network';\nimport { serializePayloadBytes } from '.';\nimport { BytesReader } from './BytesReader';\nimport { deserializeAuthorization, intoInitialSighashAuth, isSingleSig, nextSignature, serializeAuthorizationBytes, setFee, setNonce, setSponsor, setSponsorNonce, verifyOrigin, } from './authorization';\nimport { AddressHashMode, AnchorMode, AuthType, PostConditionMode, PubKeyEncoding, RECOVERABLE_ECDSA_SIG_LENGTH_BYTES, } from './constants';\nimport { SerializationError, SigningError } from './errors';\nimport { createStacksPublicKey, privateKeyIsCompressed, publicKeyIsCompressed } from './keys';\nimport { cloneDeep, txidFromData } from './utils';\nimport { StacksWireType, createLPList, createMessageSignature, createTransactionAuthField, deserializeLPList, deserializePayload, serializeLPListBytes, } from './wire';\nexport class StacksTransactionWire {\n    constructor({ auth, payload, postConditions = createLPList([]), postConditionMode = PostConditionMode.Deny, transactionVersion, chainId, network = 'mainnet', }) {\n        network = networkFrom(network);\n        this.transactionVersion = transactionVersion ?? network.transactionVersion;\n        this.chainId = chainId ?? network.chainId;\n        this.auth = auth;\n        if ('amount' in payload) {\n            this.payload = {\n                ...payload,\n                amount: intToBigInt(payload.amount),\n            };\n        }\n        else {\n            this.payload = payload;\n        }\n        this.postConditionMode = postConditionMode;\n        this.postConditions = postConditions;\n        this.anchorMode = AnchorMode.Any;\n    }\n    signBegin() {\n        const tx = cloneDeep(this);\n        tx.auth = intoInitialSighashAuth(tx.auth);\n        return tx.txid();\n    }\n    verifyBegin() {\n        const tx = cloneDeep(this);\n        tx.auth = intoInitialSighashAuth(tx.auth);\n        return tx.txid();\n    }\n    verifyOrigin() {\n        return verifyOrigin(this.auth, this.verifyBegin());\n    }\n    signNextOrigin(sigHash, privateKey) {\n        if (this.auth.spendingCondition === undefined) {\n            throw new Error('\"auth.spendingCondition\" is undefined');\n        }\n        if (this.auth.authType === undefined) {\n            throw new Error('\"auth.authType\" is undefined');\n        }\n        return this.signAndAppend(this.auth.spendingCondition, sigHash, AuthType.Standard, privateKey);\n    }\n    signNextSponsor(sigHash, privateKey) {\n        if (this.auth.authType === AuthType.Sponsored) {\n            return this.signAndAppend(this.auth.sponsorSpendingCondition, sigHash, AuthType.Sponsored, privateKey);\n        }\n        else {\n            throw new Error('\"auth.sponsorSpendingCondition\" is undefined');\n        }\n    }\n    appendPubkey(publicKey) {\n        const wire = typeof publicKey === 'object' && 'type' in publicKey\n            ? publicKey\n            : createStacksPublicKey(publicKey);\n        const cond = this.auth.spendingCondition;\n        if (cond && !isSingleSig(cond)) {\n            const compressed = publicKeyIsCompressed(wire.data);\n            cond.fields.push(createTransactionAuthField(compressed ? PubKeyEncoding.Compressed : PubKeyEncoding.Uncompressed, wire));\n        }\n        else {\n            throw new Error(`Can't append public key to a singlesig condition`);\n        }\n    }\n    signAndAppend(condition, curSigHash, authType, privateKey) {\n        const { nextSig, nextSigHash } = nextSignature(curSigHash, authType, condition.fee, condition.nonce, privateKey);\n        if (isSingleSig(condition)) {\n            condition.signature = createMessageSignature(nextSig);\n        }\n        else {\n            const compressed = privateKeyIsCompressed(privateKey);\n            condition.fields.push(createTransactionAuthField(compressed ? PubKeyEncoding.Compressed : PubKeyEncoding.Uncompressed, createMessageSignature(nextSig)));\n        }\n        return nextSigHash;\n    }\n    txid() {\n        const serialized = this.serializeBytes();\n        return txidFromData(serialized);\n    }\n    setSponsor(sponsorSpendingCondition) {\n        if (this.auth.authType != AuthType.Sponsored) {\n            throw new SigningError('Cannot sponsor sign a non-sponsored transaction');\n        }\n        this.auth = setSponsor(this.auth, sponsorSpendingCondition);\n    }\n    setFee(amount) {\n        this.auth = setFee(this.auth, amount);\n    }\n    setNonce(nonce) {\n        this.auth = setNonce(this.auth, nonce);\n    }\n    setSponsorNonce(nonce) {\n        if (this.auth.authType != AuthType.Sponsored) {\n            throw new SigningError('Cannot sponsor sign a non-sponsored transaction');\n        }\n        this.auth = setSponsorNonce(this.auth, nonce);\n    }\n    serialize() {\n        return bytesToHex(this.serializeBytes());\n    }\n    serializeBytes() {\n        if (this.transactionVersion === undefined) {\n            throw new SerializationError('\"transactionVersion\" is undefined');\n        }\n        if (this.chainId === undefined) {\n            throw new SerializationError('\"chainId\" is undefined');\n        }\n        if (this.auth === undefined) {\n            throw new SerializationError('\"auth\" is undefined');\n        }\n        if (this.payload === undefined) {\n            throw new SerializationError('\"payload\" is undefined');\n        }\n        const bytesArray = [];\n        bytesArray.push(this.transactionVersion);\n        const chainIdBytes = new Uint8Array(4);\n        writeUInt32BE(chainIdBytes, this.chainId, 0);\n        bytesArray.push(chainIdBytes);\n        bytesArray.push(serializeAuthorizationBytes(this.auth));\n        bytesArray.push(this.anchorMode);\n        bytesArray.push(this.postConditionMode);\n        bytesArray.push(serializeLPListBytes(this.postConditions));\n        bytesArray.push(serializePayloadBytes(this.payload));\n        return concatArray(bytesArray);\n    }\n}\nexport function deserializeTransaction(tx) {\n    const bytesReader = isInstance(tx, BytesReader) ? tx : new BytesReader(tx);\n    const transactionVersion = bytesReader.readUInt8Enum(TransactionVersion, n => {\n        throw new Error(`Could not parse ${n} as TransactionVersion`);\n    });\n    const chainId = bytesReader.readUInt32BE();\n    const auth = deserializeAuthorization(bytesReader);\n    const anchorMode = bytesReader.readUInt8Enum(AnchorMode, n => {\n        throw new Error(`Could not parse ${n} as AnchorMode`);\n    });\n    const postConditionMode = bytesReader.readUInt8Enum(PostConditionMode, n => {\n        throw new Error(`Could not parse ${n} as PostConditionMode`);\n    });\n    const postConditions = deserializeLPList(bytesReader, StacksWireType.PostCondition);\n    const payload = deserializePayload(bytesReader);\n    const transaction = new StacksTransactionWire({\n        transactionVersion,\n        chainId,\n        auth,\n        payload,\n        postConditions,\n        postConditionMode,\n    });\n    transaction.anchorMode = anchorMode;\n    return transaction;\n}\nexport function deriveNetworkFromTx(transaction) {\n    return whenTransactionVersion(transaction.transactionVersion)({\n        [TransactionVersion.Mainnet]: STACKS_MAINNET,\n        [TransactionVersion.Testnet]: STACKS_TESTNET,\n    });\n}\nexport function estimateTransactionByteLength(transaction) {\n    const hashMode = transaction.auth.spendingCondition.hashMode;\n    const multiSigHashModes = [AddressHashMode.P2SH, AddressHashMode.P2WSH];\n    if (multiSigHashModes.includes(hashMode)) {\n        const multiSigSpendingCondition = transaction.auth\n            .spendingCondition;\n        const existingSignatures = multiSigSpendingCondition.fields.filter(field => field.contents.type === StacksWireType.MessageSignature).length;\n        const totalSignatureLength = (multiSigSpendingCondition.signaturesRequired - existingSignatures) *\n            (RECOVERABLE_ECDSA_SIG_LENGTH_BYTES + 1);\n        return transaction.serializeBytes().byteLength + totalSignatureLength;\n    }\n    else {\n        return transaction.serializeBytes().byteLength;\n    }\n}\nexport function serializeTransaction(transaction) {\n    return transaction.serialize();\n}\nexport function serializeTransactionBytes(transaction) {\n    return transaction.serializeBytes();\n}\nexport function transactionToHex(transaction) {\n    return transaction.serialize();\n}\n//# sourceMappingURL=transaction.js.map","import { bytesToHex, validateHash256, with0x } from '@stacks/common';\nimport { clientFromNetwork, networkFrom } from '@stacks/network';\nimport { deserializeCV, serializeCV } from './clarity';\nimport { NoEstimateAvailableError } from './errors';\nimport { deriveNetworkFromTx, estimateTransactionByteLength, } from './transaction';\nimport { cvToHex, parseReadOnlyResponse } from './utils';\nimport { serializePayloadBytes } from './wire';\nexport const BROADCAST_PATH = '/v2/transactions';\nexport const TRANSFER_FEE_ESTIMATE_PATH = '/v2/fees/transfer';\nexport const TRANSACTION_FEE_ESTIMATE_PATH = '/v2/fees/transaction';\nexport const ACCOUNT_PATH = '/v2/accounts';\nexport const CONTRACT_ABI_PATH = '/v2/contracts/interface';\nexport const READONLY_FUNCTION_CALL_PATH = '/v2/contracts/call-read';\nexport const MAP_ENTRY_PATH = '/v2/map_entry';\nexport async function broadcastTransaction({ transaction: txOpt, attachment: attachOpt, network: _network, client: _client, }) {\n    const tx = txOpt.serialize();\n    const attachment = attachOpt\n        ? typeof attachOpt === 'string'\n            ? attachOpt\n            : bytesToHex(attachOpt)\n        : undefined;\n    const json = attachOpt ? { tx, attachment } : { tx };\n    const options = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(json),\n    };\n    const network = _network ?? deriveNetworkFromTx(txOpt);\n    const client = Object.assign({}, clientFromNetwork(networkFrom(network)), _client);\n    const url = `${client.baseUrl}${BROADCAST_PATH}`;\n    const response = await client.fetch(url, options);\n    if (!response.ok) {\n        try {\n            return (await response.json());\n        }\n        catch (e) {\n            throw Error('Failed to broadcast transaction (unable to parse node response).', { cause: e });\n        }\n    }\n    const text = await response.text();\n    const txid = text.replace(/[\"]+/g, '');\n    if (!validateHash256(txid))\n        throw new Error(text);\n    return { txid };\n}\nasync function _getNonceApi({ address, network = 'mainnet', client: _client, }) {\n    const client = Object.assign({}, clientFromNetwork(networkFrom(network)), _client);\n    const url = `${client.baseUrl}/extended/v1/address/${address}/nonces`;\n    const response = await client.fetch(url);\n    const result = await response.json();\n    return BigInt(result.possible_next_nonce);\n}\nexport async function fetchNonce(opts) {\n    try {\n        return await _getNonceApi(opts);\n    }\n    catch (e) { }\n    const network = networkFrom(opts.network ?? 'mainnet');\n    const client = Object.assign({}, clientFromNetwork(network), opts.client);\n    const url = `${client.baseUrl}${ACCOUNT_PATH}/${opts.address}?proof=0`;\n    const response = await client.fetch(url);\n    if (!response.ok) {\n        const msg = await response.text().catch(() => '');\n        throw new Error(`Error fetching nonce. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`);\n    }\n    const json = (await response.json());\n    return BigInt(json.nonce);\n}\nexport async function fetchFeeEstimateTransfer({ transaction: txOpt, network: _network, client: _client, }) {\n    const network = _network ?? deriveNetworkFromTx(txOpt);\n    const client = Object.assign({}, clientFromNetwork(networkFrom(network)), _client);\n    const url = `${client.baseUrl}${TRANSFER_FEE_ESTIMATE_PATH}`;\n    const response = await client.fetch(url, {\n        headers: { Accept: 'application/text' },\n    });\n    if (!response.ok) {\n        const msg = await response.text().catch(() => '');\n        throw new Error(`Error estimating transfer fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`);\n    }\n    const feeRateResult = await response.text();\n    const txBytes = BigInt(Math.ceil(txOpt.serializeBytes().byteLength));\n    const feeRate = BigInt(feeRateResult);\n    return feeRate * txBytes;\n}\nexport async function fetchFeeEstimateTransaction({ payload, estimatedLength, network = 'mainnet', client: _client, }) {\n    const json = {\n        transaction_payload: payload,\n        estimated_len: estimatedLength,\n    };\n    const options = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(json),\n    };\n    const client = Object.assign({}, clientFromNetwork(networkFrom(network)), _client);\n    const url = `${client.baseUrl}${TRANSACTION_FEE_ESTIMATE_PATH}`;\n    const response = await client.fetch(url, options);\n    if (!response.ok) {\n        const body = await response.json().catch(() => ({}));\n        if (body?.reason === 'NoEstimateAvailable') {\n            throw new NoEstimateAvailableError(body?.reason_data?.message ?? '');\n        }\n        throw new Error(`Error estimating transaction fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${body}\"`);\n    }\n    const data = await response.json();\n    return data.estimations;\n}\nexport async function fetchFeeEstimate({ transaction: txOpt, network: _network, client: _client, }) {\n    const network = _network ?? deriveNetworkFromTx(txOpt);\n    const client = Object.assign({}, clientFromNetwork(networkFrom(network)), _client);\n    try {\n        const estimatedLength = estimateTransactionByteLength(txOpt);\n        return (await fetchFeeEstimateTransaction({\n            payload: bytesToHex(serializePayloadBytes(txOpt.payload)),\n            estimatedLength,\n            network,\n            client,\n        }))[1].fee;\n    }\n    catch (error) {\n        if (!(error instanceof NoEstimateAvailableError))\n            throw error;\n        return await fetchFeeEstimateTransfer({ transaction: txOpt, network });\n    }\n}\nexport async function fetchAbi({ contractAddress: address, contractName: name, network = 'mainnet', client: _client, }) {\n    const client = Object.assign({}, clientFromNetwork(networkFrom(network)), _client);\n    const url = `${client.baseUrl}${CONTRACT_ABI_PATH}/${address}/${name}`;\n    const response = await client.fetch(url);\n    if (!response.ok) {\n        const msg = await response.text().catch(() => '');\n        throw new Error(`Error fetching contract ABI for contract \"${name}\" at address ${address}. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`);\n    }\n    return JSON.parse(await response.text());\n}\nexport async function fetchCallReadOnlyFunction({ contractName, contractAddress, functionName, functionArgs, senderAddress, network = 'mainnet', client: _client, }) {\n    const json = {\n        sender: senderAddress,\n        arguments: functionArgs.map(arg => cvToHex(arg)),\n    };\n    const options = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(json),\n    };\n    const name = encodeURIComponent(functionName);\n    const client = Object.assign({}, clientFromNetwork(networkFrom(network)), _client);\n    const url = `${client.baseUrl}${READONLY_FUNCTION_CALL_PATH}/${contractAddress}/${contractName}/${name}`;\n    const response = await client.fetch(url, options);\n    if (!response.ok) {\n        const msg = await response.text().catch(() => '');\n        throw new Error(`Error calling read-only function. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`);\n    }\n    return await response.json().then(parseReadOnlyResponse);\n}\nexport async function fetchContractMapEntry({ contractAddress, contractName, mapName, mapKey, network = 'mainnet', client: _client, }) {\n    const keyHex = with0x(serializeCV(mapKey));\n    const options = {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(keyHex),\n    };\n    const client = Object.assign({}, clientFromNetwork(networkFrom(network)), _client);\n    const url = `${client.baseUrl}${MAP_ENTRY_PATH}/${contractAddress}/${contractName}/${mapName}?proof=0`;\n    const response = await client.fetch(url, options);\n    if (!response.ok) {\n        const msg = await response.text().catch(() => '');\n        throw new Error(`Error fetching map entry for map \"${mapName}\" in contract \"${contractName}\" at address ${contractAddress}, using map key \"${keyHex}\". Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`);\n    }\n    const json = await response.json();\n    if (!json.data) {\n        throw new Error(`Error fetching map entry for map \"${mapName}\" in contract \"${contractName}\" at address ${contractAddress}, using map key \"${keyHex}\". Response ${response.status}: ${response.statusText}. Attempted to fetch ${client.baseUrl} and failed with the response: \"${JSON.stringify(json)}\"`);\n    }\n    try {\n        return deserializeCV(json.data);\n    }\n    catch (error) {\n        throw new Error(`Error deserializing Clarity value \"${json.data}\": ${error}`);\n    }\n}\n//# sourceMappingURL=fetch.js.map","import { ClarityType } from './constants';\nimport { asciiToBytes, bytesToAscii, hexToBytes, utf8ToBytes } from '@stacks/common';\nexport function cvToString(val, encoding = 'hex') {\n    switch (val.type) {\n        case ClarityType.BoolTrue:\n            return 'true';\n        case ClarityType.BoolFalse:\n            return 'false';\n        case ClarityType.Int:\n            return val.value.toString();\n        case ClarityType.UInt:\n            return `u${val.value.toString()}`;\n        case ClarityType.Buffer:\n            if (encoding === 'tryAscii') {\n                const str = bytesToAscii(hexToBytes(val.value));\n                if (/[ -~]/.test(str)) {\n                    return JSON.stringify(str);\n                }\n            }\n            return `0x${val.value}`;\n        case ClarityType.OptionalNone:\n            return 'none';\n        case ClarityType.OptionalSome:\n            return `(some ${cvToString(val.value, encoding)})`;\n        case ClarityType.ResponseErr:\n            return `(err ${cvToString(val.value, encoding)})`;\n        case ClarityType.ResponseOk:\n            return `(ok ${cvToString(val.value, encoding)})`;\n        case ClarityType.PrincipalStandard:\n        case ClarityType.PrincipalContract:\n            return val.value;\n        case ClarityType.List:\n            return `(list ${val.value.map(v => cvToString(v, encoding)).join(' ')})`;\n        case ClarityType.Tuple:\n            return `(tuple ${Object.keys(val.value)\n                .map(key => `(${key} ${cvToString(val.value[key], encoding)})`)\n                .join(' ')})`;\n        case ClarityType.StringASCII:\n            return `\"${val.value}\"`;\n        case ClarityType.StringUTF8:\n            return `u\"${val.value}\"`;\n    }\n}\nexport function cvToValue(val, strictJsonCompat = false) {\n    switch (val.type) {\n        case ClarityType.BoolTrue:\n            return true;\n        case ClarityType.BoolFalse:\n            return false;\n        case ClarityType.Int:\n        case ClarityType.UInt:\n            if (strictJsonCompat) {\n                return val.value.toString();\n            }\n            return val.value;\n        case ClarityType.Buffer:\n            return `0x${val.value}`;\n        case ClarityType.OptionalNone:\n            return null;\n        case ClarityType.OptionalSome:\n            return cvToJSON(val.value);\n        case ClarityType.ResponseErr:\n            return cvToJSON(val.value);\n        case ClarityType.ResponseOk:\n            return cvToJSON(val.value);\n        case ClarityType.PrincipalStandard:\n        case ClarityType.PrincipalContract:\n            return val.value;\n        case ClarityType.List:\n            return val.value.map(v => cvToJSON(v));\n        case ClarityType.Tuple:\n            const result = {};\n            Object.keys(val.value).forEach(key => {\n                result[key] = cvToJSON(val.value[key]);\n            });\n            return result;\n        case ClarityType.StringASCII:\n            return val.value;\n        case ClarityType.StringUTF8:\n            return val.value;\n    }\n}\nexport function cvToJSON(val) {\n    switch (val.type) {\n        case ClarityType.ResponseErr:\n            return { type: getCVTypeString(val), value: cvToValue(val, true), success: false };\n        case ClarityType.ResponseOk:\n            return { type: getCVTypeString(val), value: cvToValue(val, true), success: true };\n        default:\n            return { type: getCVTypeString(val), value: cvToValue(val, true) };\n    }\n}\nexport function getCVTypeString(val) {\n    switch (val.type) {\n        case ClarityType.BoolTrue:\n        case ClarityType.BoolFalse:\n            return 'bool';\n        case ClarityType.Int:\n            return 'int';\n        case ClarityType.UInt:\n            return 'uint';\n        case ClarityType.Buffer:\n            return `(buff ${Math.ceil(val.value.length / 2)})`;\n        case ClarityType.OptionalNone:\n            return '(optional none)';\n        case ClarityType.OptionalSome:\n            return `(optional ${getCVTypeString(val.value)})`;\n        case ClarityType.ResponseErr:\n            return `(response UnknownType ${getCVTypeString(val.value)})`;\n        case ClarityType.ResponseOk:\n            return `(response ${getCVTypeString(val.value)} UnknownType)`;\n        case ClarityType.PrincipalStandard:\n        case ClarityType.PrincipalContract:\n            return 'principal';\n        case ClarityType.List:\n            return `(list ${val.value.length} ${val.value.length ? getCVTypeString(val.value[0]) : 'UnknownType'})`;\n        case ClarityType.Tuple:\n            return `(tuple ${Object.keys(val.value)\n                .map(key => `(${key} ${getCVTypeString(val.value[key])})`)\n                .join(' ')})`;\n        case ClarityType.StringASCII:\n            return `(string-ascii ${asciiToBytes(val.value).length})`;\n        case ClarityType.StringUTF8:\n            return `(string-utf8 ${utf8ToBytes(val.value).length})`;\n    }\n}\nexport function isClarityType(input, withType) {\n    return input.type === withType;\n}\n//# sourceMappingURL=clarityValue.js.map","import { hexToBytes, utf8ToBytes } from '@stacks/common';\nimport { ClarityType, bufferCV, bufferCVFromString, contractPrincipalCV, falseCV, getCVTypeString, intCV, noneCV, someCV, standardPrincipalCV, stringAsciiCV, stringUtf8CV, trueCV, uintCV, } from './clarity';\nimport { NotImplementedError } from './errors';\nimport { cloneDeep } from './utils';\nexport var ClarityAbiTypeId;\n(function (ClarityAbiTypeId) {\n    ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeUInt128\"] = 1] = \"ClarityAbiTypeUInt128\";\n    ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeInt128\"] = 2] = \"ClarityAbiTypeInt128\";\n    ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeBool\"] = 3] = \"ClarityAbiTypeBool\";\n    ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypePrincipal\"] = 4] = \"ClarityAbiTypePrincipal\";\n    ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeNone\"] = 5] = \"ClarityAbiTypeNone\";\n    ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeBuffer\"] = 6] = \"ClarityAbiTypeBuffer\";\n    ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeResponse\"] = 7] = \"ClarityAbiTypeResponse\";\n    ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeOptional\"] = 8] = \"ClarityAbiTypeOptional\";\n    ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeTuple\"] = 9] = \"ClarityAbiTypeTuple\";\n    ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeList\"] = 10] = \"ClarityAbiTypeList\";\n    ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeStringAscii\"] = 11] = \"ClarityAbiTypeStringAscii\";\n    ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeStringUtf8\"] = 12] = \"ClarityAbiTypeStringUtf8\";\n    ClarityAbiTypeId[ClarityAbiTypeId[\"ClarityAbiTypeTraitReference\"] = 13] = \"ClarityAbiTypeTraitReference\";\n})(ClarityAbiTypeId || (ClarityAbiTypeId = {}));\nexport const isClarityAbiPrimitive = (val) => typeof val === 'string';\nexport const isClarityAbiBuffer = (val) => val.buffer !== undefined;\nexport const isClarityAbiStringAscii = (val) => val['string-ascii'] !== undefined;\nexport const isClarityAbiStringUtf8 = (val) => val['string-utf8'] !== undefined;\nexport const isClarityAbiResponse = (val) => val.response !== undefined;\nexport const isClarityAbiOptional = (val) => val.optional !== undefined;\nexport const isClarityAbiTuple = (val) => val.tuple !== undefined;\nexport const isClarityAbiList = (val) => val.list !== undefined;\nexport function getTypeUnion(val) {\n    if (isClarityAbiPrimitive(val)) {\n        if (val === 'uint128') {\n            return { id: ClarityAbiTypeId.ClarityAbiTypeUInt128, type: val };\n        }\n        else if (val === 'int128') {\n            return { id: ClarityAbiTypeId.ClarityAbiTypeInt128, type: val };\n        }\n        else if (val === 'bool') {\n            return { id: ClarityAbiTypeId.ClarityAbiTypeBool, type: val };\n        }\n        else if (val === 'principal') {\n            return { id: ClarityAbiTypeId.ClarityAbiTypePrincipal, type: val };\n        }\n        else if (val === 'trait_reference') {\n            return { id: ClarityAbiTypeId.ClarityAbiTypeTraitReference, type: val };\n        }\n        else if (val === 'none') {\n            return { id: ClarityAbiTypeId.ClarityAbiTypeNone, type: val };\n        }\n        else {\n            throw new Error(`Unexpected Clarity ABI type primitive: ${JSON.stringify(val)}`);\n        }\n    }\n    else if (isClarityAbiBuffer(val)) {\n        return { id: ClarityAbiTypeId.ClarityAbiTypeBuffer, type: val };\n    }\n    else if (isClarityAbiResponse(val)) {\n        return { id: ClarityAbiTypeId.ClarityAbiTypeResponse, type: val };\n    }\n    else if (isClarityAbiOptional(val)) {\n        return { id: ClarityAbiTypeId.ClarityAbiTypeOptional, type: val };\n    }\n    else if (isClarityAbiTuple(val)) {\n        return { id: ClarityAbiTypeId.ClarityAbiTypeTuple, type: val };\n    }\n    else if (isClarityAbiList(val)) {\n        return { id: ClarityAbiTypeId.ClarityAbiTypeList, type: val };\n    }\n    else if (isClarityAbiStringAscii(val)) {\n        return { id: ClarityAbiTypeId.ClarityAbiTypeStringAscii, type: val };\n    }\n    else if (isClarityAbiStringUtf8(val)) {\n        return { id: ClarityAbiTypeId.ClarityAbiTypeStringUtf8, type: val };\n    }\n    else {\n        throw new Error(`Unexpected Clarity ABI type: ${JSON.stringify(val)}`);\n    }\n}\nexport function encodeAbiClarityValue(value, type) {\n    const union = type.id\n        ? type\n        : getTypeUnion(type);\n    switch (union.id) {\n        case ClarityAbiTypeId.ClarityAbiTypeUInt128:\n            return uintCV(value);\n        case ClarityAbiTypeId.ClarityAbiTypeInt128:\n            return intCV(value);\n        case ClarityAbiTypeId.ClarityAbiTypeBool:\n            if (value === 'false' || value === '0')\n                return falseCV();\n            else if (value === 'true' || value === '1')\n                return trueCV();\n            else\n                throw new Error(`Unexpected Clarity bool value: ${JSON.stringify(value)}`);\n        case ClarityAbiTypeId.ClarityAbiTypePrincipal:\n            if (value.includes('.')) {\n                const [addr, name] = value.split('.');\n                return contractPrincipalCV(addr, name);\n            }\n            else {\n                return standardPrincipalCV(value);\n            }\n        case ClarityAbiTypeId.ClarityAbiTypeTraitReference:\n            const [addr, name] = value.split('.');\n            return contractPrincipalCV(addr, name);\n        case ClarityAbiTypeId.ClarityAbiTypeNone:\n            return noneCV();\n        case ClarityAbiTypeId.ClarityAbiTypeBuffer:\n            return bufferCV(hexToBytes(value));\n        case ClarityAbiTypeId.ClarityAbiTypeStringAscii:\n            return stringAsciiCV(value);\n        case ClarityAbiTypeId.ClarityAbiTypeStringUtf8:\n            return stringUtf8CV(value);\n        case ClarityAbiTypeId.ClarityAbiTypeOptional:\n            return someCV(encodeAbiClarityValue(value, union.type.optional));\n        case ClarityAbiTypeId.ClarityAbiTypeResponse:\n        case ClarityAbiTypeId.ClarityAbiTypeTuple:\n        case ClarityAbiTypeId.ClarityAbiTypeList:\n            throw new NotImplementedError(`Unsupported encoding for Clarity type: ${union.id}`);\n        default:\n            throw new Error(`Unexpected Clarity type ID: ${JSON.stringify(union)}`);\n    }\n}\nexport function encodeClarityValue(type, value) {\n    const union = type.id\n        ? type\n        : getTypeUnion(type);\n    if (union.id === ClarityAbiTypeId.ClarityAbiTypeBuffer) {\n        return bufferCV(utf8ToBytes(value));\n    }\n    return encodeAbiClarityValue(value, union);\n}\nexport function getTypeString(val) {\n    if (isClarityAbiPrimitive(val)) {\n        if (val === 'int128') {\n            return 'int';\n        }\n        else if (val === 'uint128') {\n            return 'uint';\n        }\n        return val;\n    }\n    else if (isClarityAbiBuffer(val)) {\n        return `(buff ${val.buffer.length})`;\n    }\n    else if (isClarityAbiStringAscii(val)) {\n        return `(string-ascii ${val['string-ascii'].length})`;\n    }\n    else if (isClarityAbiStringUtf8(val)) {\n        return `(string-utf8 ${val['string-utf8'].length})`;\n    }\n    else if (isClarityAbiResponse(val)) {\n        return `(response ${getTypeString(val.response.ok)} ${getTypeString(val.response.error)})`;\n    }\n    else if (isClarityAbiOptional(val)) {\n        return `(optional ${getTypeString(val.optional)})`;\n    }\n    else if (isClarityAbiTuple(val)) {\n        return `(tuple ${val.tuple.map(t => `(${t.name} ${getTypeString(t.type)})`).join(' ')})`;\n    }\n    else if (isClarityAbiList(val)) {\n        return `(list ${val.list.length} ${getTypeString(val.list.type)})`;\n    }\n    else {\n        throw new Error(`Type string unsupported for Clarity type: ${JSON.stringify(val)}`);\n    }\n}\nexport function abiFunctionToString(func) {\n    const access = func.access === 'read_only' ? 'read-only' : func.access;\n    return `(define-${access} (${func.name} ${func.args\n        .map(arg => `(${arg.name} ${getTypeString(arg.type)})`)\n        .join(' ')}))`;\n}\nfunction matchType(cv, abiType) {\n    const union = getTypeUnion(abiType);\n    switch (cv.type) {\n        case ClarityType.BoolTrue:\n        case ClarityType.BoolFalse:\n            return union.id === ClarityAbiTypeId.ClarityAbiTypeBool;\n        case ClarityType.Int:\n            return union.id === ClarityAbiTypeId.ClarityAbiTypeInt128;\n        case ClarityType.UInt:\n            return union.id === ClarityAbiTypeId.ClarityAbiTypeUInt128;\n        case ClarityType.Buffer:\n            return (union.id === ClarityAbiTypeId.ClarityAbiTypeBuffer &&\n                union.type.buffer.length >= Math.ceil(cv.value.length / 2));\n        case ClarityType.StringASCII:\n            return (union.id === ClarityAbiTypeId.ClarityAbiTypeStringAscii &&\n                union.type['string-ascii'].length >= cv.value.length);\n        case ClarityType.StringUTF8:\n            return (union.id === ClarityAbiTypeId.ClarityAbiTypeStringUtf8 &&\n                union.type['string-utf8'].length >= cv.value.length);\n        case ClarityType.OptionalNone:\n            return (union.id === ClarityAbiTypeId.ClarityAbiTypeNone ||\n                union.id === ClarityAbiTypeId.ClarityAbiTypeOptional);\n        case ClarityType.OptionalSome:\n            return (union.id === ClarityAbiTypeId.ClarityAbiTypeOptional &&\n                matchType(cv.value, union.type.optional));\n        case ClarityType.ResponseErr:\n            return (union.id === ClarityAbiTypeId.ClarityAbiTypeResponse &&\n                matchType(cv.value, union.type.response.error));\n        case ClarityType.ResponseOk:\n            return (union.id === ClarityAbiTypeId.ClarityAbiTypeResponse &&\n                matchType(cv.value, union.type.response.ok));\n        case ClarityType.PrincipalContract:\n            return (union.id === ClarityAbiTypeId.ClarityAbiTypePrincipal ||\n                union.id === ClarityAbiTypeId.ClarityAbiTypeTraitReference);\n        case ClarityType.PrincipalStandard:\n            return union.id === ClarityAbiTypeId.ClarityAbiTypePrincipal;\n        case ClarityType.List:\n            return (union.id == ClarityAbiTypeId.ClarityAbiTypeList &&\n                union.type.list.length >= cv.value.length &&\n                cv.value.every(val => matchType(val, union.type.list.type)));\n        case ClarityType.Tuple:\n            if (union.id == ClarityAbiTypeId.ClarityAbiTypeTuple) {\n                const tuple = cloneDeep(cv.value);\n                for (let i = 0; i < union.type.tuple.length; i++) {\n                    const abiTupleEntry = union.type.tuple[i];\n                    const key = abiTupleEntry.name;\n                    const val = tuple[key];\n                    if (val) {\n                        if (!matchType(val, abiTupleEntry.type)) {\n                            return false;\n                        }\n                        delete tuple[key];\n                    }\n                    else {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            else {\n                return false;\n            }\n        default:\n            return false;\n    }\n}\nexport function validateContractCall(payload, abi) {\n    const filtered = abi.functions.filter(fn => fn.name === payload.functionName.content);\n    if (filtered.length === 1) {\n        const abiFunc = filtered[0];\n        const abiArgs = abiFunc.args;\n        if (payload.functionArgs.length !== abiArgs.length) {\n            throw new Error(`Clarity function expects ${abiArgs.length} argument(s) but received ${payload.functionArgs.length}`);\n        }\n        for (let i = 0; i < payload.functionArgs.length; i++) {\n            const payloadArg = payload.functionArgs[i];\n            const abiArg = abiArgs[i];\n            if (!matchType(payloadArg, abiArg.type)) {\n                const argNum = i + 1;\n                throw new Error(`Clarity function \\`${payload.functionName.content}\\` expects argument ${argNum} to be of type ${getTypeString(abiArg.type)}, not ${getCVTypeString(payloadArg)}`);\n            }\n        }\n        return true;\n    }\n    else if (filtered.length === 0) {\n        throw new Error(`ABI doesn't contain a function with the name ${payload.functionName.content}`);\n    }\n    else {\n        throw new Error(`Malformed ABI. Contains multiple functions with the name ${payload.functionName.content}`);\n    }\n}\nexport function parseToCV(input, type) {\n    const typeString = getTypeString(type);\n    if (isClarityAbiPrimitive(type)) {\n        if (type === 'uint128') {\n            return uintCV(input);\n        }\n        else if (type === 'int128') {\n            return intCV(input);\n        }\n        else if (type === 'bool') {\n            if (input.toLowerCase() === 'true') {\n                return trueCV();\n            }\n            else if (input.toLowerCase() === 'false') {\n                return falseCV();\n            }\n            else {\n                throw new Error(`Invalid bool value: ${input}`);\n            }\n        }\n        else if (type === 'principal') {\n            if (input.includes('.')) {\n                const [address, contractName] = input.split('.');\n                return contractPrincipalCV(address, contractName);\n            }\n            else {\n                return standardPrincipalCV(input);\n            }\n        }\n        else {\n            throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n        }\n    }\n    else if (isClarityAbiBuffer(type)) {\n        const inputLength = utf8ToBytes(input).byteLength;\n        if (inputLength > type.buffer.length) {\n            throw new Error(`Input exceeds specified buffer length limit of ${type.buffer.length}`);\n        }\n        return bufferCVFromString(input);\n    }\n    else if (isClarityAbiResponse(type)) {\n        throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n    }\n    else if (isClarityAbiOptional(type)) {\n        throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n    }\n    else if (isClarityAbiTuple(type)) {\n        throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n    }\n    else if (isClarityAbiList(type)) {\n        throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n    }\n    else {\n        throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n    }\n}\n//# sourceMappingURL=contract-abi.js.map","import { FungibleConditionCode, NonFungibleConditionCode, PostConditionMode, PostConditionPrincipalId, PostConditionType, } from './constants';\nimport { StacksWireType, parseAssetString, parsePrincipalString, serializePostConditionWire, } from './wire';\nconst FUNGIBLE_COMPARATOR_MAPPING = {\n    eq: FungibleConditionCode.Equal,\n    gt: FungibleConditionCode.Greater,\n    lt: FungibleConditionCode.Less,\n    gte: FungibleConditionCode.GreaterEqual,\n    lte: FungibleConditionCode.LessEqual,\n};\nconst NON_FUNGIBLE_COMPARATOR_MAPPING = {\n    sent: NonFungibleConditionCode.Sends,\n    'not-sent': NonFungibleConditionCode.DoesNotSend,\n};\nexport function postConditionToWire(postcondition) {\n    switch (postcondition.type) {\n        case 'stx-postcondition':\n            return {\n                type: StacksWireType.PostCondition,\n                conditionType: PostConditionType.STX,\n                principal: postcondition.address === 'origin'\n                    ? { type: StacksWireType.Principal, prefix: PostConditionPrincipalId.Origin }\n                    : parsePrincipalString(postcondition.address),\n                conditionCode: FUNGIBLE_COMPARATOR_MAPPING[postcondition.condition],\n                amount: BigInt(postcondition.amount),\n            };\n        case 'ft-postcondition':\n            return {\n                type: StacksWireType.PostCondition,\n                conditionType: PostConditionType.Fungible,\n                principal: postcondition.address === 'origin'\n                    ? { type: StacksWireType.Principal, prefix: PostConditionPrincipalId.Origin }\n                    : parsePrincipalString(postcondition.address),\n                conditionCode: FUNGIBLE_COMPARATOR_MAPPING[postcondition.condition],\n                amount: BigInt(postcondition.amount),\n                asset: parseAssetString(postcondition.asset),\n            };\n        case 'nft-postcondition':\n            return {\n                type: StacksWireType.PostCondition,\n                conditionType: PostConditionType.NonFungible,\n                principal: postcondition.address === 'origin'\n                    ? { type: StacksWireType.Principal, prefix: PostConditionPrincipalId.Origin }\n                    : parsePrincipalString(postcondition.address),\n                conditionCode: NON_FUNGIBLE_COMPARATOR_MAPPING[postcondition.condition],\n                asset: parseAssetString(postcondition.asset),\n                assetName: postcondition.assetId,\n            };\n        default:\n            throw new Error('Invalid post condition type');\n    }\n}\nexport function postConditionToHex(postcondition) {\n    const wire = postConditionToWire(postcondition);\n    return serializePostConditionWire(wire);\n}\nexport function postConditionModeFrom(mode) {\n    if (typeof mode === 'number')\n        return mode;\n    if (mode === 'allow')\n        return PostConditionMode.Allow;\n    if (mode === 'deny')\n        return PostConditionMode.Deny;\n    throw new Error(`Invalid post condition mode: ${mode}`);\n}\n//# sourceMappingURL=postcondition.js.map","import { isNonSequentialMultiSig, isSequentialMultiSig, isSingleSig, nextVerification, } from './authorization';\nimport { AddressHashMode, AuthType, PubKeyEncoding } from './constants';\nimport { SigningError } from './errors';\nimport { cloneDeep } from './utils';\nimport { StacksWireType } from './wire';\nimport { createStacksPublicKey } from './keys';\nexport class TransactionSigner {\n    constructor(transaction) {\n        this.transaction = transaction;\n        this.sigHash = transaction.signBegin();\n        this.originDone = false;\n        this.checkOversign = true;\n        this.checkOverlap = true;\n        const spendingCondition = transaction.auth.spendingCondition;\n        if (spendingCondition && !isSingleSig(spendingCondition)) {\n            if (spendingCondition.fields.filter(field => field.contents.type === StacksWireType.MessageSignature).length >= spendingCondition.signaturesRequired) {\n                throw new Error('SpendingCondition has more signatures than are expected');\n            }\n            spendingCondition.fields.forEach(field => {\n                if (field.contents.type !== StacksWireType.MessageSignature)\n                    return;\n                const signature = field.contents;\n                const nextVerify = nextVerification(this.sigHash, transaction.auth.authType, spendingCondition.fee, spendingCondition.nonce, PubKeyEncoding.Compressed, signature.data);\n                if (!isNonSequentialMultiSig(spendingCondition.hashMode)) {\n                    this.sigHash = nextVerify.nextSigHash;\n                }\n            });\n        }\n    }\n    static createSponsorSigner(transaction, spendingCondition) {\n        if (transaction.auth.authType != AuthType.Sponsored) {\n            throw new SigningError('Cannot add sponsor to non-sponsored transaction');\n        }\n        const tx = cloneDeep(transaction);\n        tx.setSponsor(spendingCondition);\n        const originSigHash = tx.verifyOrigin();\n        const signer = new this(tx);\n        signer.originDone = true;\n        signer.sigHash = originSigHash;\n        signer.checkOversign = true;\n        signer.checkOverlap = true;\n        return signer;\n    }\n    signOrigin(privateKey) {\n        if (this.checkOverlap && this.originDone) {\n            throw new SigningError('Cannot sign origin after sponsor key');\n        }\n        if (this.transaction.auth === undefined) {\n            throw new SigningError('\"transaction.auth\" is undefined');\n        }\n        if (this.transaction.auth.spendingCondition === undefined) {\n            throw new SigningError('\"transaction.auth.spendingCondition\" is undefined');\n        }\n        const spendingCondition = this.transaction.auth.spendingCondition;\n        if (spendingCondition.hashMode === AddressHashMode.P2SH ||\n            spendingCondition.hashMode === AddressHashMode.P2WSH) {\n            if (this.checkOversign &&\n                spendingCondition.fields.filter(field => field.contents.type === StacksWireType.MessageSignature).length >= spendingCondition.signaturesRequired) {\n                throw new Error('Origin would have too many signatures');\n            }\n        }\n        const nextSighash = this.transaction.signNextOrigin(this.sigHash, privateKey);\n        if (isSingleSig(this.transaction.auth.spendingCondition) ||\n            isSequentialMultiSig(this.transaction.auth.spendingCondition.hashMode)) {\n            this.sigHash = nextSighash;\n        }\n    }\n    appendOrigin(publicKey) {\n        const wire = typeof publicKey === 'object' && 'type' in publicKey\n            ? publicKey\n            : createStacksPublicKey(publicKey);\n        if (this.checkOverlap && this.originDone) {\n            throw Error('Cannot append public key to origin after sponsor key');\n        }\n        if (this.transaction.auth === undefined) {\n            throw new Error('\"transaction.auth\" is undefined');\n        }\n        if (this.transaction.auth.spendingCondition === undefined) {\n            throw new Error('\"transaction.auth.spendingCondition\" is undefined');\n        }\n        this.transaction.appendPubkey(wire);\n    }\n    signSponsor(privateKey) {\n        if (this.transaction.auth === undefined) {\n            throw new SigningError('\"transaction.auth\" is undefined');\n        }\n        if (this.transaction.auth.authType !== AuthType.Sponsored) {\n            throw new SigningError('\"transaction.auth.authType\" is not AuthType.Sponsored');\n        }\n        const nextSighash = this.transaction.signNextSponsor(this.sigHash, privateKey);\n        this.sigHash = nextSighash;\n        this.originDone = true;\n    }\n    getTxInComplete() {\n        return cloneDeep(this.transaction);\n    }\n    resume(transaction) {\n        this.transaction = cloneDeep(transaction);\n        this.sigHash = transaction.signBegin();\n    }\n}\n//# sourceMappingURL=signer.js.map","import { STACKS_MAINNET, clientFromNetwork, networkFrom, } from '@stacks/network';\nimport { c32address } from 'c32check';\nimport { createMultiSigSpendingCondition, createSingleSigSpendingCondition, createSponsoredAuth, createStandardAuth, isSingleSig, } from './authorization';\nimport { AddressHashMode, ClarityVersion, PayloadType, PostConditionMode, } from './constants';\nimport { validateContractCall } from './contract-abi';\nimport { fetchAbi, fetchFeeEstimate, fetchNonce } from './fetch';\nimport { createStacksPublicKey, privateKeyToHex, privateKeyToPublic, publicKeyToAddress, publicKeyToHex, } from './keys';\nimport { postConditionModeFrom, postConditionToWire } from './postcondition';\nimport { TransactionSigner } from './signer';\nimport { StacksTransactionWire, deriveNetworkFromTx } from './transaction';\nimport { omit } from './utils';\nimport { addressFromPublicKeys, createAddress, createContractCallPayload, createLPList, createSmartContractPayload, createTokenTransferPayload, } from './wire';\nexport async function makeUnsignedSTXTokenTransfer(txOptions) {\n    const defaultOptions = {\n        fee: BigInt(0),\n        nonce: BigInt(0),\n        network: STACKS_MAINNET,\n        memo: '',\n        sponsored: false,\n    };\n    const options = Object.assign(defaultOptions, txOptions);\n    options.network = networkFrom(options.network);\n    options.client = Object.assign({}, clientFromNetwork(options.network), txOptions.client);\n    const payload = createTokenTransferPayload(options.recipient, options.amount, options.memo);\n    let spendingCondition = null;\n    if ('publicKey' in options) {\n        spendingCondition = createSingleSigSpendingCondition(AddressHashMode.P2PKH, options.publicKey, options.nonce, options.fee);\n    }\n    else {\n        const hashMode = options.useNonSequentialMultiSig\n            ? AddressHashMode.P2SHNonSequential\n            : AddressHashMode.P2SH;\n        const publicKeys = options.address\n            ? sortPublicKeysForAddress(options.publicKeys.map(publicKeyToHex), options.numSignatures, hashMode, createAddress(options.address).hash160)\n            : options.publicKeys.map(publicKeyToHex);\n        spendingCondition = createMultiSigSpendingCondition(hashMode, options.numSignatures, publicKeys, options.nonce, options.fee);\n    }\n    const authorization = options.sponsored\n        ? createSponsoredAuth(spendingCondition)\n        : createStandardAuth(spendingCondition);\n    const transaction = new StacksTransactionWire({\n        transactionVersion: options.network.transactionVersion,\n        chainId: options.network.chainId,\n        auth: authorization,\n        payload,\n    });\n    if (txOptions.fee == null) {\n        const fee = await fetchFeeEstimate({ transaction, ...options });\n        transaction.setFee(fee);\n    }\n    if (txOptions.nonce == null) {\n        const addressVersion = options.network.addressVersion.singleSig;\n        const address = c32address(addressVersion, transaction.auth.spendingCondition.signer);\n        const txNonce = await fetchNonce({ address, ...options });\n        transaction.setNonce(txNonce);\n    }\n    return transaction;\n}\nexport async function makeSTXTokenTransfer(txOptions) {\n    if ('senderKey' in txOptions) {\n        const publicKey = privateKeyToPublic(txOptions.senderKey);\n        const options = omit(txOptions, 'senderKey');\n        const transaction = await makeUnsignedSTXTokenTransfer({ publicKey, ...options });\n        const privKey = txOptions.senderKey;\n        const signer = new TransactionSigner(transaction);\n        signer.signOrigin(privKey);\n        return transaction;\n    }\n    else {\n        const options = omit(txOptions, 'signerKeys');\n        const transaction = await makeUnsignedSTXTokenTransfer(options);\n        mutatingSignAppendMultiSig(transaction, txOptions.publicKeys.map(publicKeyToHex).slice(), txOptions.signerKeys.map(privateKeyToHex), txOptions.address);\n        return transaction;\n    }\n}\nexport async function makeContractDeploy(txOptions) {\n    if ('senderKey' in txOptions) {\n        const publicKey = privateKeyToPublic(txOptions.senderKey);\n        const options = omit(txOptions, 'senderKey');\n        const transaction = await makeUnsignedContractDeploy({ publicKey, ...options });\n        const privKey = txOptions.senderKey;\n        const signer = new TransactionSigner(transaction);\n        signer.signOrigin(privKey);\n        return transaction;\n    }\n    else {\n        const options = omit(txOptions, 'signerKeys');\n        const transaction = await makeUnsignedContractDeploy(options);\n        mutatingSignAppendMultiSig(transaction, txOptions.publicKeys.map(publicKeyToHex).slice(), txOptions.signerKeys.map(privateKeyToHex), txOptions.address);\n        return transaction;\n    }\n}\nexport async function makeUnsignedContractDeploy(txOptions) {\n    const defaultOptions = {\n        fee: BigInt(0),\n        nonce: BigInt(0),\n        network: STACKS_MAINNET,\n        postConditionMode: PostConditionMode.Deny,\n        sponsored: false,\n        clarityVersion: ClarityVersion.Clarity2,\n    };\n    const options = Object.assign(defaultOptions, txOptions);\n    options.network = networkFrom(options.network);\n    options.client = Object.assign({}, clientFromNetwork(options.network), txOptions.client);\n    options.postConditionMode = postConditionModeFrom(options.postConditionMode);\n    const payload = createSmartContractPayload(options.contractName, options.codeBody, options.clarityVersion);\n    let spendingCondition = null;\n    if ('publicKey' in options) {\n        spendingCondition = createSingleSigSpendingCondition(AddressHashMode.P2PKH, options.publicKey, options.nonce, options.fee);\n    }\n    else {\n        const hashMode = options.useNonSequentialMultiSig\n            ? AddressHashMode.P2SHNonSequential\n            : AddressHashMode.P2SH;\n        const publicKeys = options.address\n            ? sortPublicKeysForAddress(options.publicKeys.map(publicKeyToHex), options.numSignatures, hashMode, createAddress(options.address).hash160)\n            : options.publicKeys.map(publicKeyToHex);\n        spendingCondition = createMultiSigSpendingCondition(hashMode, options.numSignatures, publicKeys, options.nonce, options.fee);\n    }\n    const authorization = options.sponsored\n        ? createSponsoredAuth(spendingCondition)\n        : createStandardAuth(spendingCondition);\n    const postConditions = (options.postConditions ?? []).map(pc => {\n        if (typeof pc.type === 'string')\n            return postConditionToWire(pc);\n        return pc;\n    });\n    const lpPostConditions = createLPList(postConditions);\n    const transaction = new StacksTransactionWire({\n        transactionVersion: options.network.transactionVersion,\n        chainId: options.network.chainId,\n        auth: authorization,\n        payload,\n        postConditions: lpPostConditions,\n        postConditionMode: options.postConditionMode,\n    });\n    if (txOptions.fee === undefined || txOptions.fee === null) {\n        const fee = await fetchFeeEstimate({ transaction, ...options });\n        transaction.setFee(fee);\n    }\n    if (txOptions.nonce === undefined || txOptions.nonce === null) {\n        const addressVersion = options.network.addressVersion.singleSig;\n        const address = c32address(addressVersion, transaction.auth.spendingCondition.signer);\n        const txNonce = await fetchNonce({ address, ...options });\n        transaction.setNonce(txNonce);\n    }\n    return transaction;\n}\nexport async function makeUnsignedContractCall(txOptions) {\n    const defaultOptions = {\n        fee: BigInt(0),\n        nonce: BigInt(0),\n        network: STACKS_MAINNET,\n        postConditionMode: PostConditionMode.Deny,\n        sponsored: false,\n    };\n    const options = Object.assign(defaultOptions, txOptions);\n    options.network = networkFrom(options.network);\n    options.client = Object.assign({}, clientFromNetwork(options.network), options.client);\n    options.postConditionMode = postConditionModeFrom(options.postConditionMode);\n    const payload = createContractCallPayload(options.contractAddress, options.contractName, options.functionName, options.functionArgs);\n    if (options?.validateWithAbi) {\n        let abi;\n        if (typeof options.validateWithAbi === 'boolean') {\n            if (options?.network) {\n                abi = await fetchAbi({ ...options });\n            }\n            else {\n                throw new Error('Network option must be provided in order to validate with ABI');\n            }\n        }\n        else {\n            abi = options.validateWithAbi;\n        }\n        validateContractCall(payload, abi);\n    }\n    let spendingCondition = null;\n    if ('publicKey' in options) {\n        spendingCondition = createSingleSigSpendingCondition(AddressHashMode.P2PKH, options.publicKey, options.nonce, options.fee);\n    }\n    else {\n        const hashMode = options.useNonSequentialMultiSig\n            ? AddressHashMode.P2SHNonSequential\n            : AddressHashMode.P2SH;\n        const publicKeys = options.address\n            ? sortPublicKeysForAddress(options.publicKeys.map(publicKeyToHex), options.numSignatures, hashMode, createAddress(options.address).hash160)\n            : options.publicKeys.map(publicKeyToHex);\n        spendingCondition = createMultiSigSpendingCondition(hashMode, options.numSignatures, publicKeys, options.nonce, options.fee);\n    }\n    const authorization = options.sponsored\n        ? createSponsoredAuth(spendingCondition)\n        : createStandardAuth(spendingCondition);\n    const postConditions = (options.postConditions ?? []).map(pc => {\n        if (typeof pc.type === 'string')\n            return postConditionToWire(pc);\n        return pc;\n    });\n    const lpPostConditions = createLPList(postConditions);\n    const transaction = new StacksTransactionWire({\n        transactionVersion: options.network.transactionVersion,\n        chainId: options.network.chainId,\n        auth: authorization,\n        payload,\n        postConditions: lpPostConditions,\n        postConditionMode: options.postConditionMode,\n    });\n    if (txOptions.fee === undefined || txOptions.fee === null) {\n        const fee = await fetchFeeEstimate({ transaction, ...options });\n        transaction.setFee(fee);\n    }\n    if (txOptions.nonce === undefined || txOptions.nonce === null) {\n        const addressVersion = options.network.addressVersion.singleSig;\n        const address = c32address(addressVersion, transaction.auth.spendingCondition.signer);\n        const txNonce = await fetchNonce({ address, ...options });\n        transaction.setNonce(txNonce);\n    }\n    return transaction;\n}\nexport async function makeContractCall(txOptions) {\n    if ('senderKey' in txOptions) {\n        const publicKey = privateKeyToPublic(txOptions.senderKey);\n        const options = omit(txOptions, 'senderKey');\n        const transaction = await makeUnsignedContractCall({ publicKey, ...options });\n        const privKey = txOptions.senderKey;\n        const signer = new TransactionSigner(transaction);\n        signer.signOrigin(privKey);\n        return transaction;\n    }\n    else {\n        const options = omit(txOptions, 'signerKeys');\n        const transaction = await makeUnsignedContractCall(options);\n        mutatingSignAppendMultiSig(transaction, txOptions.publicKeys.map(publicKeyToHex).slice(), txOptions.signerKeys.map(privateKeyToHex), txOptions.address);\n        return transaction;\n    }\n}\nexport async function sponsorTransaction(sponsorOptions) {\n    const defaultOptions = {\n        fee: 0,\n        sponsorNonce: 0,\n        sponsorAddressHashmode: AddressHashMode.P2PKH,\n        network: deriveNetworkFromTx(sponsorOptions.transaction),\n    };\n    const options = Object.assign(defaultOptions, sponsorOptions);\n    options.network = networkFrom(options.network);\n    options.client = Object.assign({}, clientFromNetwork(options.network), options.client);\n    const sponsorPubKey = privateKeyToPublic(options.sponsorPrivateKey);\n    if (sponsorOptions.fee == null) {\n        let txFee = 0;\n        switch (options.transaction.payload.payloadType) {\n            case PayloadType.TokenTransfer:\n            case PayloadType.SmartContract:\n            case PayloadType.VersionedSmartContract:\n            case PayloadType.ContractCall:\n                txFee = BigInt(await fetchFeeEstimate({ ...options }));\n                break;\n            default:\n                throw new Error(`Sponsored transactions not supported for transaction type ${PayloadType[options.transaction.payload.payloadType]}`);\n        }\n        options.transaction.setFee(txFee);\n        options.fee = txFee;\n    }\n    if (sponsorOptions.sponsorNonce == null) {\n        const addressVersion = options.network.addressVersion.singleSig;\n        const address = publicKeyToAddress(addressVersion, sponsorPubKey);\n        const sponsorNonce = await fetchNonce({ address, ...options });\n        options.sponsorNonce = sponsorNonce;\n    }\n    const sponsorSpendingCondition = createSingleSigSpendingCondition(options.sponsorAddressHashmode, sponsorPubKey, options.sponsorNonce, options.fee);\n    options.transaction.setSponsor(sponsorSpendingCondition);\n    const privKey = options.sponsorPrivateKey;\n    const signer = TransactionSigner.createSponsorSigner(options.transaction, sponsorSpendingCondition);\n    signer.signSponsor(privKey);\n    return signer.transaction;\n}\nfunction mutatingSignAppendMultiSig(transaction, publicKeys, signerKeys, address) {\n    if (isSingleSig(transaction.auth.spendingCondition)) {\n        throw new Error('Transaction is not a multi-sig transaction');\n    }\n    const signer = new TransactionSigner(transaction);\n    const pubs = address\n        ? sortPublicKeysForAddress(publicKeys, transaction.auth.spendingCondition.signaturesRequired, transaction.auth.spendingCondition.hashMode, createAddress(address).hash160)\n        : publicKeys;\n    for (const publicKey of pubs) {\n        const signerKey = signerKeys.find(key => privateKeyToPublic(key) === publicKey);\n        if (signerKey) {\n            signer.signOrigin(signerKey);\n        }\n        else {\n            signer.appendOrigin(publicKey);\n        }\n    }\n}\nfunction sortPublicKeysForAddress(publicKeys, numSigs, hashMode, hash) {\n    const hashUnsorted = addressFromPublicKeys(0, hashMode, numSigs, publicKeys.map(createStacksPublicKey)).hash160;\n    if (hashUnsorted === hash)\n        return publicKeys;\n    const publicKeysSorted = publicKeys.slice().sort();\n    const hashSorted = addressFromPublicKeys(0, hashMode, numSigs, publicKeysSorted.map(createStacksPublicKey)).hash160;\n    if (hashSorted === hash)\n        return publicKeysSorted;\n    throw new Error('Failed to find matching multi-sig address given public-keys.');\n}\n//# sourceMappingURL=builders.js.map","/** Address versions corresponding to pox.clar, pox-2.clar */\nexport enum PoXAddressVersion {\n  /** (b58/legacy) p2pkh address, and `hashbytes` is the 20-byte hash160 of a single public key */\n  P2PKH = 0x00,\n  /** (b58/legacy) p2sh address, and `hashbytes` is the 20-byte hash160 of a redeemScript script */\n  P2SH = 0x01,\n  /** (b58/legacy) p2wpkh-p2sh address, and `hashbytes` is the 20-byte hash160 of a p2wpkh witness script */\n  P2SHP2WPKH = 0x02, // likely unused, as indistinguishable from P2SH\n  /** (b58/legacy) p2wsh-p2sh address, and `hashbytes` is the 20-byte hash160 of a p2wsh witness script */\n  P2SHP2WSH = 0x03, // likely unused, as indistinguishable from P2SH\n  /** (bech32/segwit) p2wpkh address, and `hashbytes` is the 20-byte hash160 of the witness script */\n  P2WPKH = 0x04,\n  /** (bech32/segwit) p2wsh address, and `hashbytes` is the 32-byte sha256 of the witness script */\n  P2WSH = 0x05,\n  /** (bech32/segwit) p2tr address, and `hashbytes` is the 32-byte sha256 of the witness script */\n  P2TR = 0x06,\n}\n\n/** @ignore */\nexport const BitcoinNetworkVersion = {\n  mainnet: {\n    P2PKH: 0x00, // 0\n    P2SH: 0x05, // 5\n  },\n  testnet: {\n    P2PKH: 0x6f, // 111\n    P2SH: 0xc4, // 196\n  },\n  devnet: {\n    // equivalent to testnet for our purposes\n    P2PKH: 0x6f, // 111\n    P2SH: 0xc4, // 196\n  },\n  mocknet: {\n    // equivalent to testnet for our purposes\n    P2PKH: 0x6f, // 111\n    P2SH: 0xc4, // 196\n  },\n} as const;\n\n/**\n * Valid prefix chars for mainnet and testnet P2PKH and P2SH addresses\n *  mainnet P2PKH: 1\n *  testnet P2PKH: m or n\n *  mainnet P2SH: 3\n *  testnet P2SH: 2\n * @ignore\n */\nexport const B58_ADDR_PREFIXES = /^(1|3|m|n|2)/;\n\n/**\n * Valid prefixes for supported segwit address, structure is:\n * HRP PREFIX + SEPARATOR (always '1') + C32_ENCODED SEGWIT_VERSION_BYTE ('q' for 0, 'p' for 1) + HASHDATA\n * @ignore\n */\nexport const SEGWIT_V0_ADDR_PREFIX = /^(bc1q|tb1q|bcrt1q)/i;\nexport const SEGWIT_V1_ADDR_PREFIX = /^(bc1p|tb1p|bcrt1p)/i;\n\n/**\n * Segwit Human-Readable Parts\n * Valid prefixs for mainnet and testnet bech32/segwit addresses\n * @ignore\n */\nexport const SegwitPrefix = {\n  mainnet: 'bc',\n  testnet: 'tb',\n  devnet: 'bcrt',\n  mocknet: 'bcrt',\n} as const;\n/** @ignore */\nexport const SEGWIT_ADDR_PREFIXES = /^(bc|tb)/i;\n\n/** @ignore */\nexport const SEGWIT_V0 = 0;\n/** @ignore */\nexport const SEGWIT_V1 = 1;\n\n// Segwit/taproot address examples:\n//   mainnet P2WPKH: bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4\n//   testnet P2WPKH: tb1qw508d6qejxtdg4y5r3zarvary0c5xw7kxpjzsx\n//   mainnet P2WSH: bc1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3qccfmv3\n//   testnet P2WSH: tb1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3q0sl5k7\n//   mainnet P2TR: bc1p5d7rjq7g6rdk2yhzks9smlaqtedr4dekq08ge8ztwac72sfr9rusxg3297\n//   testnet P2TR: tb1p6h5fuzmnvpdthf5shf0qqjzwy7wsqc5rhmgq2ks9xrak4ry6mtrscsqvzp\n\n/**\n * Transitional periods from the 2.1 launch\n * @see SIP-015\n */\nexport enum PoxOperationPeriod {\n  /** Period 1: This is before the 2.1 fork. */\n  Period1 = 'Period1',\n  /** Period 2a: This is after the 2.1 fork, but before v1_unlock_height. */\n  Period2a = 'Period2a', //\n  /** Period 2b: This is after the 2.1 fork, after v1_unlock_height, but before the first PoX-2 reward cycle. */\n  Period2b = 'Period2b',\n  /** Period 3: This is after the first PoX-2 reward cycle has begun. The original PoX contract state will no longer have any impact on reward sets. */\n  Period3 = 'Period3',\n}\n\nexport enum StackingErrors {\n  // taken from https://github.com/stacks-network/stacks-blockchain/blob/088ff00761b27a12bfaf19dab5743e77e8ca4d0c/src/chainstate/stacks/boot/pox-3.clar\n  ERR_STACKING_UNREACHABLE = 255,\n  ERR_STACKING_CORRUPTED_STATE = 254,\n  ERR_STACKING_INSUFFICIENT_FUNDS = 1,\n  ERR_STACKING_INVALID_LOCK_PERIOD = 2,\n  ERR_STACKING_ALREADY_STACKED = 3,\n  ERR_STACKING_NO_SUCH_PRINCIPAL = 4,\n  ERR_STACKING_EXPIRED = 5,\n  ERR_STACKING_STX_LOCKED = 6,\n  ERR_STACKING_PERMISSION_DENIED = 9,\n  ERR_STACKING_THRESHOLD_NOT_MET = 11,\n  ERR_STACKING_POX_ADDRESS_IN_USE = 12,\n  ERR_STACKING_INVALID_POX_ADDRESS = 13,\n  ERR_STACKING_ALREADY_REJECTED = 17,\n  ERR_STACKING_INVALID_AMOUNT = 18,\n  ERR_NOT_ALLOWED = 19,\n  ERR_STACKING_ALREADY_DELEGATED = 20,\n  ERR_DELEGATION_EXPIRES_DURING_LOCK = 21,\n  ERR_DELEGATION_TOO_MUCH_LOCKED = 22,\n  ERR_DELEGATION_POX_ADDR_REQUIRED = 23,\n  ERR_INVALID_START_BURN_HEIGHT = 24,\n  ERR_NOT_CURRENT_STACKER = 25,\n  ERR_STACK_EXTEND_NOT_LOCKED = 26,\n  ERR_STACK_INCREASE_NOT_LOCKED = 27,\n  ERR_DELEGATION_NO_REWARD_SLOT = 28,\n  ERR_DELEGATION_WRONG_REWARD_SLOT = 29,\n  ERR_STACKING_IS_DELEGATED = 30,\n  ERR_STACKING_NOT_DELEGATED = 31,\n}\n","/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nexport function assertNumber(n) {\n    if (!Number.isSafeInteger(n))\n        throw new Error(`Wrong integer: ${n}`);\n}\nfunction chain(...args) {\n    const wrap = (a, b) => (c) => a(b(c));\n    const encode = Array.from(args)\n        .reverse()\n        .reduce((acc, i) => (acc ? wrap(acc, i.encode) : i.encode), undefined);\n    const decode = args.reduce((acc, i) => (acc ? wrap(acc, i.decode) : i.decode), undefined);\n    return { encode, decode };\n}\nfunction alphabet(alphabet) {\n    return {\n        encode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('alphabet.encode input should be an array of numbers');\n            return digits.map((i) => {\n                assertNumber(i);\n                if (i < 0 || i >= alphabet.length)\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n                return alphabet[i];\n            });\n        },\n        decode: (input) => {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('alphabet.decode input should be array of strings');\n            return input.map((letter) => {\n                if (typeof letter !== 'string')\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\n                const index = alphabet.indexOf(letter);\n                if (index === -1)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n                return index;\n            });\n        },\n    };\n}\nfunction join(separator = '') {\n    if (typeof separator !== 'string')\n        throw new Error('join separator should be string');\n    return {\n        encode: (from) => {\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\n                throw new Error('join.encode input should be array of strings');\n            for (let i of from)\n                if (typeof i !== 'string')\n                    throw new Error(`join.encode: non-string input=${i}`);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            if (typeof to !== 'string')\n                throw new Error('join.decode input should be string');\n            return to.split(separator);\n        },\n    };\n}\nfunction padding(bits, chr = '=') {\n    assertNumber(bits);\n    if (typeof chr !== 'string')\n        throw new Error('padding chr should be string');\n    return {\n        encode(data) {\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of data)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.encode: non-string input=${i}`);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of input)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.decode: non-string input=${i}`);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('Invalid padding: string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                if (!(((end - 1) * bits) % 8))\n                    throw new Error('Invalid padding: string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\nfunction normalize(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('normalize fn should be function');\n    return { encode: (from) => from, decode: (to) => fn(to) };\n}\nfunction convertRadix(data, from, to) {\n    if (from < 2)\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n    if (!Array.isArray(data))\n        throw new Error('convertRadix: data should be array');\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data);\n    digits.forEach((d) => {\n        assertNumber(d);\n        if (d < 0 || d >= from)\n            throw new Error(`Wrong integer: ${d}`);\n    });\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < digits.length; i++) {\n            const digit = digits[i];\n            const digitBase = from * carry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                (from * carry) / from !== carry ||\n                digitBase - digit !== from * carry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            carry = digitBase % to;\n            digits[i] = Math.floor(digitBase / to);\n            if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!digits[i])\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = (a, b) => (!b ? a : gcd(b, a % b));\nconst radix2carry = (from, to) => from + (to - gcd(from, to));\nfunction convertRadix2(data, from, to, padding) {\n    if (!Array.isArray(data))\n        throw new Error('convertRadix2: data should be array');\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0;\n    const mask = 2 ** to - 1;\n    const res = [];\n    for (const n of data) {\n        assertNumber(n);\n        if (n >= 2 ** from)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        carry &= 2 ** pos - 1;\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\nfunction radix(num) {\n    assertNumber(num);\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix.decode input should be array of strings');\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n        },\n    };\n}\nfunction radix2(bits, revPadding = false) {\n    assertNumber(bits);\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix2.decode input should be array of strings');\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\nfunction unsafeWrapper(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('unsafeWrapper fn should be function');\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\nfunction checksum(len, fn) {\n    assertNumber(len);\n    if (typeof fn !== 'function')\n        throw new Error('checksum fn should be function');\n    return {\n        encode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const checksum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(checksum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const newChecksum = fn(payload).slice(0, len);\n            const oldChecksum = data.slice(-len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\nexport const utils = { alphabet, chain, checksum, radix, radix2, join, padding };\nexport const base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexport const base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexport const base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexport const base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nexport const base64 = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nexport const base64url = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\nexport const base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexport const base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexport const base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nexport const base58xmr = {\n    encode(data) {\n        let res = '';\n        for (let i = 0; i < data.length; i += 8) {\n            const block = data.subarray(i, i + 8);\n            res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n        }\n        return res;\n    },\n    decode(str) {\n        let res = [];\n        for (let i = 0; i < str.length; i += 11) {\n            const slice = str.slice(i, i + 11);\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n            const block = base58.decode(slice);\n            for (let j = 0; j < block.length - blockLen; j++) {\n                if (block[j] !== 0)\n                    throw new Error('base58xmr: wrong padding');\n            }\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\n        }\n        return Uint8Array.from(res);\n    },\n};\nexport const base58check = (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), base58);\nconst BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        if (typeof prefix !== 'string')\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n        const actualLength = prefix.length + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        prefix = prefix.toLowerCase();\n        return `${prefix}1${BECH_ALPHABET.encode(words)}${bechChecksum(prefix, words, ENCODING_CONST)}`;\n    }\n    function decode(str, limit = 90) {\n        if (typeof str !== 'string')\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n        if (str.length < 8 || (limit !== false && str.length > limit))\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        str = lowered;\n        const sepIndex = str.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = str.slice(0, sepIndex);\n        const _words = str.slice(sepIndex + 1);\n        if (_words.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(_words).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!_words.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\n}\nexport const bech32 = genBech32('bech32');\nexport const bech32m = genBech32('bech32m');\nexport const utf8 = {\n    encode: (data) => new TextDecoder().decode(data),\n    decode: (str) => new TextEncoder().encode(str),\n};\nexport const hex = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\n    if (typeof s !== 'string' || s.length % 2)\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n    return s.toLowerCase();\n}));\nconst CODERS = {\n    utf8, hex, base16, base32, base64, base64url, base58, base58xmr\n};\nconst coderTypeError = `Invalid encoding type. Available types: ${Object.keys(CODERS).join(', ')}`;\nexport const bytesToString = (type, bytes) => {\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (!(bytes instanceof Uint8Array))\n        throw new TypeError('bytesToString() expects Uint8Array');\n    return CODERS[type].encode(bytes);\n};\nexport const str = bytesToString;\nexport const stringToBytes = (type, str) => {\n    if (!CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (typeof str !== 'string')\n        throw new TypeError('stringToBytes() expects string');\n    return CODERS[type].decode(str);\n};\nexport const bytes = stringToBytes;\n","import { hmac } from '@noble/hashes/hmac';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { getPublicKey as nobleGetPublicKey, signSync, utils } from '@noble/secp256k1';\nimport { bytesToHex, concatBytes, hexToBytes, privateKeyToBytes, readUInt8, } from '@stacks/common';\nimport base58 from 'bs58';\nimport { hashRipemd160 } from './hashRipemd160';\nimport { hashSha256Sync } from './sha2Hash';\nconst BITCOIN_PUBKEYHASH = 0x00;\nutils.hmacSha256Sync = (key, ...msgs) => {\n    const h = hmac.create(sha256, key);\n    msgs.forEach(msg => h.update(msg));\n    return h.digest();\n};\nexport function makeECPrivateKey() {\n    return bytesToHex(utils.randomPrivateKey());\n}\nexport function base58CheckDecode(btcAddress) {\n    const bytes = base58.decode(btcAddress);\n    const payload = bytes.slice(0, -4);\n    const checksum = bytes.slice(-4);\n    const newChecksum = sha256(sha256(payload));\n    if ((checksum[0] ^ newChecksum[0]) |\n        (checksum[1] ^ newChecksum[1]) |\n        (checksum[2] ^ newChecksum[2]) |\n        (checksum[3] ^ newChecksum[3])) {\n        throw new Error('Invalid checksum');\n    }\n    if (payload.length !== 21)\n        throw new TypeError('Invalid address length');\n    const version = readUInt8(payload, 0);\n    const hash = payload.slice(1);\n    return { version, hash };\n}\nexport function base58Encode(hash) {\n    const checksum = sha256(sha256(hash));\n    return base58.encode(concatBytes(hash, checksum).slice(0, hash.length + 4));\n}\nexport function base58CheckEncode(version, hash) {\n    return base58Encode(concatBytes(new Uint8Array([version]), hash.slice(0, 20)));\n}\nexport function publicKeyToBtcAddress(publicKey, version = BITCOIN_PUBKEYHASH) {\n    const publicKeyBytes = typeof publicKey === 'string' ? hexToBytes(publicKey) : publicKey;\n    const publicKeyHash160 = hashRipemd160(hashSha256Sync(publicKeyBytes));\n    return base58CheckEncode(version, publicKeyHash160);\n}\nexport function getPublicKeyFromPrivate(privateKey) {\n    const privateKeyBytes = privateKeyToBytes(privateKey);\n    return bytesToHex(nobleGetPublicKey(privateKeyBytes.slice(0, 32), true));\n}\nexport function ecSign(messageHash, privateKey) {\n    return signSync(messageHash, privateKeyToBytes(privateKey).slice(0, 32), {\n        der: false,\n    });\n}\n//# sourceMappingURL=keys.js.map","import { readUInt16LE, readUInt32LE, readUInt8, writeUInt16LE, writeUInt32LE, writeUInt8, } from '@stacks/common';\nconst MAX_SAFE_INTEGER = 9007199254740991;\nfunction ensureUInt53(n) {\n    if (n < 0 || n > MAX_SAFE_INTEGER || n % 1 !== 0)\n        throw new RangeError('value out of range');\n}\nexport function encode(number, bytes, offset = 0) {\n    ensureUInt53(number);\n    if (!bytes)\n        bytes = new Uint8Array(encodingLength(number));\n    if (number < 0xfd) {\n        writeUInt8(bytes, number, offset);\n    }\n    else if (number <= 65535) {\n        writeUInt8(bytes, 0xfd, offset);\n        writeUInt16LE(bytes, number, offset + 1);\n    }\n    else if (number <= 4294967295) {\n        writeUInt8(bytes, 0xfe, offset);\n        writeUInt32LE(bytes, number, offset + 1);\n    }\n    else {\n        writeUInt8(bytes, 0xff, offset);\n        writeUInt32LE(bytes, number >>> 0, offset + 1);\n        writeUInt32LE(bytes, (number / 4294967296) | 0, offset + 5);\n    }\n    return bytes;\n}\nexport function decode(bytes, offset = 0) {\n    const first = readUInt8(bytes, offset);\n    if (first < 0xfd) {\n        return first;\n    }\n    else if (first === 0xfd) {\n        return readUInt16LE(bytes, offset + 1);\n    }\n    else if (first === 0xfe) {\n        return readUInt32LE(bytes, offset + 1);\n    }\n    else {\n        const lo = readUInt32LE(bytes, offset + 1);\n        const hi = readUInt32LE(bytes, offset + 5);\n        const number = hi * 4294967296 + lo;\n        ensureUInt53(number);\n        return number;\n    }\n}\nexport function encodingLength(number) {\n    ensureUInt53(number);\n    return number < 0xfd ? 1 : number <= 65535 ? 3 : number <= 4294967295 ? 5 : 9;\n}\n//# sourceMappingURL=varuint.js.map","import { sha256 } from '@noble/hashes/sha256';\nimport { concatBytes, utf8ToBytes } from '@stacks/common';\nimport { decode, encode, encodingLength } from './varuint';\nconst chainPrefix = '\\x17Stacks Signed Message:\\n';\nexport function hashMessage(message, prefix = chainPrefix) {\n    return sha256(encodeMessage(message, prefix));\n}\nexport function encodeMessage(message, prefix = chainPrefix) {\n    const messageBytes = typeof message == 'string' ? utf8ToBytes(message) : message;\n    const encodedLength = encode(messageBytes.length);\n    return concatBytes(utf8ToBytes(prefix), encodedLength, messageBytes);\n}\nexport function decodeMessage(encodedMessage, prefix = chainPrefix) {\n    const prefixByteLength = utf8ToBytes(prefix).byteLength;\n    const messageWithoutChainPrefix = encodedMessage.subarray(prefixByteLength);\n    const decoded = decode(messageWithoutChainPrefix);\n    const varIntLength = encodingLength(decoded);\n    return messageWithoutChainPrefix.slice(varIntLength);\n}\n//# sourceMappingURL=messageSignature.js.map","import { hmac } from '@noble/hashes/hmac';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { getPublicKey, getSharedSecret, Point, Signature, signSync, utils, verify, } from '@noble/secp256k1';\nimport { bigIntToBytes, bytesToHex, bytesToUtf8, concatBytes, FailedDecryptionError, hexToBigInt, hexToBytes, parseRecoverableSignatureVrs, signatureRsvToVrs, utf8ToBytes, } from '@stacks/common';\nimport { fromByteArray, toByteArray } from 'base64-js';\nimport { createCipher } from './aesCipher';\nimport { getPublicKeyFromPrivate } from './keys';\nimport { encodeMessage, hashMessage } from './messageSignature';\nimport { hashSha256Sync, hashSha512Sync } from './sha2Hash';\nimport { getAesCbcOutputLength, getBase64OutputLength } from './utils';\nutils.hmacSha256Sync = (key, ...msgs) => {\n    const h = hmac.create(sha256, key);\n    msgs.forEach(msg => h.update(msg));\n    return h.digest();\n};\nexport var InvalidPublicKeyReason;\n(function (InvalidPublicKeyReason) {\n    InvalidPublicKeyReason[\"InvalidFormat\"] = \"InvalidFormat\";\n    InvalidPublicKeyReason[\"IsNotPoint\"] = \"IsNotPoint\";\n})(InvalidPublicKeyReason || (InvalidPublicKeyReason = {}));\nexport async function aes256CbcEncrypt(iv, key, plaintext) {\n    const cipher = await createCipher();\n    return await cipher.encrypt('aes-256-cbc', key, iv, plaintext);\n}\nasync function aes256CbcDecrypt(iv, key, ciphertext) {\n    const cipher = await createCipher();\n    return await cipher.decrypt('aes-256-cbc', key, iv, ciphertext);\n}\nexport function hmacSha256(key, content) {\n    return hmac(sha256, key, content);\n}\nfunction equalsConstTime(a, b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n    let res = 0;\n    for (let i = 0; i < a.length; i++) {\n        res |= a[i] ^ b[i];\n    }\n    return res === 0;\n}\nfunction sharedSecretToKeys(sharedSecret) {\n    const hashedSecret = hashSha512Sync(sharedSecret);\n    return {\n        encryptionKey: hashedSecret.slice(0, 32),\n        hmacKey: hashedSecret.slice(32),\n    };\n}\nfunction allHexChars(maybe) {\n    return maybe.match(/^[0-9a-f]+$/i) !== null;\n}\nfunction isValidPublicKey(pub) {\n    const invalidFormat = {\n        result: false,\n        reason_data: 'Invalid public key format',\n        reason: InvalidPublicKeyReason.InvalidFormat,\n    };\n    const invalidPoint = {\n        result: false,\n        reason_data: 'Public key is not a point',\n        reason: InvalidPublicKeyReason.IsNotPoint,\n    };\n    if (pub.length !== 66 && pub.length !== 130)\n        return invalidFormat;\n    const firstByte = pub.slice(0, 2);\n    if (pub.length === 130 && firstByte !== '04')\n        return invalidFormat;\n    if (pub.length === 66 && firstByte !== '02' && firstByte !== '03')\n        return invalidFormat;\n    if (!allHexChars(pub))\n        return invalidFormat;\n    try {\n        const point = Point.fromHex(pub);\n        point.assertValidity();\n        return {\n            result: true,\n            reason_data: null,\n            reason: null,\n        };\n    }\n    catch (e) {\n        return invalidPoint;\n    }\n}\nexport function getHexFromBN(bnInput) {\n    const hexOut = bnInput.toString(16);\n    if (hexOut.length === 64) {\n        return hexOut;\n    }\n    else if (hexOut.length < 64) {\n        const padding = '0'.repeat(64 - hexOut.length);\n        return `${padding}${hexOut}`;\n    }\n    else {\n        throw new Error('Generated a > 32-byte bigint for encryption. Failing.');\n    }\n}\nexport function getBytesFromBN(bnInput) {\n    const result = bigIntToBytes(bnInput, 32);\n    if (result.byteLength !== 32) {\n        throw new Error('Failed to generate a 32-byte Uint8Array');\n    }\n    return result;\n}\nexport function getCipherObjectWrapper(opts) {\n    const shell = {\n        iv: '',\n        ephemeralPK: '',\n        mac: '',\n        cipherText: '',\n        wasString: !!opts.wasString,\n    };\n    if (opts.cipherTextEncoding === 'base64') {\n        shell.cipherTextEncoding = 'base64';\n    }\n    const ivLength = 32;\n    const ephemeralPKLength = 66;\n    const macLength = 64;\n    return {\n        payloadValuesLength: ivLength + ephemeralPKLength + macLength,\n        payloadShell: JSON.stringify(shell),\n    };\n}\nexport function getSignedCipherObjectWrapper(payloadShell) {\n    const shell = {\n        signature: '',\n        publicKey: '',\n        cipherText: payloadShell,\n    };\n    const signatureLength = 144;\n    const publicKeyLength = 66;\n    return {\n        signedPayloadValuesLength: signatureLength + publicKeyLength,\n        signedPayloadShell: JSON.stringify(shell),\n    };\n}\nexport function eciesGetJsonStringLength(opts) {\n    const { payloadShell, payloadValuesLength } = getCipherObjectWrapper(opts);\n    const cipherTextLength = getAesCbcOutputLength(opts.contentLength);\n    let encodedCipherTextLength;\n    if (!opts.cipherTextEncoding || opts.cipherTextEncoding === 'hex') {\n        encodedCipherTextLength = cipherTextLength * 2;\n    }\n    else if (opts.cipherTextEncoding === 'base64') {\n        encodedCipherTextLength = getBase64OutputLength(cipherTextLength);\n    }\n    else {\n        throw new Error(`Unexpected cipherTextEncoding \"${opts.cipherTextEncoding}\"`);\n    }\n    if (!opts.sign) {\n        return payloadShell.length + payloadValuesLength + encodedCipherTextLength;\n    }\n    else {\n        const { signedPayloadShell, signedPayloadValuesLength } = getSignedCipherObjectWrapper(payloadShell);\n        return (signedPayloadShell.length +\n            signedPayloadValuesLength +\n            payloadValuesLength +\n            encodedCipherTextLength);\n    }\n}\nexport async function encryptECIES(publicKey, content, wasString, cipherTextEncoding) {\n    const validity = isValidPublicKey(publicKey);\n    if (!validity.result) {\n        throw validity;\n    }\n    const ephemeralPrivateKey = utils.randomPrivateKey();\n    const ephemeralPublicKey = getPublicKey(ephemeralPrivateKey, true);\n    let sharedSecret = getSharedSecret(ephemeralPrivateKey, publicKey, true);\n    sharedSecret = sharedSecret.slice(1);\n    const sharedKeys = sharedSecretToKeys(sharedSecret);\n    const initializationVector = utils.randomBytes(16);\n    const cipherText = await aes256CbcEncrypt(initializationVector, sharedKeys.encryptionKey, content);\n    const macData = concatBytes(initializationVector, ephemeralPublicKey, cipherText);\n    const mac = hmacSha256(sharedKeys.hmacKey, macData);\n    let cipherTextString;\n    if (!cipherTextEncoding || cipherTextEncoding === 'hex') {\n        cipherTextString = bytesToHex(cipherText);\n    }\n    else if (cipherTextEncoding === 'base64') {\n        cipherTextString = fromByteArray(cipherText);\n    }\n    else {\n        throw new Error(`Unexpected cipherTextEncoding \"${cipherTextEncoding}\"`);\n    }\n    const result = {\n        iv: bytesToHex(initializationVector),\n        ephemeralPK: bytesToHex(ephemeralPublicKey),\n        cipherText: cipherTextString,\n        mac: bytesToHex(mac),\n        wasString,\n    };\n    if (cipherTextEncoding && cipherTextEncoding !== 'hex') {\n        result.cipherTextEncoding = cipherTextEncoding;\n    }\n    return result;\n}\nexport async function decryptECIES(privateKey, cipherObject) {\n    if (!cipherObject.ephemeralPK) {\n        throw new FailedDecryptionError('Unable to get public key from cipher object. ' +\n            'You might be trying to decrypt an unencrypted object.');\n    }\n    const ephemeralPK = cipherObject.ephemeralPK;\n    let sharedSecret = getSharedSecret(privateKey, ephemeralPK, true);\n    sharedSecret = sharedSecret.slice(1);\n    const sharedKeys = sharedSecretToKeys(sharedSecret);\n    const ivBytes = hexToBytes(cipherObject.iv);\n    let cipherTextBytes;\n    if (!cipherObject.cipherTextEncoding || cipherObject.cipherTextEncoding === 'hex') {\n        cipherTextBytes = hexToBytes(cipherObject.cipherText);\n    }\n    else if (cipherObject.cipherTextEncoding === 'base64') {\n        cipherTextBytes = toByteArray(cipherObject.cipherText);\n    }\n    else {\n        throw new Error(`Unexpected cipherTextEncoding \"${cipherObject.cipherText}\"`);\n    }\n    const macData = concatBytes(ivBytes, hexToBytes(ephemeralPK), cipherTextBytes);\n    const actualMac = hmacSha256(sharedKeys.hmacKey, macData);\n    const expectedMac = hexToBytes(cipherObject.mac);\n    if (!equalsConstTime(expectedMac, actualMac)) {\n        throw new FailedDecryptionError('Decryption failed: failure in MAC check');\n    }\n    const plainText = await aes256CbcDecrypt(ivBytes, sharedKeys.encryptionKey, cipherTextBytes);\n    if (cipherObject.wasString) {\n        return bytesToUtf8(plainText);\n    }\n    return plainText;\n}\nexport function signECDSA(privateKey, content) {\n    const contentBytes = typeof content === 'string' ? utf8ToBytes(content) : content;\n    const publicKey = getPublicKeyFromPrivate(privateKey);\n    const contentHash = hashSha256Sync(contentBytes);\n    const signature = signSync(contentHash, privateKey);\n    return {\n        signature: bytesToHex(signature),\n        publicKey,\n    };\n}\nexport function verifyECDSA(content, publicKey, signature) {\n    const contentBytes = typeof content === 'string' ? utf8ToBytes(content) : content;\n    const contentHash = hashSha256Sync(contentBytes);\n    return verify(signature, contentHash, publicKey, { strict: false });\n}\nexport function verifyMessageSignature({ signature, message, publicKey, }) {\n    const { r, s } = parseRecoverableSignatureVrs(signature);\n    const sig = new Signature(hexToBigInt(r), hexToBigInt(s));\n    const hashedMsg = typeof message === 'string' ? hashMessage(message) : message;\n    const verificationResult = verify(sig, hashedMsg, publicKey, { strict: false });\n    if (verificationResult || typeof message !== 'string')\n        return verificationResult;\n    const LEGACY_PREFIX = '\\x18Stacks Message Signing:\\n';\n    const legacyHash = sha256(encodeMessage(message, LEGACY_PREFIX));\n    return verify(sig, legacyHash, publicKey, { strict: false });\n}\nexport function verifyMessageSignatureRsv({ signature, message, publicKey, }) {\n    return verifyMessageSignature({\n        signature: signatureRsvToVrs(signature),\n        message,\n        publicKey,\n    });\n}\n//# sourceMappingURL=ec.js.map","import { sha256 } from '@noble/hashes/sha256';\nimport { bytesToHex, concatBytes, hexToBytes } from '@stacks/common';\nimport { ClarityType, serializeCVBytes } from './clarity';\nimport { signMessageHashRsv } from './keys';\nexport const STRUCTURED_DATA_PREFIX = new Uint8Array([0x53, 0x49, 0x50, 0x30, 0x31, 0x38]);\nexport function hashStructuredData(structuredData) {\n    return bytesToHex(sha256(serializeCVBytes(structuredData)));\n}\nexport function hashStructuredDataBytes(structuredData) {\n    return sha256(serializeCVBytes(structuredData));\n}\nconst hash256BytesLength = 32;\nfunction isDomain(value) {\n    if (value.type !== ClarityType.Tuple)\n        return false;\n    if (!['name', 'version', 'chain-id'].every(key => key in value.value))\n        return false;\n    if (!['name', 'version'].every(key => value.value[key].type === ClarityType.StringASCII))\n        return false;\n    if (value.value['chain-id'].type !== ClarityType.UInt)\n        return false;\n    return true;\n}\nexport function encodeStructuredData(opts) {\n    const bytes = encodeStructuredDataBytes(opts);\n    return bytesToHex(bytes);\n}\nexport function encodeStructuredDataBytes({ message, domain, }) {\n    const structuredDataHash = hashStructuredDataBytes(message);\n    if (!isDomain(domain)) {\n        throw new Error(\"domain parameter must be a valid domain of type TupleCV with keys 'name', 'version', 'chain-id' with respective types StringASCII, StringASCII, UInt\");\n    }\n    const domainHash = hashStructuredDataBytes(domain);\n    return concatBytes(STRUCTURED_DATA_PREFIX, domainHash, structuredDataHash);\n}\nexport function decodeStructuredDataSignature(signature) {\n    const bytes = decodeStructuredDataSignatureBytes(signature);\n    return {\n        domainHash: bytesToHex(bytes.domainHash),\n        messageHash: bytesToHex(bytes.messageHash),\n    };\n}\nexport function decodeStructuredDataSignatureBytes(signature) {\n    const encodedMessageBytes = typeof signature === 'string' ? hexToBytes(signature) : signature;\n    const domainHash = encodedMessageBytes.slice(STRUCTURED_DATA_PREFIX.length, STRUCTURED_DATA_PREFIX.length + hash256BytesLength);\n    const messageHash = encodedMessageBytes.slice(STRUCTURED_DATA_PREFIX.length + hash256BytesLength);\n    return {\n        domainHash,\n        messageHash,\n    };\n}\nexport function signStructuredData({ message, domain, privateKey, }) {\n    const structuredDataHash = bytesToHex(sha256(encodeStructuredDataBytes({ message, domain })));\n    return signMessageHashRsv({\n        messageHash: structuredDataHash,\n        privateKey,\n    });\n}\n//# sourceMappingURL=structuredDataSignature.js.map","import { sha256 } from '@noble/hashes/sha256';\nimport { bech32, bech32m } from '@scure/base';\nimport { IntegerType, PrivateKey, bigIntToBytes, bytesToHex, hexToBytes } from '@stacks/common';\nimport {\n  base58CheckDecode,\n  base58CheckEncode,\n  verifyMessageSignatureRsv,\n} from '@stacks/encryption';\nimport { StacksNetwork, StacksNetworkName, StacksNetworks, networkFrom } from '@stacks/network';\nimport {\n  BufferCV,\n  ClarityType,\n  ClarityValue,\n  OptionalCV,\n  TupleCV,\n  bufferCV,\n  encodeStructuredDataBytes,\n  signStructuredData,\n  stringAsciiCV,\n  tupleCV,\n  uintCV,\n} from '@stacks/transactions';\nimport { PoxOperationInfo } from '.';\nimport {\n  B58_ADDR_PREFIXES,\n  BitcoinNetworkVersion,\n  PoXAddressVersion,\n  PoxOperationPeriod,\n  SEGWIT_ADDR_PREFIXES,\n  SEGWIT_V0,\n  SEGWIT_V0_ADDR_PREFIX,\n  SEGWIT_V1,\n  SEGWIT_V1_ADDR_PREFIX,\n  SegwitPrefix,\n  StackingErrors,\n} from './constants';\n\nexport class InvalidAddressError extends Error {\n  innerError?: Error;\n  constructor(address: string, innerError?: Error) {\n    const msg = `'${address}' is not a valid P2PKH/P2SH/P2WPKH/P2WSH/P2TR address`;\n    super(msg);\n    this.message = msg;\n    this.name = this.constructor.name;\n    this.innerError = innerError;\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\n/** @ignore */\nexport function btcAddressVersionToLegacyHashMode(btcAddressVersion: number): PoXAddressVersion {\n  switch (btcAddressVersion) {\n    case BitcoinNetworkVersion.mainnet.P2PKH:\n      return PoXAddressVersion.P2PKH;\n    case BitcoinNetworkVersion.testnet.P2PKH:\n      return PoXAddressVersion.P2PKH;\n    case BitcoinNetworkVersion.mainnet.P2SH:\n      return PoXAddressVersion.P2SH;\n    case BitcoinNetworkVersion.testnet.P2SH:\n      return PoXAddressVersion.P2SH;\n    default:\n      throw new Error('Invalid pox address version');\n  }\n}\n\n/** @ignore */\nfunction nativeAddressToSegwitVersion(\n  witnessVersion: number,\n  dataLength: number\n): PoXAddressVersion {\n  if (witnessVersion === SEGWIT_V0 && dataLength === 20) return PoXAddressVersion.P2WPKH;\n  if (witnessVersion === SEGWIT_V0 && dataLength === 32) return PoXAddressVersion.P2WSH;\n  if (witnessVersion === SEGWIT_V1 && dataLength === 32) return PoXAddressVersion.P2TR;\n\n  throw new Error(\n    'Invalid native segwit witness version and byte length. Currently, only P2WPKH, P2WSH, and P2TR are supported.'\n  );\n}\n\n/** @ignore */\nfunction bech32Decode(btcAddress: string) {\n  const { words: bech32Words } = bech32.decode(btcAddress);\n  const witnessVersion = bech32Words[0];\n\n  if (witnessVersion > 0)\n    throw new Error('Addresses with a witness version >= 1 should be encoded in bech32m');\n\n  return {\n    witnessVersion,\n    data: bech32.fromWords(bech32Words.slice(1)),\n  };\n}\n\n/** @ignore */\nfunction bech32MDecode(btcAddress: string) {\n  const { words: bech32MWords } = bech32m.decode(btcAddress);\n  const witnessVersion = bech32MWords[0];\n\n  if (witnessVersion == 0)\n    throw new Error('Addresses with witness version 1 should be encoded in bech32');\n\n  return {\n    witnessVersion,\n    data: bech32m.fromWords(bech32MWords.slice(1)),\n  };\n}\n\n/** @ignore */\nfunction decodeNativeSegwitBtcAddress(btcAddress: string): {\n  witnessVersion: number;\n  data: Uint8Array;\n} {\n  if (SEGWIT_V0_ADDR_PREFIX.test(btcAddress)) return bech32Decode(btcAddress);\n  if (SEGWIT_V1_ADDR_PREFIX.test(btcAddress)) return bech32MDecode(btcAddress);\n  throw new Error(\n    `Native segwit address ${btcAddress} does not match valid prefix ${SEGWIT_V0_ADDR_PREFIX} or ${SEGWIT_V1_ADDR_PREFIX}`\n  );\n}\n\nexport function decodeBtcAddress(btcAddress: string): {\n  version: PoXAddressVersion;\n  data: string;\n} {\n  const { version, data } = decodeBtcAddressBytes(btcAddress);\n  return { version, data: bytesToHex(data) };\n}\n\nexport function decodeBtcAddressBytes(btcAddress: string): {\n  version: PoXAddressVersion;\n  data: Uint8Array;\n} {\n  try {\n    if (B58_ADDR_PREFIXES.test(btcAddress)) {\n      const b58 = base58CheckDecode(btcAddress);\n      const addressVersion = btcAddressVersionToLegacyHashMode(b58.version);\n      return {\n        version: addressVersion,\n        data: b58.hash,\n      };\n    } else if (SEGWIT_ADDR_PREFIXES.test(btcAddress)) {\n      const b32 = decodeNativeSegwitBtcAddress(btcAddress);\n      const addressVersion = nativeAddressToSegwitVersion(b32.witnessVersion, b32.data.length);\n      return {\n        version: addressVersion,\n        data: b32.data,\n      };\n    }\n    throw new Error('Unknown BTC address prefix.');\n  } catch (error) {\n    throw new InvalidAddressError(btcAddress, error as Error);\n  }\n}\n\nexport function extractPoxAddressFromClarityValue(poxAddrClarityValue: ClarityValue): {\n  version: number;\n  hashBytes: Uint8Array;\n} {\n  const clarityValue = poxAddrClarityValue as TupleCV;\n  if (clarityValue.type !== ClarityType.Tuple || !clarityValue.value) {\n    throw new Error('Invalid argument, expected ClarityValue to be a TupleCV');\n  }\n  if (!('version' in clarityValue.value) || !('hashbytes' in clarityValue.value)) {\n    throw new Error(\n      'Invalid argument, expected Clarity tuple value to contain `version` and `hashbytes` keys'\n    );\n  }\n  const versionCV = clarityValue.value['version'] as BufferCV;\n  const hashBytesCV = clarityValue.value['hashbytes'] as BufferCV;\n  if (versionCV.type !== ClarityType.Buffer || hashBytesCV.type !== ClarityType.Buffer) {\n    throw new Error(\n      'Invalid argument, expected Clarity tuple value to contain `version` and `hashbytes` buffers'\n    );\n  }\n  return {\n    version: hexToBytes(versionCV.value)[0],\n    hashBytes: hexToBytes(hashBytesCV.value),\n  };\n}\n\nexport function getErrorString(error: StackingErrors): string {\n  switch (error) {\n    case StackingErrors.ERR_STACKING_UNREACHABLE:\n      return 'Stacking unreachable';\n    case StackingErrors.ERR_STACKING_CORRUPTED_STATE:\n      return 'Stacking state is corrupted';\n    case StackingErrors.ERR_STACKING_INSUFFICIENT_FUNDS:\n      return 'Insufficient funds';\n    case StackingErrors.ERR_STACKING_INVALID_LOCK_PERIOD:\n      return 'Invalid lock period';\n    case StackingErrors.ERR_STACKING_ALREADY_STACKED:\n      return 'Account already stacked. Concurrent stacking not allowed.';\n    case StackingErrors.ERR_STACKING_NO_SUCH_PRINCIPAL:\n      return 'Principal does not exist';\n    case StackingErrors.ERR_STACKING_EXPIRED:\n      return 'Stacking expired';\n    case StackingErrors.ERR_STACKING_STX_LOCKED:\n      return 'STX balance is locked';\n    case StackingErrors.ERR_STACKING_PERMISSION_DENIED:\n      return 'Permission denied';\n    case StackingErrors.ERR_STACKING_THRESHOLD_NOT_MET:\n      return 'Stacking threshold not met';\n    case StackingErrors.ERR_STACKING_POX_ADDRESS_IN_USE:\n      return 'PoX address already in use';\n    case StackingErrors.ERR_STACKING_INVALID_POX_ADDRESS:\n      return 'Invalid PoX address';\n    case StackingErrors.ERR_STACKING_ALREADY_REJECTED:\n      return 'Stacking already rejected';\n    case StackingErrors.ERR_STACKING_INVALID_AMOUNT:\n      return 'Invalid amount';\n    case StackingErrors.ERR_NOT_ALLOWED:\n      return 'Stacking not allowed';\n    case StackingErrors.ERR_STACKING_ALREADY_DELEGATED:\n      return 'Already delegated';\n    case StackingErrors.ERR_DELEGATION_EXPIRES_DURING_LOCK:\n      return 'Delegation expires during lock period';\n    case StackingErrors.ERR_DELEGATION_TOO_MUCH_LOCKED:\n      return 'Delegation too much locked';\n    case StackingErrors.ERR_DELEGATION_POX_ADDR_REQUIRED:\n      return 'PoX address required for delegation';\n    case StackingErrors.ERR_INVALID_START_BURN_HEIGHT:\n      return 'Invalid start burn height';\n    case StackingErrors.ERR_NOT_CURRENT_STACKER: // not used in pox contract\n      return 'ERR_NOT_CURRENT_STACKER';\n    case StackingErrors.ERR_STACK_EXTEND_NOT_LOCKED:\n      return 'Stacker must be currently locked';\n    case StackingErrors.ERR_STACK_INCREASE_NOT_LOCKED:\n      return 'Stacker must be currently locked';\n    case StackingErrors.ERR_DELEGATION_NO_REWARD_SLOT:\n      return 'Invalid reward-cycle and reward-cycle-index';\n    case StackingErrors.ERR_DELEGATION_WRONG_REWARD_SLOT:\n      return 'PoX address must match the one on record';\n    case StackingErrors.ERR_STACKING_IS_DELEGATED:\n      return 'Stacker must be directly stacking and not delegating';\n    case StackingErrors.ERR_STACKING_NOT_DELEGATED:\n      return 'Stacker must be delegating and not be directly stacking';\n  }\n}\n/**\n * Converts a PoX address to a tuple (e.g. to be used in a Clarity contract call).\n *\n * @param poxAddress - The PoX bitcoin address to be converted.\n * @returns The converted PoX address as a tuple of version and hashbytes.\n */\nexport function poxAddressToTuple(poxAddress: string) {\n  const { version, data } = decodeBtcAddressBytes(poxAddress);\n  const versionBuff = bufferCV(bigIntToBytes(BigInt(version), 1));\n  const hashBuff = bufferCV(data);\n  return tupleCV({\n    version: versionBuff,\n    hashbytes: hashBuff,\n  });\n}\n\nfunction legacyHashModeToBtcAddressVersion(\n  hashMode: PoXAddressVersion,\n  network: StacksNetworkName\n): number {\n  switch (hashMode) {\n    case PoXAddressVersion.P2PKH:\n      return BitcoinNetworkVersion[network].P2PKH;\n    case PoXAddressVersion.P2SH:\n    case PoXAddressVersion.P2SHP2WPKH:\n    case PoXAddressVersion.P2SHP2WSH:\n      // P2SHP2WPKH and P2SHP2WSH are treated as P2SH for the sender\n      return BitcoinNetworkVersion[network].P2SH;\n    default:\n      throw new Error('Invalid pox address version');\n  }\n}\n\nfunction _poxAddressToBtcAddress_Values(\n  version: number,\n  hash: string | Uint8Array,\n  network: StacksNetworkName\n): string {\n  if (!StacksNetworks.includes(network)) throw new Error('Invalid network.');\n\n  if (typeof hash === 'string') hash = hexToBytes(hash);\n\n  switch (version) {\n    case PoXAddressVersion.P2PKH:\n    case PoXAddressVersion.P2SH:\n    case PoXAddressVersion.P2SHP2WPKH:\n    case PoXAddressVersion.P2SHP2WSH: {\n      const btcAddrVersion = legacyHashModeToBtcAddressVersion(version, network);\n      return base58CheckEncode(btcAddrVersion, hash);\n    }\n    case PoXAddressVersion.P2WPKH:\n    case PoXAddressVersion.P2WSH: {\n      const words = bech32.toWords(hash);\n      return bech32.encode(SegwitPrefix[network], [SEGWIT_V0, ...words]);\n    }\n    case PoXAddressVersion.P2TR: {\n      const words = bech32m.toWords(hash);\n      return bech32m.encode(SegwitPrefix[network], [SEGWIT_V1, ...words]);\n    }\n  }\n  throw new Error(`Unexpected address version: ${version}`);\n}\n\nfunction _poxAddressToBtcAddress_ClarityValue(\n  poxAddrClarityValue: ClarityValue,\n  network: StacksNetworkName\n): string {\n  const poxAddr = extractPoxAddressFromClarityValue(poxAddrClarityValue);\n  return _poxAddressToBtcAddress_Values(poxAddr.version, poxAddr.hashBytes, network);\n}\n\n/**\n * Converts a PoX address to a Bitcoin address.\n *\n * @param version - The version of the PoX address (as a single number, not a Uint8array).\n * @param hash - The hash bytes of the PoX address.\n * @param network - The network the PoX address is on.\n * @returns The corresponding Bitcoin address.\n */\nexport function poxAddressToBtcAddress(\n  version: number,\n  hash: string | Uint8Array,\n  network: StacksNetworkName // todo: allow NetworkParam in the future (minor)\n): string;\n/**\n * Converts a PoX address to a Bitcoin address.\n *\n * @param poxAddrClarityValue - The clarity tuple of the PoX address (version and hashbytes).\n * @param network - The network the PoX address is on.\n * @returns The corresponding Bitcoin address.\n */\nexport function poxAddressToBtcAddress(\n  poxAddrClarityValue: ClarityValue,\n  network: StacksNetworkName\n): string;\nexport function poxAddressToBtcAddress(...args: any[]): string {\n  // todo: allow these helpers to take a bitcoin network instead of a stacks network, once we have a concept of bitcoin networks in the codebase\n  if (typeof args[0] === 'number') return _poxAddressToBtcAddress_Values(args[0], args[1], args[2]);\n  return _poxAddressToBtcAddress_ClarityValue(args[0], args[1]);\n}\n\n// todo: move unwrap to tx package and document\nexport function unwrap<T extends ClarityValue>(optional: OptionalCV<T>) {\n  if (optional.type === ClarityType.OptionalSome) return optional.value;\n  if (optional.type === ClarityType.OptionalNone) return undefined;\n  throw new Error(\"Object is not an 'Optional'\");\n}\n\nexport function unwrapMap<T extends ClarityValue, U>(optional: OptionalCV<T>, map: (t: T) => U) {\n  if (optional.type === ClarityType.OptionalSome) return map(optional.value);\n  if (optional.type === ClarityType.OptionalNone) return undefined;\n  throw new Error(\"Object is not an 'Optional'\");\n}\n\n/** @internal */\nexport function ensurePox2Activated(operationInfo: PoxOperationInfo) {\n  if (operationInfo.period === PoxOperationPeriod.Period1)\n    throw new Error(\n      `PoX-2 has not activated yet (currently in period ${operationInfo.period} of PoX-2 operation)`\n    );\n}\n\n/**\n * @internal\n * Throws if the given PoX address is not a legacy address for PoX-1.\n */\nexport function ensureLegacyBtcAddressForPox1({\n  contract,\n  poxAddress,\n}: {\n  contract: string;\n  poxAddress?: string;\n}) {\n  if (!poxAddress) return;\n  if (contract.endsWith('.pox') && !B58_ADDR_PREFIXES.test(poxAddress)) {\n    throw new Error('PoX-1 requires P2PKH/P2SH/P2SH-P2WPKH/P2SH-P2WSH bitcoin addresses');\n  }\n}\n\n/**\n * @internal\n * Throws if signer args are given for <= PoX-3 or the signer args are missing otherwise.\n */\nexport function ensureSignerArgsReadiness({\n  contract,\n  signerKey,\n  signerSignature,\n  maxAmount,\n  authId,\n}: {\n  contract: string;\n  signerKey?: string;\n  signerSignature?: string;\n  maxAmount?: IntegerType;\n  authId?: IntegerType;\n}) {\n  const hasMaxAmount = typeof maxAmount !== 'undefined';\n  const hasAuthId = typeof authId !== 'undefined';\n  if (/\\.pox(-[2-3])?$/.test(contract)) {\n    // .pox, .pox-2 or .pox-3\n    if (signerKey || signerSignature || hasMaxAmount || hasAuthId) {\n      throw new Error(\n        'PoX-1, PoX-2 and PoX-3 do not accept a `signerKey`, `signerSignature`, `maxAmount` or `authId`'\n      );\n    }\n  } else {\n    // .pox-4 or later\n    if (!signerKey || !hasMaxAmount || typeof authId === 'undefined') {\n      throw new Error(\n        'PoX-4 requires a `signerKey` (buff 33), `maxAmount` (uint), and `authId` (uint)'\n      );\n    }\n  }\n}\n\nexport enum Pox4SignatureTopic {\n  StackStx = 'stack-stx',\n  AggregateCommit = 'agg-commit',\n  AggregateIncrease = 'agg-increase',\n  StackExtend = 'stack-extend',\n  StackIncrease = 'stack-increase',\n}\n\nexport interface Pox4SignatureOptions {\n  /** topic of the signature (i.e. which stacking operation the signature is used for) */\n  topic: `${Pox4SignatureTopic}` | Pox4SignatureTopic;\n  poxAddress: string;\n  /** current reward cycle */\n  rewardCycle: number;\n  /** lock period (in cycles) */\n  period: number;\n  network: StacksNetworkName | StacksNetwork;\n  /** Maximum amount of uSTX that can be locked during this function call */\n  maxAmount: IntegerType;\n  /** Random integer to prevent signature re-use */\n  authId: IntegerType;\n}\n\n/**\n * Generate a signature (`signer-sig` in PoX-4 stacking operations).\n */\nexport function signPox4SignatureHash({\n  topic,\n  poxAddress,\n  rewardCycle,\n  period,\n  network,\n  privateKey,\n  maxAmount,\n  authId,\n}: Pox4SignatureOptions & { privateKey: PrivateKey }) {\n  return signStructuredData({\n    ...pox4SignatureMessage({ topic, poxAddress, rewardCycle, period, network, maxAmount, authId }),\n    privateKey,\n  });\n}\n\n/**\n * Verify a signature (`signer-sig` in PoX-4 stacking operations) matches the given\n * public key (`signer-key`) and the structured data of the operation.\n */\nexport function verifyPox4SignatureHash({\n  topic,\n  poxAddress,\n  rewardCycle,\n  period,\n  network,\n  publicKey,\n  signature,\n  maxAmount,\n  authId,\n}: Pox4SignatureOptions & { publicKey: string; signature: string }) {\n  return verifyMessageSignatureRsv({\n    message: sha256(\n      encodeStructuredDataBytes(\n        pox4SignatureMessage({ topic, poxAddress, rewardCycle, period, network, maxAmount, authId })\n      )\n    ),\n    publicKey,\n    signature,\n  });\n}\n\n/**\n * Helper method used to generate SIP018 `message` and `domain` in\n * {@link signPox4SignatureHash} and {@link verifyPox4SignatureHash}.\n */\nexport function pox4SignatureMessage({\n  topic,\n  poxAddress,\n  rewardCycle,\n  period: lockPeriod,\n  network: networkOrName,\n  maxAmount,\n  authId,\n}: Pox4SignatureOptions) {\n  const network = networkFrom(networkOrName);\n  const message = tupleCV({\n    'pox-addr': poxAddressToTuple(poxAddress),\n    'reward-cycle': uintCV(rewardCycle),\n    topic: stringAsciiCV(topic),\n    period: uintCV(lockPeriod),\n    'max-amount': uintCV(maxAmount),\n    'auth-id': uintCV(authId),\n  });\n  const domain = tupleCV({\n    name: stringAsciiCV('pox-4-signer'),\n    version: stringAsciiCV('1.0.0'),\n    'chain-id': uintCV(network.chainId),\n  });\n  return { message, domain };\n}\n","import { ClientOpts, IntegerType, PrivateKey, hexToBytes, intToBigInt } from '@stacks/common';\nimport {\n  ChainId,\n  NetworkClientParam,\n  StacksNetwork,\n  clientFromNetwork,\n  networkFrom,\n} from '@stacks/network';\nimport {\n  BurnchainRewardListResponse,\n  BurnchainRewardSlotHolderListResponse,\n  BurnchainRewardsTotal,\n} from '@stacks/stacks-blockchain-api-types';\nimport type { ContractIdString } from '@stacks/transactions';\nimport {\n  BufferCV,\n  ClarityType,\n  ClarityValue,\n  ContractCallOptions,\n  ContractCallPayload,\n  OptionalCV,\n  PrincipalCV,\n  ResponseErrorCV,\n  StacksTransactionWire,\n  TupleCV,\n  TxBroadcastResult,\n  UIntCV,\n  broadcastTransaction,\n  bufferCV,\n  cvToString,\n  fetchCallReadOnlyFunction,\n  getFee,\n  makeContractCall,\n  noneCV,\n  principalCV,\n  someCV,\n  stringAsciiCV,\n  uintCV,\n  validateStacksAddress,\n} from '@stacks/transactions';\nimport { PoxOperationPeriod, StackingErrors } from './constants';\nimport {\n  Pox4SignatureTopic,\n  ensureLegacyBtcAddressForPox1,\n  ensurePox2Activated,\n  ensureSignerArgsReadiness,\n  poxAddressToTuple,\n  signPox4SignatureHash,\n  unwrap,\n  unwrapMap,\n} from './utils';\n\nexport * from './utils';\n\n/** @internal */\ninterface BaseTxOptions {\n  /** the fee for the transaction */\n  fee?: IntegerType;\n  /** the nonce for the transaction */\n  nonce?: IntegerType;\n  /** the private key (aka `senderkey`) for the transaction */\n  privateKey: string;\n}\n\nexport interface CycleInfo {\n  id: number;\n  min_threshold_ustx: number;\n  stacked_ustx: number;\n  is_pox_active: boolean;\n}\n\nexport interface ContractVersion {\n  contract_id: string;\n  activation_burnchain_block_height: number;\n  first_reward_cycle_id: number;\n}\n\nexport interface PoxInfo {\n  contract_id: string;\n  contract_versions: ContractVersion[];\n  current_burnchain_block_height?: number;\n  first_burnchain_block_height: number;\n  min_amount_ustx: string;\n  next_reward_cycle_in: number;\n  prepare_cycle_length: number;\n  prepare_phase_block_length: number;\n  reward_cycle_id: number;\n  reward_cycle_length: number;\n  reward_phase_block_length: number;\n  reward_slots: number;\n  current_cycle: CycleInfo;\n  next_cycle: CycleInfo & {\n    min_increment_ustx: number;\n    prepare_phase_start_block_height: number;\n    blocks_until_prepare_phase: number;\n    reward_phase_start_block_height: number;\n    blocks_until_reward_phase: number;\n    ustx_until_pox_rejection: number;\n  };\n}\n\nexport type PoxOperationInfo = {\n  /** @deprecated Period isn't needed anymore after 2.1 fork went live */\n  period: PoxOperationPeriod;\n  pox1: { contract_id: string };\n  pox2: ContractVersion;\n  pox3: ContractVersion;\n  pox4: ContractVersion;\n  current: ContractVersion;\n};\n\nexport type StackerInfo =\n  | {\n      stacked: false;\n    }\n  | {\n      stacked: true;\n      details: {\n        first_reward_cycle: number;\n        lock_period: number;\n        unlock_height: number;\n        pox_address: {\n          version: Uint8Array;\n          hashbytes: Uint8Array;\n        };\n      };\n    };\n\nexport type DelegationInfo =\n  | {\n      delegated: false;\n    }\n  | {\n      delegated: true;\n      details: {\n        amount_micro_stx: bigint;\n        delegated_to: string;\n        pox_address?: {\n          version: number;\n          hashbytes: Uint8Array;\n        };\n        until_burn_ht?: number;\n      };\n    };\n\nexport interface RewardSetOptions {\n  contractId: string;\n  rewardCyleId: number;\n  rewardSetIndex: number;\n}\n\nexport interface RewardSetInfo {\n  pox_address: {\n    version: Uint8Array;\n    hashbytes: Uint8Array;\n  };\n  total_ustx: bigint;\n}\n\nexport interface StackingEligibility {\n  eligible: boolean;\n  reason?: string;\n}\n\n/**\n * Lock stx check options\n */\nexport interface CanLockStxOptions {\n  /** the reward Bitcoin address */\n  poxAddress: string;\n  /** number of cycles to lock */\n  cycles: number;\n}\n\n/**\n * Lock stx options\n */\nexport interface LockStxOptions {\n  /** private key to sign transaction */\n  privateKey: string;\n  /** number of cycles to lock */\n  cycles: number;\n  /** the reward Bitcoin address */\n  poxAddress: string;\n  /** number of microstacks to lock */\n  amountMicroStx: IntegerType;\n  /** the burnchain block height to begin lock */\n  burnBlockHeight: number;\n  /** hex-encoded signer key `(buff 33)`, required for >= PoX-4 */\n  signerKey?: string;\n  /** hex-encoded signature `(buff 65)`, required for >= PoX-4 */\n  signerSignature?: string;\n  /** Maximum amount of STX that can be locked in this transaction, required for >= PoX-4 */\n  maxAmount?: IntegerType;\n  /** Random integer to prevent re-use of signer signature, required for >= PoX-4 */\n  authId?: IntegerType;\n}\n\n/**\n * Stack extend stx options\n */\nexport interface StackExtendOptions {\n  /** private key to sign transaction */\n  privateKey: string;\n  /** number of cycles to extend by */\n  extendCycles: number;\n  /** the reward Bitcoin address */\n  poxAddress: string;\n  /** hex-encoded signer key `(buff 33)`, required for >= PoX-4 */\n  signerKey?: string;\n  /** hex-encoded signature `(buff 65)`, required for >= PoX-4 */\n  signerSignature?: string;\n  /** Maximum amount of STX that can be locked in this transaction, required for >= PoX-4 */\n  maxAmount?: IntegerType;\n  /** Random integer to prevent re-use of signer signature, required for >= PoX-4 */\n  authId?: IntegerType;\n}\n\n/**\n * Stack increase stx options\n */\nexport interface StackIncreaseOptions {\n  /** private key to sign transaction */\n  privateKey: string;\n  /** number of ustx to increase by */\n  increaseBy: IntegerType;\n  /** hex-encoded signer key `(buff 33)`, required for >= PoX-4 */\n  signerKey?: string;\n  /** hex-encoded signature `(buff 65)`, required for >= PoX-4 */\n  signerSignature?: string;\n  /** Maximum amount of STX that can be locked in this transaction, required for >= PoX-4 */\n  maxAmount?: IntegerType;\n  /** Random integer to prevent re-use of signer signature, required for >= PoX-4 */\n  authId?: IntegerType;\n}\n\n/**\n * Delegate stx options\n */\nexport interface DelegateStxOptions {\n  /** number of microstacks to delegate */\n  amountMicroStx: IntegerType;\n  /** the STX address of the delegatee */\n  delegateTo: string;\n  /** the burnchain block height after which delegation is revoked */\n  untilBurnBlockHeight?: number;\n  /** the reward Bitcoin address of the delegator */\n  poxAddress?: string;\n  /** private key to sign transaction */\n  privateKey: string;\n}\n\n/**\n * Delegate stack stx options\n */\nexport interface DelegateStackStxOptions {\n  /** private key to sign transaction */\n  privateKey: string;\n  /** the STX address of the delegator */\n  stacker: string;\n  /** number of microstacks to lock */\n  amountMicroStx: IntegerType;\n  /** the reward Bitcoin address of the delegator */\n  poxAddress: string;\n  /** the burnchain block height to begin lock */\n  burnBlockHeight: number;\n  /** number of cycles to lock */\n  cycles: number;\n}\n\n/**\n * Delegate stack extend options\n */\nexport interface DelegateStackExtendOptions {\n  /** the STX address of the delegator */\n  stacker: string;\n  /** the reward Bitcoin address of the delegator */\n  poxAddress: string;\n  /** number of cycles to extend by */\n  extendCount: number;\n  /** private key to sign transaction */\n  privateKey: string;\n}\n\n/**\n * Delegate stack increase options\n */\nexport interface DelegateStackIncreaseOptions {\n  /** the STX address of the delegator */\n  stacker: string;\n  /** the reward Bitcoin address of the delegator */\n  poxAddress: string;\n  /** number of ustx to increase by */\n  increaseBy: IntegerType;\n  /** private key to sign transaction */\n  privateKey: string;\n  /** nonce for the transaction */\n  nonce?: IntegerType;\n}\n\nexport interface StackAggregationCommitOptions {\n  poxAddress: string;\n  rewardCycle: number;\n  privateKey: string;\n  /** hex-encoded signer key `(buff 33)`, required for >= PoX-4 */\n  signerKey?: string;\n  /** hex-encoded signature `(buff 65)`, required for >= PoX-4 */\n  signerSignature?: string;\n  /** Maximum amount of STX that can be locked in this transaction, required for >= PoX-4 */\n  maxAmount?: IntegerType;\n  /** Random integer to prevent re-use of signer signature, required for >= PoX-4 */\n  authId?: IntegerType;\n}\n\nexport interface StackAggregationIncreaseOptions {\n  poxAddress: string;\n  rewardCycle: number;\n  rewardIndex: number;\n  privateKey: string;\n  /** hex-encoded signer key `(buff 33)`, required for >= PoX-4 */\n  signerKey?: string;\n  /** hex-encoded signature `(buff 65)`, required for >= PoX-4 */\n  signerSignature?: string;\n  /** Maximum amount of STX that can be locked in this transaction, required for >= PoX-4 */\n  maxAmount?: IntegerType;\n  /** Random integer to prevent re-use of signer signature, required for >= PoX-4 */\n  authId?: IntegerType;\n}\n\nexport class StackingClient {\n  public address: string;\n  public network: StacksNetwork;\n\n  public client: Required<ClientOpts>;\n\n  // todo: make more constructor opts optional\n  constructor(opts: { address: string } & NetworkClientParam) {\n    this.address = opts.address;\n    this.network = networkFrom(opts.network ?? 'mainnet');\n    this.client = Object.assign({}, clientFromNetwork(this.network), opts.client);\n  }\n\n  get baseUrl() {\n    return this.client.baseUrl;\n  }\n\n  get fetch() {\n    return this.client.fetch;\n  }\n\n  /** @deprecated Kept for backwards compatibility, may be removed in the future */\n  getCoreInfo(): Promise<V2CoreInfoResponse> {\n    return this.client.fetch(`${this.client.baseUrl}/v2/info`).then(res => res.json());\n  }\n\n  /** @deprecated Kept for backwards compatibility, may be removed in the future */\n  getPoxInfo(): Promise<V2PoxInfoResponse> {\n    return this.client.fetch(`${this.client.baseUrl}/v2/pox`).then(res => res.json());\n  }\n\n  /** @deprecated Kept for backwards compatibility, may be removed in the future */\n  async getTargetBlockTime(): Promise<number> {\n    const res = await this.client\n      .fetch(`${this.client.baseUrl}/extended/v1/info/network_block_times`)\n      .then((res: any): V1InfoBlockTimesResponse => res.json());\n\n    if (this.network.chainId === ChainId.Mainnet) return res.mainnet.target_block_time;\n    return res.testnet.target_block_time;\n  }\n\n  /** Get account status */\n  async getAccountStatus(): Promise<any> {\n    // todo: add types for response\n    return this.client\n      .fetch(`${this.client.baseUrl}/v2/accounts/${this.address}?proof=0`)\n      .then(res => res.json())\n      .then(json => {\n        json.balance = BigInt(json.balance);\n        json.locked = BigInt(json.locked);\n        return json;\n      });\n  }\n\n  /** Get account balance */\n  async getAccountBalance(): Promise<bigint> {\n    return this.getAccountStatus().then(a => a.balance);\n  }\n\n  /** Get extended account balances */\n  async getAccountExtendedBalances(): Promise<ExtendedAccountBalances> {\n    return this.client\n      .fetch(`${this.client.baseUrl}/extended/v1/address/${this.address}/balances`)\n      .then(res => res.json())\n      .then(json => {\n        json.stx.balance = BigInt(json.stx.balance);\n        json.stx.total_sent = BigInt(json.stx.total_sent);\n        json.stx.total_received = BigInt(json.stx.total_received);\n        json.stx.locked = BigInt(json.stx.locked);\n        return json;\n      });\n  }\n\n  /** Get account balance of locked tokens */\n  async getAccountBalanceLocked(): Promise<bigint> {\n    return this.getAccountStatus().then(a => a.locked);\n  }\n\n  /** Get reward cycle duration in seconds */\n  async getCycleDuration(): Promise<number> {\n    const poxInfoPromise = this.getPoxInfo();\n    const targetBlockTimePromise = await this.getTargetBlockTime();\n\n    return Promise.all([poxInfoPromise, targetBlockTimePromise]).then(\n      ([poxInfo, targetBlockTime]) => {\n        return poxInfo.reward_cycle_length * targetBlockTime;\n      }\n    );\n  }\n\n  /** Get the total burnchain rewards total for the set address */\n  async getRewardsTotalForBtcAddress(): Promise<BurnchainRewardsTotal | BaseErrorResponse> {\n    return this.client\n      .fetch(`${this.client.baseUrl}/extended/v1/burnchain/rewards/${this.address}/total`)\n      .then(res => res.json())\n      .then(json => {\n        json.reward_amount = BigInt(json.reward_amount);\n        return json;\n      });\n  }\n\n  /** Get burnchain rewards for the set address */\n  async getRewardsForBtcAddress(\n    options?: PaginationOptions\n  ): Promise<BurnchainRewardListResponse | BaseErrorResponse> {\n    let url = `${this.client.baseUrl}/extended/v1/burnchain/rewards/${this.address}`;\n    if (options) url += `?limit=${options.limit}&offset=${options.offset}`;\n\n    return this.client.fetch(url).then(res => res.json());\n  }\n\n  /** Get burnchain rewards holders for the set address */\n  async getRewardHoldersForBtcAddress(\n    options?: PaginationOptions\n  ): Promise<BurnchainRewardSlotHolderListResponse | BaseErrorResponse> {\n    let url = `${this.client.baseUrl}/extended/v1/burnchain/reward_slot_holders/${this.address}`;\n    if (options) url += `?limit=${options.limit}&offset=${options.offset}`;\n\n    return this.client.fetch(url).then(res => res.json());\n  }\n\n  /** Get PoX address from reward set by index (if it exists) */\n  async getRewardSet(options: RewardSetOptions): Promise<RewardSetInfo | undefined> {\n    const [contractAddress, contractName] = this.parseContractId(options?.contractId);\n    const result = await fetchCallReadOnlyFunction({\n      client: this.client,\n      senderAddress: this.address,\n      contractAddress,\n      contractName,\n      functionArgs: [uintCV(options.rewardCyleId), uintCV(options.rewardSetIndex)],\n      functionName: 'get-reward-set-pox-address',\n    });\n\n    return unwrapMap(result as OptionalCV<TupleCV>, tuple => ({\n      pox_address: {\n        version: hexToBytes(\n          ((tuple.value['pox-addr'] as TupleCV).value['version'] as BufferCV).value\n        ),\n        hashbytes: hexToBytes(\n          ((tuple.value['pox-addr'] as TupleCV).value['hashbytes'] as BufferCV).value\n        ),\n      },\n      total_ustx: BigInt((tuple.value['total-ustx'] as UIntCV).value),\n    }));\n  }\n\n  /**\n   * Get number of seconds until next reward cycle\n   * @see {@link getSecondsUntilStackingDeadline}\n   */\n  async getSecondsUntilNextCycle(): Promise<number> {\n    const poxInfoPromise = this.getPoxInfo();\n    const targetBlockTimePromise = this.getTargetBlockTime();\n    const coreInfoPromise = this.getCoreInfo();\n\n    return Promise.all([poxInfoPromise, targetBlockTimePromise, coreInfoPromise]).then(\n      ([poxInfo, targetBlockTime, coreInfo]) => {\n        const blocksToNextCycle =\n          poxInfo.reward_cycle_length -\n          ((coreInfo.burn_block_height - poxInfo.first_burnchain_block_height) %\n            poxInfo.reward_cycle_length);\n        return blocksToNextCycle * targetBlockTime;\n      }\n    );\n  }\n\n  /**\n   * Get number of seconds until the end of the stacking deadline.\n   * This is the estimated time stackers have to submit their stacking\n   * transactions to be included in the upcoming reward cycle.\n   * @returns number of seconds\n   * **⚠️ Attention**: The returned number of seconds can be negative if the deadline has passed and the prepare phase has started.\n   * @see {@link getSecondsUntilNextCycle}\n   */\n  async getSecondsUntilStackingDeadline(): Promise<number> {\n    const poxInfoPromise = this.getPoxInfo();\n    const targetBlockTimePromise = this.getTargetBlockTime();\n\n    return Promise.all([poxInfoPromise, targetBlockTimePromise]).then(\n      ([poxInfo, targetBlockTime]) =>\n        poxInfo.next_cycle.blocks_until_prepare_phase * targetBlockTime\n    );\n  }\n\n  /**\n   * Get information on current PoX operation\n   *\n   * Periods:\n   * - Period 1: This is before the 2.1 fork.\n   * - Period 2: This is after the 2.1 fork, but before cycle (N+1).\n   * - Period 3: This is after cycle (N+1) has begun. Original PoX contract state will no longer have any impact on reward sets, account lock status, etc.\n   */\n  async getPoxOperationInfo(poxInfo?: V2PoxInfoResponse): Promise<PoxOperationInfo> {\n    poxInfo = poxInfo ?? (await this.getPoxInfo());\n\n    const poxContractVersions = [...poxInfo.contract_versions].sort(\n      (a, b) => a.activation_burnchain_block_height - b.activation_burnchain_block_height\n    ); // by activation height ASC (earliest first)\n    const [pox1, pox2, pox3, pox4] = poxContractVersions;\n\n    const activatedPoxs = poxContractVersions.filter(\n      (c: ContractVersionResponse) =>\n        (poxInfo?.current_burnchain_block_height as number) >= c.activation_burnchain_block_height\n    );\n    const current = activatedPoxs[activatedPoxs.length - 1];\n\n    return { period: PoxOperationPeriod.Period3, pox1, pox2, pox3, pox4, current };\n  }\n\n  /**\n   * Check if account has minimum require amount of Stacks for stacking\n   * @returns {Promise<boolean>} that resolves to a bool if the operation succeeds\n   */\n  async hasMinimumStx(): Promise<boolean> {\n    const balance = await this.getAccountBalance();\n    const min = BigInt((await this.getPoxInfo()).min_amount_ustx);\n    return balance >= min;\n  }\n\n  /**\n   * readonly `can-stack-stx`\n   *\n   * Check if account can lock stx\n   * @param {CanLockStxOptions} options - a required lock STX options object\n   * @returns {Promise<StackingEligibility>} that resolves to a StackingEligibility object if the operation succeeds\n   */\n  async canStack({ poxAddress, cycles }: CanLockStxOptions): Promise<StackingEligibility> {\n    const balancePromise: Promise<bigint> = this.getAccountBalance();\n    const poxInfoPromise = this.getPoxInfo();\n\n    return Promise.all([balancePromise, poxInfoPromise])\n      .then(([balance, poxInfo]) => {\n        const address = poxAddressToTuple(poxAddress);\n        const [contractAddress, contractName] = this.parseContractId(poxInfo.contract_id);\n\n        return fetchCallReadOnlyFunction({\n          client: this.client,\n          contractName,\n          contractAddress,\n          functionName: 'can-stack-stx',\n          senderAddress: this.address,\n          functionArgs: [\n            address,\n            uintCV(balance.toString()),\n            uintCV(poxInfo.reward_cycle_id),\n            uintCV(cycles.toString()),\n          ],\n        });\n      })\n      .then((responseCV: ClarityValue) => {\n        if (responseCV.type === ClarityType.ResponseOk) {\n          return {\n            eligible: true,\n          };\n        } else {\n          const errorCV = responseCV as ResponseErrorCV;\n          return {\n            eligible: false,\n            reason: StackingErrors[+cvToString(errorCV.value)],\n          };\n        }\n      });\n  }\n\n  /**\n   * `stack-stx`\n   *\n   * Generate and broadcast a stacking transaction to lock STX\n   * @param {LockStxOptions} options - a required lock STX options object\n   * @returns {Promise<string>} that resolves to a broadcasted txid if the operation succeeds\n   */\n  async stack({\n    amountMicroStx,\n    poxAddress,\n    cycles,\n    burnBlockHeight,\n    signerKey,\n    signerSignature,\n    maxAmount,\n    authId,\n    ...txOptions\n  }: LockStxOptions & BaseTxOptions): Promise<TxBroadcastResult> {\n    const poxInfo = await this.getPoxInfo();\n    const poxOperationInfo = await this.getPoxOperationInfo(poxInfo);\n\n    const contract = await this.getStackingContract(poxOperationInfo);\n\n    ensureLegacyBtcAddressForPox1({ contract, poxAddress });\n    ensureSignerArgsReadiness({ contract, signerKey, signerSignature, maxAmount, authId });\n\n    const callOptions = this.getStackOptions({\n      contract,\n      amountMicroStx,\n      cycles,\n      poxAddress,\n      burnBlockHeight,\n      signerKey,\n      signerSignature,\n      maxAmount,\n      authId,\n    });\n    const tx = await makeContractCall({\n      ...callOptions,\n      ...renamePrivateKey(txOptions),\n    });\n\n    return broadcastTransaction({ transaction: tx, client: this.client });\n  }\n\n  /**\n   * `stack-extend`\n   *\n   * Generate and broadcast a stacking transaction to extend locked STX (`pox-2.stack-extend`)\n   * @category PoX-2\n   * @param {StackExtendOptions} - a required extend STX options object\n   * @returns a broadcasted txid if the operation succeeds\n   */\n  async stackExtend({\n    extendCycles,\n    poxAddress,\n    signerKey,\n    signerSignature,\n    maxAmount,\n    authId,\n    ...txOptions\n  }: StackExtendOptions & BaseTxOptions): Promise<TxBroadcastResult> {\n    const poxInfo = await this.getPoxInfo();\n    const poxOperationInfo = await this.getPoxOperationInfo(poxInfo);\n\n    ensurePox2Activated(poxOperationInfo);\n    ensureSignerArgsReadiness({\n      contract: poxInfo.contract_id,\n      signerKey,\n      signerSignature,\n      maxAmount,\n      authId,\n    });\n\n    const callOptions = this.getStackExtendOptions({\n      contract: poxInfo.contract_id,\n      extendCycles,\n      poxAddress,\n      signerKey,\n      signerSignature,\n      maxAmount,\n      authId,\n    });\n    const tx = await makeContractCall({\n      ...callOptions,\n      ...renamePrivateKey(txOptions),\n    });\n\n    return broadcastTransaction({ transaction: tx, client: this.client });\n  }\n\n  /**\n   * Generate and broadcast a stacking transaction to increase locked STX (`pox-2.stack-increase`)\n   * @category PoX-2\n   * @param {StackIncreaseOptions} - a required increase STX options object\n   * @returns a broadcasted txid if the operation succeeds\n   */\n  async stackIncrease({\n    increaseBy,\n    signerKey,\n    signerSignature,\n    maxAmount,\n    authId,\n    ...txOptions\n  }: StackIncreaseOptions & BaseTxOptions): Promise<TxBroadcastResult> {\n    const poxInfo = await this.getPoxInfo();\n    const poxOperationInfo = await this.getPoxOperationInfo(poxInfo);\n    ensurePox2Activated(poxOperationInfo);\n    ensureSignerArgsReadiness({\n      contract: poxInfo.contract_id,\n      signerKey,\n      signerSignature,\n      maxAmount,\n      authId,\n    });\n\n    const callOptions = this.getStackIncreaseOptions({\n      contract: poxInfo.contract_id,\n      increaseBy,\n      signerKey,\n      signerSignature,\n      maxAmount,\n      authId,\n    });\n    const tx = await makeContractCall({\n      ...callOptions,\n      ...renamePrivateKey(txOptions),\n    });\n\n    return broadcastTransaction({ transaction: tx, client: this.client });\n  }\n\n  /**\n   * `delegate-stx`\n   *\n   * As a delegatee, generate and broadcast a transaction to create a delegation relationship\n   * @param {DelegateStxOptions} options - a required delegate STX options object\n   * @returns {Promise<string>} that resolves to a broadcasted txid if the operation succeeds\n   */\n  async delegateStx({\n    amountMicroStx,\n    delegateTo,\n    untilBurnBlockHeight,\n    poxAddress,\n    ...txOptions\n  }: // todo: should we provide manual contract definitions? (for users to choose which contract to use)\n  DelegateStxOptions & BaseTxOptions): Promise<TxBroadcastResult> {\n    const poxInfo = await this.getPoxInfo();\n    const poxOperationInfo = await this.getPoxOperationInfo(poxInfo);\n\n    const contract = await this.getStackingContract(poxOperationInfo);\n    ensureLegacyBtcAddressForPox1({ contract, poxAddress });\n\n    const callOptions = this.getDelegateOptions({\n      contract,\n      amountMicroStx,\n      delegateTo,\n      untilBurnBlockHeight,\n      poxAddress,\n    });\n\n    const tx = await makeContractCall({\n      ...callOptions,\n      ...renamePrivateKey(txOptions),\n    });\n\n    return broadcastTransaction({ transaction: tx, client: this.client });\n  }\n\n  /**\n   * `delegate-stack-stx`\n   *\n   * As a delegator, generate and broadcast transactions to stack for multiple delegatees. This will lock up tokens owned by the delegatees.\n   * @param {DelegateStackStxOptions} options - a required delegate stack STX options object\n   * @returns {Promise<string>} that resolves to a broadcasted txid if the operation succeeds\n   */\n  async delegateStackStx({\n    stacker,\n    amountMicroStx,\n    poxAddress,\n    burnBlockHeight,\n    cycles,\n    ...txOptions\n  }: DelegateStackStxOptions & BaseTxOptions): Promise<TxBroadcastResult> {\n    const poxInfo = await this.getPoxInfo();\n    const poxOperationInfo = await this.getPoxOperationInfo(poxInfo);\n\n    const contract = await this.getStackingContract(poxOperationInfo);\n    ensureLegacyBtcAddressForPox1({ contract, poxAddress });\n\n    const callOptions = this.getDelegateStackOptions({\n      contract,\n      stacker,\n      amountMicroStx,\n      poxAddress,\n      burnBlockHeight,\n      cycles,\n    });\n    const tx = await makeContractCall({\n      ...callOptions,\n      ...renamePrivateKey(txOptions),\n    });\n\n    return broadcastTransaction({ transaction: tx, client: this.client });\n  }\n\n  /**\n   * `delegate-stack-extend`\n   *\n   * As a delegator, generate and broadcast transactions to extend stack for multiple delegatees.\n   * @category PoX-2\n   * @param {DelegateStackExtendOptions} options - a required delegate stack extend STX options object\n   * @returns {Promise<string>} that resolves to a broadcasted txid if the operation succeeds\n   */\n  async delegateStackExtend({\n    stacker,\n    poxAddress,\n    extendCount,\n    ...txOptions\n  }: DelegateStackExtendOptions & BaseTxOptions): Promise<TxBroadcastResult> {\n    const poxInfo = await this.getPoxInfo();\n    const contract = poxInfo.contract_id;\n\n    const callOptions = this.getDelegateStackExtendOptions({\n      contract,\n      stacker,\n      poxAddress,\n      extendCount,\n    });\n    const tx = await makeContractCall({\n      ...callOptions,\n      ...renamePrivateKey(txOptions),\n    });\n\n    return broadcastTransaction({ transaction: tx, client: this.client });\n  }\n\n  /**\n   * As a delegator, generate and broadcast transactions to stack increase for multiple delegatees.\n   * @category PoX-2\n   * @param {DelegateStackIncreaseOptions} - a required delegate stack increase STX options object\n   * @returns {Promise<string>} that resolves to a broadcasted txid if the operation succeeds\n   */\n  async delegateStackIncrease({\n    stacker,\n    poxAddress,\n    increaseBy,\n    ...txOptions\n  }: DelegateStackIncreaseOptions & BaseTxOptions): Promise<TxBroadcastResult> {\n    const poxInfo = await this.getPoxInfo();\n    const poxOperationInfo = await this.getPoxOperationInfo(poxInfo);\n    ensurePox2Activated(poxOperationInfo);\n\n    const callOptions = this.getDelegateStackIncreaseOptions({\n      contract: poxInfo.contract_id,\n      stacker,\n      poxAddress,\n      increaseBy,\n    });\n    const tx = await makeContractCall({\n      ...callOptions,\n      ...renamePrivateKey(txOptions),\n    });\n\n    return broadcastTransaction({ transaction: tx, client: this.client });\n  }\n\n  /**\n   * As a delegator, generate and broadcast a transaction to commit partially committed delegatee tokens\n   * @param {StackAggregationCommitOptions} options - a required stack aggregation commit options object\n   * @returns {Promise<string>} that resolves to a broadcasted txid if the operation succeeds\n   */\n  async stackAggregationCommit({\n    poxAddress,\n    rewardCycle,\n    signerKey,\n    signerSignature,\n    maxAmount,\n    authId,\n    ...txOptions\n  }: StackAggregationCommitOptions & BaseTxOptions): Promise<TxBroadcastResult> {\n    const contract = await this.getStackingContract();\n    ensureLegacyBtcAddressForPox1({ contract, poxAddress });\n    ensureSignerArgsReadiness({ contract, signerKey, signerSignature, maxAmount, authId });\n\n    const callOptions = this.getStackAggregationCommitOptions({\n      contract,\n      poxAddress,\n      rewardCycle,\n      signerKey,\n      signerSignature,\n      maxAmount,\n      authId,\n    });\n    const tx = await makeContractCall({\n      ...callOptions,\n      ...renamePrivateKey(txOptions),\n    });\n\n    return broadcastTransaction({ transaction: tx, client: this.client });\n  }\n\n  /**\n   * As a delegator, generate and broadcast a transaction to commit partially committed delegatee tokens\n   *\n   * Commit partially stacked STX and allocate a new PoX reward address slot.\n   *   This allows a stacker/delegate to lock fewer STX than the minimal threshold in multiple transactions,\n   *   so long as: 1. The pox-addr is the same.\n   *               2. This \"commit\" transaction is called _before_ the PoX anchor block.\n   *   This ensures that each entry in the reward set returned to the stacks-node is greater than the threshold,\n   *   but does not require it be all locked up within a single transaction\n   *\n   * `stack-aggregation-commit-indexed` returns (ok uint) on success, where the given uint is the reward address's index in the list of reward\n   * addresses allocated in this reward cycle. This index can then be passed to `stack-aggregation-increase`\n   * to later increment the STX this PoX address represents, in amounts less than the stacking minimum.\n   *\n   * @category PoX-2\n   * @param {StackAggregationCommitOptions} options - a required stack aggregation commit options object\n   * @returns {Promise<string>} that resolves to a broadcasted txid if the operation succeeds\n   */\n  async stackAggregationCommitIndexed({\n    poxAddress,\n    rewardCycle,\n    signerKey,\n    signerSignature,\n    maxAmount,\n    authId,\n    ...txOptions\n  }: StackAggregationCommitOptions & BaseTxOptions): Promise<TxBroadcastResult> {\n    const contract = await this.getStackingContract();\n    ensureLegacyBtcAddressForPox1({ contract, poxAddress });\n    ensureSignerArgsReadiness({ contract, signerKey, signerSignature, maxAmount, authId });\n\n    const callOptions = this.getStackAggregationCommitOptionsIndexed({\n      contract,\n      poxAddress,\n      rewardCycle,\n      signerKey,\n      signerSignature,\n      maxAmount,\n      authId,\n    });\n    const tx = await makeContractCall({\n      ...callOptions,\n      ...renamePrivateKey(txOptions),\n    });\n\n    return broadcastTransaction({ transaction: tx, client: this.client });\n  }\n\n  /**\n   * As a delegator, generate and broadcast a transaction to increase partial commitment committed delegatee tokens\n   * @param {StackAggregationIncreaseOptions} options - a required stack aggregation increase options object\n   * @category PoX-2\n   * @returns {Promise<string>} that resolves to a broadcasted txid if the operation succeeds\n   */\n  async stackAggregationIncrease({\n    poxAddress,\n    rewardCycle,\n    rewardIndex,\n    signerKey,\n    signerSignature,\n    maxAmount,\n    authId,\n    ...txOptions\n  }: StackAggregationIncreaseOptions & BaseTxOptions): Promise<TxBroadcastResult> {\n    // todo: deprecate this method in favor of Indexed as soon as PoX-2 is live\n    const contract = await this.getStackingContract();\n    ensureLegacyBtcAddressForPox1({ contract, poxAddress });\n    ensureSignerArgsReadiness({ contract, signerKey, signerSignature, maxAmount, authId });\n\n    const callOptions = this.getStackAggregationIncreaseOptions({\n      contract,\n      poxAddress,\n      rewardCycle,\n      rewardCycleIndex: rewardIndex,\n      signerKey,\n      signerSignature,\n      maxAmount,\n      authId,\n    });\n    const tx = await makeContractCall({\n      ...callOptions,\n      ...renamePrivateKey(txOptions),\n    });\n\n    return broadcastTransaction({ transaction: tx, client: this.client });\n  }\n\n  /**\n   * As a delegatee, generate and broadcast a transaction to terminate the delegation relationship\n   * @param {string} privateKey - the private key to be used for the revoke call\n   * @returns {Promise<string>} that resolves to a broadcasted txid if the operation succeeds\n   */\n  async revokeDelegateStx(privateKey: string): Promise<TxBroadcastResult>;\n  /**\n   * As a delegatee, generate and broadcast a transaction to terminate the delegation relationship\n   * @param {BaseTxOptions} txOptions - the private key, fee, and nonce to be used for the revoke call\n   * @returns {Promise<string>} that resolves to a broadcasted txid if the operation succeeds\n   */\n  async revokeDelegateStx(txOptions: BaseTxOptions): Promise<TxBroadcastResult>;\n  async revokeDelegateStx(arg: string | BaseTxOptions): Promise<TxBroadcastResult> {\n    if (typeof arg === 'string') arg = { privateKey: arg };\n\n    const poxInfo = await this.getPoxInfo();\n    const contract = poxInfo.contract_id;\n\n    const callOptions = this.getRevokeDelegateStxOptions(contract);\n\n    const tx = await makeContractCall({\n      ...callOptions,\n      ...renamePrivateKey(arg),\n    });\n\n    return broadcastTransaction({ transaction: tx, client: this.client });\n  }\n\n  getStackOptions({\n    amountMicroStx,\n    poxAddress,\n    cycles,\n    contract,\n    burnBlockHeight,\n    signerKey,\n    signerSignature,\n    maxAmount,\n    authId,\n  }: {\n    cycles: number;\n    poxAddress: string;\n    amountMicroStx: IntegerType;\n    contract: string;\n    burnBlockHeight: number;\n    signerKey?: string;\n    signerSignature?: string;\n    maxAmount?: IntegerType;\n    authId?: IntegerType;\n  }) {\n    const address = poxAddressToTuple(poxAddress);\n    const [contractAddress, contractName] = this.parseContractId(contract);\n\n    const functionArgs = [\n      uintCV(amountMicroStx),\n      address,\n      uintCV(burnBlockHeight),\n      uintCV(cycles),\n    ] as ClarityValue[];\n\n    if (signerKey && maxAmount && typeof authId !== 'undefined') {\n      functionArgs.push(signerSignature ? someCV(bufferCV(hexToBytes(signerSignature))) : noneCV());\n      functionArgs.push(bufferCV(hexToBytes(signerKey)));\n      functionArgs.push(uintCV(maxAmount));\n      functionArgs.push(uintCV(authId));\n    }\n\n    const callOptions: ContractCallOptions = {\n      client: this.client,\n      contractAddress,\n      contractName,\n      functionName: 'stack-stx',\n      functionArgs,\n      validateWithAbi: true,\n      network: this.network,\n    };\n    return callOptions;\n  }\n\n  getStackExtendOptions({\n    extendCycles,\n    poxAddress,\n    contract,\n    signerKey,\n    signerSignature,\n    maxAmount,\n    authId,\n  }: {\n    extendCycles: number;\n    poxAddress: string;\n    contract: string;\n    signerKey?: string;\n    signerSignature?: string;\n    maxAmount?: IntegerType;\n    authId?: IntegerType;\n  }) {\n    const address = poxAddressToTuple(poxAddress);\n    const [contractAddress, contractName] = this.parseContractId(contract);\n\n    const functionArgs = [uintCV(extendCycles), address] as ClarityValue[];\n\n    if (signerKey && maxAmount && typeof authId !== 'undefined') {\n      functionArgs.push(signerSignature ? someCV(bufferCV(hexToBytes(signerSignature))) : noneCV());\n      functionArgs.push(bufferCV(hexToBytes(signerKey)));\n      functionArgs.push(uintCV(maxAmount));\n      functionArgs.push(uintCV(authId));\n    }\n\n    const callOptions: ContractCallOptions = {\n      client: this.client,\n      contractAddress,\n      contractName,\n      functionName: 'stack-extend',\n      functionArgs,\n      validateWithAbi: true,\n      network: this.network,\n    };\n    return callOptions;\n  }\n\n  getStackIncreaseOptions({\n    increaseBy,\n    contract,\n    signerKey,\n    signerSignature,\n    maxAmount,\n    authId,\n  }: {\n    increaseBy: IntegerType;\n    contract: string;\n    signerKey?: string;\n    signerSignature?: string;\n    maxAmount?: IntegerType;\n    authId?: IntegerType;\n  }) {\n    const [contractAddress, contractName] = this.parseContractId(contract);\n\n    const functionArgs = [uintCV(increaseBy)] as ClarityValue[];\n\n    if (signerKey && maxAmount && typeof authId !== 'undefined') {\n      functionArgs.push(signerSignature ? someCV(bufferCV(hexToBytes(signerSignature))) : noneCV());\n      functionArgs.push(bufferCV(hexToBytes(signerKey)));\n      functionArgs.push(uintCV(maxAmount));\n      functionArgs.push(uintCV(authId));\n    }\n\n    const callOptions: ContractCallOptions = {\n      client: this.client,\n      contractAddress,\n      contractName,\n      functionName: 'stack-increase',\n      functionArgs,\n      validateWithAbi: true,\n      network: this.network,\n    };\n    return callOptions;\n  }\n\n  getDelegateOptions({\n    contract,\n    amountMicroStx,\n    delegateTo,\n    untilBurnBlockHeight,\n    poxAddress,\n  }: {\n    contract: string;\n    amountMicroStx: IntegerType;\n    delegateTo: string;\n    untilBurnBlockHeight?: number;\n    poxAddress?: string;\n  }) {\n    const address = poxAddress ? someCV(poxAddressToTuple(poxAddress)) : noneCV();\n    const [contractAddress, contractName] = this.parseContractId(contract);\n    const callOptions: ContractCallOptions = {\n      client: this.client,\n      contractAddress,\n      contractName,\n      functionName: 'delegate-stx',\n      functionArgs: [\n        uintCV(amountMicroStx),\n        principalCV(delegateTo),\n        untilBurnBlockHeight ? someCV(uintCV(untilBurnBlockHeight)) : noneCV(),\n        address,\n      ],\n      validateWithAbi: true,\n      network: this.network,\n    };\n    return callOptions;\n  }\n\n  getDelegateStackOptions({\n    contract,\n    stacker,\n    amountMicroStx,\n    poxAddress,\n    burnBlockHeight,\n    cycles,\n  }: {\n    contract: string;\n    stacker: string;\n    amountMicroStx: IntegerType;\n    poxAddress: string;\n    burnBlockHeight: number;\n    cycles: number;\n  }) {\n    const address = poxAddressToTuple(poxAddress);\n    const [contractAddress, contractName] = this.parseContractId(contract);\n\n    const callOptions: ContractCallOptions = {\n      client: this.client,\n      contractAddress,\n      contractName,\n      functionName: 'delegate-stack-stx',\n      functionArgs: [\n        principalCV(stacker),\n        uintCV(amountMicroStx),\n        address,\n        uintCV(burnBlockHeight),\n        uintCV(cycles),\n      ],\n      validateWithAbi: true,\n      network: this.network,\n    };\n\n    return callOptions;\n  }\n\n  getDelegateStackExtendOptions({\n    contract,\n    stacker,\n    poxAddress,\n    extendCount,\n  }: {\n    contract: string;\n    stacker: string;\n    poxAddress: string;\n    extendCount: number;\n  }) {\n    const address = poxAddressToTuple(poxAddress);\n    const [contractAddress, contractName] = this.parseContractId(contract);\n\n    const callOptions: ContractCallOptions = {\n      client: this.client,\n      contractAddress,\n      contractName,\n      functionName: 'delegate-stack-extend',\n      functionArgs: [principalCV(stacker), address, uintCV(extendCount)],\n      validateWithAbi: true,\n      network: this.network,\n    };\n\n    return callOptions;\n  }\n\n  getDelegateStackIncreaseOptions({\n    contract,\n    stacker,\n    poxAddress,\n    increaseBy,\n  }: {\n    contract: string;\n    stacker: string;\n    poxAddress: string;\n    increaseBy: IntegerType;\n  }) {\n    const address = poxAddressToTuple(poxAddress);\n    const [contractAddress, contractName] = this.parseContractId(contract);\n    const callOptions: ContractCallOptions = {\n      client: this.client,\n      contractAddress,\n      contractName,\n      functionName: 'delegate-stack-increase',\n      functionArgs: [principalCV(stacker), address, uintCV(increaseBy)],\n      validateWithAbi: true,\n      network: this.network,\n    };\n\n    return callOptions;\n  }\n\n  getStackAggregationCommitOptions({\n    contract,\n    poxAddress,\n    rewardCycle,\n    signerKey,\n    signerSignature,\n    maxAmount,\n    authId,\n  }: {\n    contract: string;\n    poxAddress: string;\n    rewardCycle: number;\n    signerKey?: string;\n    signerSignature?: string;\n    maxAmount?: IntegerType;\n    authId?: IntegerType;\n  }) {\n    const address = poxAddressToTuple(poxAddress);\n    const [contractAddress, contractName] = this.parseContractId(contract);\n\n    const functionArgs = [address, uintCV(rewardCycle)] as ClarityValue[];\n\n    if (signerKey && maxAmount && typeof authId !== 'undefined') {\n      functionArgs.push(signerSignature ? someCV(bufferCV(hexToBytes(signerSignature))) : noneCV());\n      functionArgs.push(bufferCV(hexToBytes(signerKey)));\n      functionArgs.push(uintCV(maxAmount));\n      functionArgs.push(uintCV(authId));\n    }\n\n    const callOptions: ContractCallOptions = {\n      client: this.client,\n      contractAddress,\n      contractName,\n      functionName: 'stack-aggregation-commit',\n      functionArgs,\n      validateWithAbi: true,\n      network: this.network,\n    };\n    return callOptions;\n  }\n\n  getStackAggregationIncreaseOptions({\n    contract,\n    poxAddress,\n    rewardCycle,\n    rewardCycleIndex,\n    signerKey,\n    signerSignature,\n    maxAmount,\n    authId,\n  }: {\n    contract: string;\n    poxAddress: string;\n    rewardCycle: number;\n    rewardCycleIndex: number;\n    signerKey?: string;\n    signerSignature?: string;\n    maxAmount?: IntegerType;\n    authId?: IntegerType;\n  }) {\n    const address = poxAddressToTuple(poxAddress);\n    const [contractAddress, contractName] = this.parseContractId(contract);\n\n    const functionArgs = [address, uintCV(rewardCycle), uintCV(rewardCycleIndex)] as ClarityValue[];\n\n    if (signerKey && maxAmount && typeof authId !== 'undefined') {\n      functionArgs.push(signerSignature ? someCV(bufferCV(hexToBytes(signerSignature))) : noneCV());\n      functionArgs.push(bufferCV(hexToBytes(signerKey)));\n      functionArgs.push(uintCV(maxAmount));\n      functionArgs.push(uintCV(authId));\n    }\n\n    const callOptions: ContractCallOptions = {\n      client: this.client,\n      contractAddress,\n      contractName,\n      functionName: 'stack-aggregation-increase',\n      functionArgs,\n      validateWithAbi: true,\n      network: this.network,\n    };\n    return callOptions;\n  }\n\n  getStackAggregationCommitOptionsIndexed({\n    contract,\n    poxAddress,\n    rewardCycle,\n    signerKey,\n    signerSignature,\n    maxAmount,\n    authId,\n  }: {\n    contract: string;\n    poxAddress: string;\n    rewardCycle: number;\n    signerKey?: string;\n    signerSignature?: string;\n    maxAmount?: IntegerType;\n    authId?: IntegerType;\n  }) {\n    const address = poxAddressToTuple(poxAddress);\n    const [contractAddress, contractName] = this.parseContractId(contract);\n\n    const functionArgs = [address, uintCV(rewardCycle)] as ClarityValue[];\n\n    if (signerKey && maxAmount && typeof authId !== 'undefined') {\n      functionArgs.push(signerSignature ? someCV(bufferCV(hexToBytes(signerSignature))) : noneCV());\n      functionArgs.push(bufferCV(hexToBytes(signerKey)));\n      functionArgs.push(uintCV(maxAmount));\n      functionArgs.push(uintCV(authId));\n    }\n\n    const callOptions: ContractCallOptions = {\n      client: this.client,\n      contractAddress,\n      contractName,\n      functionName: 'stack-aggregation-commit-indexed',\n      functionArgs,\n      validateWithAbi: true,\n      network: this.network,\n    };\n    return callOptions;\n  }\n\n  getRevokeDelegateStxOptions(contract: string) {\n    const [contractAddress, contractName] = this.parseContractId(contract);\n    const callOptions: ContractCallOptions = {\n      client: this.client,\n      contractAddress,\n      contractName,\n      functionName: 'revoke-delegate-stx',\n      functionArgs: [],\n      validateWithAbi: true,\n      network: this.network,\n    };\n    return callOptions;\n  }\n\n  /**\n   * Check stacking status\n   *\n   * @returns {Promise<StackerInfo>} that resolves to a StackerInfo object if the operation succeeds\n   */\n  async getStatus(): Promise<StackerInfo> {\n    const poxInfo = await this.getPoxInfo();\n    const [contractAddress, contractName] = this.parseContractId(poxInfo.contract_id);\n    const account = await this.getAccountStatus();\n    const functionName = 'get-stacker-info';\n\n    return fetchCallReadOnlyFunction({\n      contractAddress,\n      contractName,\n      functionName,\n      senderAddress: this.address,\n      functionArgs: [principalCV(this.address)],\n      client: this.client,\n    }).then((responseCV: ClarityValue) => {\n      if (responseCV.type === ClarityType.OptionalSome) {\n        const someCV = responseCV;\n        const tupleCV: TupleCV = someCV.value as TupleCV;\n        const poxAddress: TupleCV = tupleCV.value['pox-addr'] as TupleCV;\n        const firstRewardCycle: UIntCV = tupleCV.value['first-reward-cycle'] as UIntCV;\n        const lockPeriod: UIntCV = tupleCV.value['lock-period'] as UIntCV;\n        const version: BufferCV = poxAddress.value['version'] as BufferCV;\n        const hashbytes: BufferCV = poxAddress.value['hashbytes'] as BufferCV;\n\n        return {\n          stacked: true,\n          details: {\n            first_reward_cycle: Number(firstRewardCycle.value),\n            lock_period: Number(lockPeriod.value),\n            unlock_height: account.unlock_height,\n            pox_address: {\n              version: hexToBytes(version.value),\n              hashbytes: hexToBytes(hashbytes.value),\n            },\n          },\n        };\n      } else if (responseCV.type === ClarityType.OptionalNone) {\n        return {\n          stacked: false,\n        };\n      } else {\n        throw new Error(`Error fetching stacker info`);\n      }\n    });\n  }\n\n  /**\n   * Check delegation status\n   *\n   * @returns {Promise<DelegationInfo>} that resolves to a DelegationInfo object if the operation succeeds\n   */\n  async getDelegationStatus(): Promise<DelegationInfo> {\n    const poxInfo = await this.getPoxInfo();\n    const [contractAddress, contractName] = this.parseContractId(poxInfo.contract_id);\n    const functionName = 'get-delegation-info';\n\n    return fetchCallReadOnlyFunction({\n      contractAddress,\n      contractName,\n      functionName,\n      functionArgs: [principalCV(this.address)],\n      senderAddress: this.address,\n      client: this.client,\n    }).then((responseCV: ClarityValue) => {\n      if (responseCV.type === ClarityType.OptionalSome) {\n        const tupleCV = responseCV.value as TupleCV;\n        const amountMicroStx = tupleCV.value['amount-ustx'] as UIntCV;\n        const delegatedTo = tupleCV.value['delegated-to'] as PrincipalCV;\n\n        const poxAddress = unwrapMap(tupleCV.value['pox-addr'] as OptionalCV<TupleCV>, tuple => ({\n          version: hexToBytes((tuple.value['version'] as BufferCV).value)[0],\n          hashbytes: hexToBytes((tuple.value['hashbytes'] as BufferCV).value),\n        }));\n        const untilBurnBlockHeight = unwrap(tupleCV.value['until-burn-ht'] as OptionalCV<UIntCV>);\n\n        return {\n          delegated: true,\n          details: {\n            amount_micro_stx: BigInt(amountMicroStx.value),\n            delegated_to: delegatedTo.value,\n            pox_address: poxAddress,\n            until_burn_ht: untilBurnBlockHeight ? Number(untilBurnBlockHeight.value) : undefined,\n          },\n        };\n      } else if (responseCV.type === ClarityType.OptionalNone) {\n        return {\n          delegated: false,\n        };\n      } else {\n        throw new Error(`Error fetching delegation info`);\n      }\n    });\n  }\n\n  /**\n   * Call the `verify-signer-key-sig` read-only function on the PoX contract.\n   * @returns (async) a boolean indicating if the signature is valid\n   */\n  async verifySignerKeySignature({\n    topic,\n    poxAddress,\n    rewardCycle,\n    period,\n    signerSignature,\n    signerKey,\n    amount,\n    maxAmount,\n    authId,\n  }: {\n    topic: string;\n    poxAddress: string;\n    rewardCycle: number;\n    period: number;\n    signerSignature?: string;\n    signerKey: string;\n    amount: IntegerType;\n    maxAmount: IntegerType;\n    authId: IntegerType;\n  }): Promise<boolean> {\n    const poxInfo = await this.getPoxInfo();\n\n    const [contractAddress, contractName] = this.parseContractId(poxInfo.contract_id);\n    const functionName = 'verify-signer-key-sig';\n\n    const functionArgs = [\n      poxAddressToTuple(poxAddress),\n      uintCV(rewardCycle),\n      stringAsciiCV(topic),\n      uintCV(period),\n      signerSignature ? someCV(bufferCV(hexToBytes(signerSignature))) : noneCV(),\n      bufferCV(hexToBytes(signerKey)),\n      uintCV(amount),\n      uintCV(maxAmount),\n      uintCV(authId),\n    ];\n\n    return fetchCallReadOnlyFunction({\n      contractAddress,\n      contractName,\n      functionName,\n      functionArgs,\n      senderAddress: this.address,\n      client: this.client,\n    }).then(responseCV => responseCV.type === ClarityType.ResponseOk);\n  }\n\n  /**\n   * @returns {Promise<string>} that resolves to the contract id (address and name) to use for stacking\n   */\n  async getStackingContract(poxOperationInfo?: PoxOperationInfo): Promise<string> {\n    poxOperationInfo = poxOperationInfo ?? (await this.getPoxOperationInfo());\n    switch (poxOperationInfo.period) {\n      case PoxOperationPeriod.Period1:\n        return poxOperationInfo.pox1.contract_id;\n      case PoxOperationPeriod.Period2a:\n      case PoxOperationPeriod.Period2b:\n        // in the 2.1 fork we can always stack to PoX-2\n        return poxOperationInfo.pox2.contract_id;\n      case PoxOperationPeriod.Period3:\n      default:\n        return poxOperationInfo.current.contract_id;\n    }\n  }\n\n  /**\n   * Adjust microstacks amount for locking after taking into account transaction fees\n   *\n   * @returns {StacksTransactionWire} that resolves to a transaction object if the operation succeeds\n   */\n  modifyLockTxFee({\n    tx,\n    amountMicroStx,\n  }: {\n    tx: StacksTransactionWire;\n    amountMicroStx: IntegerType;\n  }) {\n    const fee = getFee(tx.auth);\n    (tx.payload as ContractCallPayload).functionArgs[0] = uintCV(intToBigInt(amountMicroStx) - fee);\n    return tx;\n  }\n\n  /**\n   * Parses a contract identifier and ensures it is formatted correctly\n   *\n   * @returns {Array<string>} a contract address and name\n   */\n  parseContractId(contract: string): string[] {\n    // todo: move this function to a standalone utility, and @ignore deprecate it here\n    const parts = contract.split('.');\n\n    if (parts.length === 2 && validateStacksAddress(parts[0]) && parts[1].startsWith('pox')) {\n      return parts;\n    }\n\n    throw new Error('Stacking contract ID is malformed');\n  }\n\n  /**\n   * Generates a `signer-sig` string for the current PoX contract.\n   */\n  signPoxSignature({\n    topic,\n    poxAddress,\n    rewardCycle,\n    period,\n    signerPrivateKey,\n    authId,\n    maxAmount,\n  }: {\n    topic: `${Pox4SignatureTopic}`;\n    poxAddress: string;\n    rewardCycle: number;\n    period: number;\n    signerPrivateKey: PrivateKey;\n    maxAmount: IntegerType;\n    authId: IntegerType;\n  }) {\n    // todo: in the future add logic to determine if a later version of pox\n    // needs a different domain and thus use a different `signPox4SignatureHash`\n    return signPox4SignatureHash({\n      topic,\n      poxAddress,\n      rewardCycle,\n      period,\n      network: this.network,\n      privateKey: signerPrivateKey,\n      maxAmount,\n      authId,\n    });\n  }\n}\n\n/** @ignore Rename `privateKey` to `senderKey`, for backwards compatibility */\nfunction renamePrivateKey(txOptions: BaseTxOptions) {\n  // @ts-ignore\n  txOptions.senderKey = txOptions.privateKey;\n  // @ts-ignore\n  delete txOptions.privateKey;\n  return txOptions as any as {\n    fee?: IntegerType;\n    nonce?: IntegerType;\n    senderKey: string;\n  };\n}\n\n/** @beta @ignore Type export subject to change*/\nexport interface V2CoreInfoResponse {\n  burn_block_height: number;\n  stable_pox_consensus: string;\n}\n\n/** @beta @ignore Type export subject to change*/\nexport interface CycleInfoResponse {\n  id: number;\n  min_threshold_ustx: number;\n  stacked_ustx: number;\n  is_pox_active: boolean;\n}\n\n/** @beta @ignore Type export subject to change*/\nexport interface ContractVersionResponse {\n  contract_id: ContractIdString;\n  activation_burnchain_block_height: number;\n  first_reward_cycle_id: number;\n}\n\n/** @beta @ignore Type export subject to change*/\nexport interface V2PoxInfoResponse {\n  contract_id: string;\n  contract_versions: ContractVersionResponse[];\n  current_burnchain_block_height?: number;\n  first_burnchain_block_height: number;\n  min_amount_ustx: string;\n  next_reward_cycle_in: number;\n  prepare_cycle_length: number;\n  prepare_phase_block_length: number;\n  rejection_fraction: number;\n  rejection_votes_left_required: number;\n  reward_cycle_id: number;\n  reward_cycle_length: number;\n  reward_phase_block_length: number;\n  reward_slots: number;\n  current_cycle: CycleInfoResponse;\n  next_cycle: CycleInfoResponse & {\n    min_increment_ustx: number;\n    prepare_phase_start_block_height: number;\n    blocks_until_prepare_phase: number;\n    reward_phase_start_block_height: number;\n    blocks_until_reward_phase: number;\n    ustx_until_pox_rejection: number;\n  };\n}\n\n/** @beta @ignore Type export subject to change*/\nexport interface V1InfoBlockTimesResponse {\n  mainnet: {\n    target_block_time: number;\n  };\n  testnet: {\n    target_block_time: number;\n  };\n}\n\n/** @beta @ignore Type export subject to change*/\nexport interface ExtendedAccountBalancesResponse {\n  stx: {\n    balance: string;\n    total_sent: string;\n    total_received: string;\n    locked: string;\n    lock_tx_id: string;\n    lock_height: number;\n    burnchain_lock_height: number;\n    burnchain_unlock_height: number;\n  };\n  fungible_tokens: any;\n  non_fungible_tokens: any;\n}\n\n/** @beta @ignore Type export subject to change*/\nexport interface ExtendedAccountBalances {\n  stx: {\n    balance: bigint;\n    total_sent: bigint;\n    total_received: bigint;\n    locked: bigint;\n    lock_tx_id: string;\n    lock_height: number;\n    burnchain_lock_height: number;\n    burnchain_unlock_height: number;\n  };\n  fungible_tokens: any;\n  non_fungible_tokens: any;\n}\n\n/** @beta @ignore Type export subject to change*/\nexport interface PaginationOptions {\n  limit: number;\n  offset: number;\n}\n\n/** @beta @ignore Type export subject to change*/\nexport interface BaseErrorResponse {\n  error: string;\n}\n"],"names":["root","factory","exports","module","define","amd","this","leafPrototypes","getProto","number","n","Number","isSafeInteger","Error","bool","b","bytes","lengths","Uint8Array","TypeError","length","includes","hash","create","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","output","out","min","Object","defineProperty","value","assert","SHA2","_assert_js_1","utils_js_1","Hash","constructor","padOffset","isLE","super","pos","buffer","view","createView","update","data","default","len","toBytes","take","Math","set","subarray","process","dataView","roundClean","digestInto","fill","i","byteOffset","setBigUint64","_32n","BigInt","_u32_max","wh","wl","h","l","setUint32","oview","outLen","state","get","digest","res","slice","destroy","_cloneInto","to","crypto","node","undefined","web","self","sha224","sha256","_sha2_js_1","Maj","a","c","SHA256_K","Uint32Array","IV","SHA256_W","SHA256","A","B","C","D","E","F","G","H","offset","getUint32","W15","W2","s0","rotr","s1","T1","T2","SHA224","wrapConstructor","randomBytes","wrapConstructorWithOpts","checkOpts","concatBytes","utf8ToBytes","asyncLoop","nextTick","hexToBytes","bytesToHex","u32","u8","crypto_1","arr","byteLength","floor","DataView","word","shift","hexes","Array","from","v","toString","padStart","str","TextEncoder","encode","uint8a","hex","array","j","hexByte","byte","parseInt","isNaN","async","iters","tick","cb","ts","Date","now","diff","arrays","every","reduce","result","pad","clone","defaults","opts","obj","prototype","call","assign","hashConstructor","hashC","message","tmp","hashCons","msg","bytesLength","getRandomValues","ALPHABET","BASE_MAP","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","source","psz","zeroes","size","b256","carry","it3","it4","vch","ArrayBuffer","isView","isArray","pbegin","pend","b58","it1","it2","repeat","decode","string","lookup","revLookup","code","basex","c32ToB58","b58ToC32","c32addressDecode","c32address","versions","checksum_1","base58check","utils_1","mainnet","p2pkh","p2sh","testnet","ADDR_BITCOIN_TO_STACKS","ADDR_STACKS_TO_BITCOIN","version","hash160hex","match","c32checkEncode","c32addr","c32checkDecode","b58check","addrInfo","hash160String","addrVersion","prefix","stacksVersion","c32string","bitcoinVersion","sha256_1","dataBytes","prefixBytes","checksum","forEach","check","index","encoding_1","c32checksum","dataHex","dataHash","toLowerCase","versionHex","checksumHex","c32str","c32encode","c32","c32data","c32normalize","c32decode","versionChar","indexOf","substring","c32input","toUpperCase","replace","inputHex","minLength","currentCode","nextCode","nextBits","nextLowBits","curC32Digit","unshift","C32leadingZeros","zeroPrefix","TextDecoder","numLeadingZeroBytesInHex","count","join","numLeadingZeroBytes","carryBits","currentValue","currentHexDigit","hexLeadingZeros","hexStr","address_1","enumerable","HASH_UNDEFINED","MAX_SAFE_INTEGER","argsTag","boolTag","dateTag","funcTag","genTag","mapTag","numberTag","objectTag","promiseTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","g","freeSelf","Function","freeExports","nodeType","freeModule","moduleExports","addMapEntry","map","pair","addSetEntry","add","arrayReduce","iteratee","accumulator","initAccum","isHostObject","e","mapToArray","key","overArg","func","transform","arg","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","exec","keys","IE_PROTO","funcToString","hasOwnProperty","objectToString","reIsNative","RegExp","Buffer","Symbol","getPrototype","getPrototypeOf","objectCreate","propertyIsEnumerable","splice","nativeGetSymbols","getOwnPropertySymbols","nativeIsBuffer","isBuffer","nativeKeys","getNative","Map","Promise","Set","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","entries","clear","entry","ListCache","MapCache","Stack","__data__","assignValue","object","objValue","eq","assocIndexOf","baseClone","isDeep","isFull","customizer","stack","isObject","isArr","input","initCloneArray","copyArray","tag","getTag","isFunc","copy","cloneBuffer","isPrototype","proto","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","symbol","Ctor","cloneArrayBuffer","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","initCloneByTag","stacked","props","keysFunc","symbolsFunc","values","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","arrayBuffer","newValue","getMapData","type","getValue","isFunction","test","baseIsNative","has","pop","push","cache","pairs","LARGE_ARRAY_SIZE","isIndex","other","resolve","ctorString","isArrayLike","isLength","inherited","isObjectLike","isArrayLikeObject","isArguments","baseTimes","String","skipIndexes","arrayLikeKeys","baseKeys","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","id","loaded","__webpack_modules__","getter","__esModule","d","t","mode","then","ns","r","def","current","getOwnPropertyNames","definition","o","globalThis","window","prop","toStringTag","nmd","paths","children","intToBytes","isInteger","RangeError","without0x","hexToBigInt","intToHex","integer","bytesToTwosBigInt","width","nthBit","_","u","asciiToBytes","byteArray","bytesToAscii","fromCharCode","apply","isNotOctet","octet","octetsToBytes","numbers","some","elements","clazz","name","defaultFetchOpts","referrerPolicy","headers","fetchWrapper","init","fetchOpts","fetch","createFetchFn","args","fetchLib","middlewares","argsForCreateFetchFn","url","fetchParams","middleware","pre","response","post","ChainId","PeerNetworkId","AddressVersion","TransactionVersion","Mainnet","chainId","transactionVersion","peerNetworkId","magicBytes","bootAddress","addressVersion","singleSig","MainnetSingleSig","multiSig","MainnetMultiSig","client","baseUrl","STACKS_TESTNET","Testnet","TestnetSingleSig","TestnetMultiSig","STACKS_DEVNET","STACKS_MOCKNET","StacksNetworks","network","networkFromName","TransactionError","captureStackTrace","SerializationError","NoEstimateAvailableError","SigningError","writeUInt8","destination","writeUInt32BE","writeUInt32LE","enumCheckFunctions","isEnum","enumVariable","checker","newChecker","enumValues","filter","enumValueSet","createEnumChecker","consumed","readBytes","readUInt32BE","readUInt8","readUInt16BE","readBigUIntLE","reverse","readBigUIntBE","readOffset","val","internalBytes","readUInt8Enum","invalidEnumErrorFormatter","num","MAX_STRING_LENGTH_BYTES","CLARITY_INT_SIZE","CLARITY_INT_BYTE_SIZE","AnchorMode","ClarityVersion","PayloadType","AssetType","TxRejectedReason","AuthFieldType","TenureChangeCause","PostConditionPrincipalId","NonFungibleConditionCode","FungibleConditionCode","PubKeyEncoding","AddressHashMode","AuthType","PostConditionType","PostConditionMode","OnChainOnly","OffChainOnly","Any","Rho","Id","Pi","idxL","idxR","k","shifts","shiftsL","idx","shiftsR","Kl","Kr","rotl","f","group","y","z","BUF","RIPEMD160","h0","h1","h2","h3","h4","al","ar","bl","br","cl","cr","dl","dr","el","er","rGroup","hbl","hbr","rl","rr","sl","sr","tl","tr","ripemd160","U32_MASK64","fromBig","le","lst","Ah","Al","s","Bh","Bl","Cl","low","Ch","Dl","Dh","Eh","El","SHA512_Kh","SHA512_Kl","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","SHA512_224","SHA512_256","SHA384","sha512_256","_0n","_1n","_2n","_3n","_8n","CURVE","freeze","P","Gx","Gy","beta","divNearest","endo","splitScalar","a1","b1","a2","b2","POW_2_128","c1","c2","k1","mod","k2","k1neg","k2neg","fieldLen","groupLen","hashLen","compressedLen","uncompressedLen","weierstrass","x2","x3","USE_ENDOMORPHISM","ShaError","assertJacPoint","JacobianPoint","fromAffine","p","equals","ZERO","toAffineBatch","points","toInv","nums","scratch","inverted","invert","acc","reduceRight","invertBatch","toAffine","normalizeZ","X1","Y1","Z1","X2","Y2","Z2","Z1Z1","Z2Z2","U1","U2","S1","S2","negate","double","x1b","X3","Y3","Z3","HH","HHH","V","subtract","multiplyUnsafe","scalar","P0","normalizeScalar","k1p","k2p","precomputeWindow","W","windows","base","wNAF","affinePoint","_WINDOW_SIZE","precomputes","pointPrecomputes","windowSize","mask","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","constTimeNegate","multiply","point","fake","f1p","f2p","invZ","is0","iz1","iz2","iz3","ax","ay","zz","condition","item","neg","_setWindowSize","delete","hasEvenY","fromCompressedHex","isShort","bytesToNumber","isValidFieldElement","_6n","_11n","_22n","_23n","_44n","_88n","b3","b6","pow2","b9","b11","b22","b44","b88","b176","b220","b223","t1","t2","rt","sqrtMod","isYOdd","assertValidity","fromUncompressedHex","fromHex","ensureBytes","header","fromPrivateKey","privateKey","normalizePrivateKey","fromSignature","msgHash","signature","recovery","normalizeSignature","truncateHash","radj","rinv","u1","u2","R","numTo32bStr","Q","multiplyAndAddUnsafe","toRawBytes","isCompressed","toHex","toHexX","toRawX","left","aP","bQ","sum","sliceDER","parseDERInt","Signature","fromCompact","hexToNumber","fromDER","sBytes","rBytesLeft","parseDERSignature","isWithinCurveOrder","hasHighS","HALF","normalizeS","toDERRawBytes","toDERHex","sHex","numberToHexUnpadded","rHex","sHexL","rHexL","sLen","rLen","toCompactRawBytes","toCompactHex","POW_2_256","numTo32b","power","modulo","q","m","truncateOnly","delta","bits2int_2","_sha256Sync","_hmacSha256Sync","HmacDrbg","qByteLen","counter","hmac","hmacSha256","hmacSync","checkSync","incr","reseed","seed","reseedSync","generate","generateSync","kmdToSig","kBytes","lowS","kinv","sig","error","bits2int","bits2octets","z1","z2","int2octets","vopts","strict","publicKey","normalizePublicKey","sinv","TAGGED_HASH_PREFIXES","isValidPrivateKey","_bigintTo32Bytes","_normalizePrivateKey","hashToPrivateKey","minLen","randomPrivateKey","precompute","cached","messages","subtle","createHash","ckey","importKey","sign","createHmac","sha256Sync","hmacSha256Sync","taggedHash","tagP","tagH","taggedHashSync","_JacobianPoint","defineProperties","configurable","ClarityWireType","ClarityType","clarityTypeToByte","MAX_U128","MIN_U128","MAX_I128","MIN_I128","bigInt","UInt","StacksWireType","lengthPrefixBytes","LengthPrefixedList","MessageSignature","createLPString","content","maxLengthBytes","prefixLength","maxLength","LengthPrefixedString","c32AddressString","addressData","Address","hash160","pubKeyEncoding","contents","TransactionAuthField","HMAC","_key","iHash","oHash","buf","COORDINATE_BYTES","parseRecoverableSignatureVrs","recoveryIdHex","recoveryId","privateKeyBuffer","PublicKey","msgs","privateKeyIsCompressed","startsWith","signWithKey","messageHash","rawSignature","privKey","extraEntropy","seedArgs","initSigArgs","drbg","canonical","recSig","der","recovered","hashed","finalizeSig","addressFromPublicKeys","hashMode","numSigs","publicKeys","P2PKH","P2WPKH","P2WSH","P2WSHNonSequential","hashP2WPKH","P2SH","P2SHNonSequential","hashP2SH","serializePublicKeyBytes","hashP2WSH","address","parseAssetString","assetAddress","assetContractName","assetTokenName","split","addressString","contractName","assetName","Asset","parsePrincipalString","principalString","addr","Principal","Contract","createContractPrincipal","Standard","createStandardPrincipal","principal","contractPrincipalCVFromAddress","PrincipalStandard","PrincipalContract","OptionalNone","OptionalSome","tupleCV","Tuple","StringASCII","serializedClarityValue","bytesReader","hasHexPrefix","int","Int","uint","bufferLength","true","BoolTrue","false","BoolFalse","deserializeAddress","contract","deserializeLPString","ok","ResponseOk","err","ResponseErr","responseErrorCV","none","list","listLength","listContents","List","tuple","tupleLength","tupleContents","clarityName","ascii","asciiStrLen","asciiStr","utf8","utf8StrLen","utf8Str","StringUTF8","leftPadHex","hexString","rightPadHexToLength","padEnd","cloneDeep","txidFromData","keyHash","redeemScript","pubKeys","bytesArray","pubKey","scriptArray","script","parseReadOnlyResponse","okay","cause","bytesWithTypeID","typeId","serializeStringCV","cv","encoding","serializeBoolCV","ceil","serializeBufferCV","serializeUIntCV","toTwos","serializeIntCV","serializeAddressBytes","serializeStandardPrincipalCV","contractId","parseContractId","serializeLPStringBytes","serializeContractPrincipalCV","serializeResponseCV","serializedValue","serializeListCV","lexicographicOrder","sort","localeCompare","nameWithLength","serializeTupleCV","serializeStringAsciiCV","serializeStringUtf8CV","serializeStacksWireBytes","wire","serializePrincipalBytes","MemoString","memoString","contentBytes","paddedContent","serializeMemoStringBytes","serializeAssetBytes","PostCondition","postCondition","conditionType","Fungible","NonFungible","asset","conditionCode","STX","amount","serializePostConditionWireBytes","serializeLPListBytes","Payload","serializePayloadBytes","field","Compressed","PublicKeyCompressed","PublicKeyUncompressed","SignatureCompressed","SignatureUncompressed","serializeMessageSignatureBytes","serializeTransactionAuthFieldBytes","serialized","lps","info","lpList","payload","payloadType","TokenTransfer","recipient","memo","ContractCall","contractAddress","functionName","numArgs","functionArgs","SmartContract","codeBody","VersionedSmartContract","clarityVersion","PoisonMicroblock","Coinbase","coinbaseBytes","CoinbaseToAltRecipient","NakamotoCoinbase","vrfProof","TenureChange","tenureHash","previousTenureHash","burnViewHash","previousTenureEnd","previousTenureBlocks","publicKeyHash","messageSignature","emptyMessageSignature","nonce","fee","signer","keyEncoding","Uncompressed","isSingleSig","isSequentialMultiSig","isNonSequentialMultiSig","clearCondition","cloned","fields","serializeSpendingConditionBytes","serializeSingleSigSpendingConditionBytes","writeUInt16BE","signaturesRequired","serializeMultiSigSpendingConditionBytes","sigHashPreSign","curSigHash","authType","sigHash","sigHashPostSign","hashLength","sigHashBytes","nextVerification","initialSigHash","sigHashPre","parsedSignature","compressed","publicKeyFromSignatureVrs","nextSigHash","spendingCondition","sponsorSpendingCondition","Sponsored","intoInitialSighashAuth","auth","newInitialSigHash","postConditions","postConditionMode","Deny","anchorMode","signBegin","tx","txid","verifyBegin","verifyOrigin","addrBytes","verifySingleSig","haveUncompressed","verifyMultiSig","signNextOrigin","signAndAppend","signNextSponsor","appendPubkey","cond","nextSig","nextSignature","serializeBytes","setSponsor","setFee","setNonce","setSponsorNonce","serialize","chainIdBytes","serializeAuthorizationBytes","transaction","TRANSFER_FEE_ESTIMATE_PATH","TRANSACTION_FEE_ESTIMATE_PATH","ACCOUNT_PATH","CONTRACT_ABI_PATH","broadcastTransaction","txOpt","attachment","attachOpt","_network","_client","json","options","method","body","JSON","stringify","text","fetchCallReadOnlyFunction","senderAddress","sender","arguments","encodeURIComponent","catch","status","statusText","cvToString","getCVTypeString","ClarityAbiTypeId","isClarityAbiPrimitive","isClarityAbiBuffer","isClarityAbiStringAscii","isClarityAbiStringUtf8","isClarityAbiResponse","isClarityAbiOptional","optional","isClarityAbiTuple","isClarityAbiList","getTypeString","matchType","abiType","union","ClarityAbiTypeUInt128","ClarityAbiTypeInt128","ClarityAbiTypeBool","ClarityAbiTypePrincipal","ClarityAbiTypeTraitReference","ClarityAbiTypeNone","ClarityAbiTypeBuffer","ClarityAbiTypeResponse","ClarityAbiTypeOptional","ClarityAbiTypeTuple","ClarityAbiTypeList","ClarityAbiTypeStringAscii","ClarityAbiTypeStringUtf8","getTypeUnion","abiTupleEntry","FUNGIBLE_COMPARATOR_MAPPING","Equal","gt","Greater","lt","Less","gte","GreaterEqual","lte","LessEqual","NON_FUNGIBLE_COMPARATOR_MAPPING","sent","Sends","DoesNotSend","originDone","checkOversign","checkOverlap","nextVerify","createSponsorSigner","originSigHash","signOrigin","nextSighash","appendOrigin","signSponsor","getTxInComplete","resume","makeUnsignedContractCall","txOptions","defaultOptions","sponsored","Allow","validateWithAbi","abi","parse","fetchAbi","filtered","functions","fn","abiArgs","payloadArg","abiArg","argNum","validateContractCall","useNonSequentialMultiSig","sortPublicKeysForAddress","numSignatures","authorization","lpPostConditions","pc","postcondition","Origin","assetId","estimatedLength","multiSigSpendingCondition","existingSignatures","totalSignatureLength","estimateTransactionByteLength","transaction_payload","estimated_len","reason","reason_data","estimations","fetchFeeEstimateTransaction","Accept","feeRateResult","txBytes","fetchFeeEstimateTransfer","txNonce","possible_next_nonce","_getNonceApi","makeContractCall","senderKey","signerKeys","pubs","signerKey","find","mutatingSignAppendMultiSig","publicKeysSorted","PoXAddressVersion","BitcoinNetworkVersion","devnet","mocknet","B58_ADDR_PREFIXES","SEGWIT_V0_ADDR_PREFIX","SEGWIT_V1_ADDR_PREFIX","SegwitPrefix","SEGWIT_ADDR_PREFIXES","SEGWIT_V0","SEGWIT_V1","PoxOperationPeriod","StackingErrors","assertNumber","chain","wrap","alphabet","digits","letter","separator","padding","bits","chr","end","normalize","convertRadix","done","digit","digitBase","gcd","radix2carry","convertRadix2","radix2","revPadding","unsafeWrapper","genBase58","abc","BECH_ALPHABET","POLYMOD_GENERATORS","bech32Polymod","chk","bechChecksum","words","encodingConst","genBech32","ENCODING_CONST","_words","fromWords","toWords","fromWordsUnsafe","limit","lowered","sepIndex","lastIndexOf","endsWith","actualLength","decodeToBytes","bech32","bech32m","ensureUInt53","chainPrefix","encodeMessage","messageBytes","encodedLength","writeUInt16LE","InvalidPublicKeyReason","STRUCTURED_DATA_PREFIX","hashStructuredDataBytes","structuredData","encodeStructuredDataBytes","domain","structuredDataHash","domainHash","InvalidAddressError","innerError","btcAddressVersionToLegacyHashMode","btcAddressVersion","decodeBtcAddress","btcAddress","decodeBtcAddressBytes","newChecksum","base58CheckDecode","b32","bech32Words","witnessVersion","bech32Decode","bech32MWords","bech32MDecode","decodeNativeSegwitBtcAddress","dataLength","P2TR","nativeAddressToSegwitVersion","extractPoxAddressFromClarityValue","poxAddrClarityValue","clarityValue","versionCV","hashBytesCV","hashBytes","getErrorString","ERR_STACKING_UNREACHABLE","ERR_STACKING_CORRUPTED_STATE","ERR_STACKING_INSUFFICIENT_FUNDS","ERR_STACKING_INVALID_LOCK_PERIOD","ERR_STACKING_ALREADY_STACKED","ERR_STACKING_NO_SUCH_PRINCIPAL","ERR_STACKING_EXPIRED","ERR_STACKING_STX_LOCKED","ERR_STACKING_PERMISSION_DENIED","ERR_STACKING_THRESHOLD_NOT_MET","ERR_STACKING_POX_ADDRESS_IN_USE","ERR_STACKING_INVALID_POX_ADDRESS","ERR_STACKING_ALREADY_REJECTED","ERR_STACKING_INVALID_AMOUNT","ERR_NOT_ALLOWED","ERR_STACKING_ALREADY_DELEGATED","ERR_DELEGATION_EXPIRES_DURING_LOCK","ERR_DELEGATION_TOO_MUCH_LOCKED","ERR_DELEGATION_POX_ADDR_REQUIRED","ERR_INVALID_START_BURN_HEIGHT","ERR_NOT_CURRENT_STACKER","ERR_STACK_EXTEND_NOT_LOCKED","ERR_STACK_INCREASE_NOT_LOCKED","ERR_DELEGATION_NO_REWARD_SLOT","ERR_DELEGATION_WRONG_REWARD_SLOT","ERR_STACKING_IS_DELEGATED","ERR_STACKING_NOT_DELEGATED","poxAddressToTuple","poxAddress","hashbytes","_poxAddressToBtcAddress_Values","P2SHP2WPKH","P2SHP2WSH","btcAddrVersion","legacyHashModeToBtcAddressVersion","base58Encode","base58CheckEncode","poxAddressToBtcAddress","poxAddr","_poxAddressToBtcAddress_ClarityValue","unwrap","unwrapMap","ensurePox2Activated","operationInfo","period","Period1","ensureLegacyBtcAddressForPox1","ensureSignerArgsReadiness","signerSignature","maxAmount","authId","hasMaxAmount","hasAuthId","Pox4SignatureTopic","signPox4SignatureHash","topic","rewardCycle","signMessageHashRsv","signStructuredData","pox4SignatureMessage","verifyPox4SignatureHash","verificationResult","hashMessage","verifyMessageSignature","verifyMessageSignatureRsv","lockPeriod","networkOrName","StackingClient","getCoreInfo","getPoxInfo","getTargetBlockTime","target_block_time","getAccountStatus","balance","locked","getAccountBalance","getAccountExtendedBalances","stx","total_sent","total_received","getAccountBalanceLocked","getCycleDuration","poxInfoPromise","targetBlockTimePromise","all","poxInfo","targetBlockTime","reward_cycle_length","getRewardsTotalForBtcAddress","reward_amount","getRewardsForBtcAddress","getRewardHoldersForBtcAddress","getRewardSet","rewardCyleId","rewardSetIndex","pox_address","total_ustx","getSecondsUntilNextCycle","coreInfoPromise","coreInfo","burn_block_height","first_burnchain_block_height","getSecondsUntilStackingDeadline","next_cycle","blocks_until_prepare_phase","getPoxOperationInfo","poxContractVersions","contract_versions","activation_burnchain_block_height","pox1","pox2","pox3","pox4","activatedPoxs","current_burnchain_block_height","Period3","hasMinimumStx","min_amount_ustx","canStack","cycles","balancePromise","contract_id","reward_cycle_id","responseCV","eligible","amountMicroStx","burnBlockHeight","poxOperationInfo","getStackingContract","callOptions","getStackOptions","renamePrivateKey","stackExtend","extendCycles","getStackExtendOptions","stackIncrease","increaseBy","getStackIncreaseOptions","delegateStx","delegateTo","untilBurnBlockHeight","getDelegateOptions","delegateStackStx","stacker","getDelegateStackOptions","delegateStackExtend","extendCount","getDelegateStackExtendOptions","delegateStackIncrease","getDelegateStackIncreaseOptions","stackAggregationCommit","getStackAggregationCommitOptions","stackAggregationCommitIndexed","getStackAggregationCommitOptionsIndexed","stackAggregationIncrease","rewardIndex","getStackAggregationIncreaseOptions","rewardCycleIndex","revokeDelegateStx","getRevokeDelegateStxOptions","getStatus","account","firstRewardCycle","details","first_reward_cycle","lock_period","unlock_height","getDelegationStatus","delegatedTo","delegated","amount_micro_stx","delegated_to","until_burn_ht","verifySignerKeySignature","Period2a","Period2b","modifyLockTxFee","getFee","parts","validateStacksAddress","signPoxSignature","signerPrivateKey"],"sourceRoot":""}